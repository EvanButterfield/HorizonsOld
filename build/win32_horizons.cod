; Listing generated by Microsoft (R) Optimizing Compiler Version 19.29.30146.0 

include listing.inc

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

PUBLIC	XInputGetStateStub
PUBLIC	XInputSetStateStub
_DATA	SEGMENT
COMM	_fltused:DWORD
_DATA	ENDS
PUBLIC	GameUpdateAndRenderStub
PUBLIC	WinMain
PUBLIC	HRESULT_FROM_WIN32
PUBLIC	XAudio2Create
PUBLIC	WinMainCRTStartup
PUBLIC	?s_dllInstance@?1??XAudio2Create@@9@9		; `XAudio2Create'::`2'::s_dllInstance
PUBLIC	?s_pfnAudio2CreateWithVersion@?1??XAudio2Create@@9@9 ; `XAudio2Create'::`2'::s_pfnAudio2CreateWithVersion
PUBLIC	?s_pfnAudio2Create@?1??XAudio2Create@@9@9	; `XAudio2Create'::`2'::s_pfnAudio2Create
PUBLIC	??_C@_1BM@IMMHPOFC@?$AAx?$AAa?$AAu?$AAd?$AAi?$AAo?$AA2?$AA_?$AA9?$AA?4?$AAd?$AAl?$AAl@ ; `string'
PUBLIC	??_C@_0BN@LCGMINPD@XAudio2CreateWithVersionInfo@ ; `string'
PUBLIC	??_C@_0O@MFBKMJDH@XAudio2Create@		; `string'
PUBLIC	__real@3ec8b439
PUBLIC	__real@3f158106
PUBLIC	__real@3f6dd2f2
PUBLIC	__real@3f800000
PUBLIC	__real@40000000
EXTRN	__imp_CompareFileTime:PROC
EXTRN	__imp_CreateFileA:PROC
EXTRN	__imp_CreateFileW:PROC
EXTRN	__imp_GetFileAttributesExW:PROC
EXTRN	__imp_GetFileSizeEx:PROC
EXTRN	__imp_ReadFile:PROC
EXTRN	__imp_SetFilePointer:PROC
EXTRN	__imp_WriteFile:PROC
EXTRN	__imp_OutputDebugStringA:PROC
EXTRN	__imp_CloseHandle:PROC
EXTRN	__imp_GetLastError:PROC
EXTRN	__imp_QueryPerformanceCounter:PROC
EXTRN	__imp_QueryPerformanceFrequency:PROC
EXTRN	__imp_Sleep:PROC
EXTRN	__imp_ExitProcess:PROC
EXTRN	__imp_VirtualAlloc:PROC
EXTRN	__imp_FreeLibrary:PROC
EXTRN	__imp_GetModuleHandleW:PROC
EXTRN	__imp_GetProcAddress:PROC
EXTRN	__imp_LoadLibraryExW:PROC
EXTRN	__imp_LoadLibraryA:PROC
EXTRN	__imp_LoadLibraryW:PROC
EXTRN	__imp_CopyFileW:PROC
EXTRN	__imp_GetDeviceCaps:PROC
EXTRN	__imp_TranslateMessage:PROC
EXTRN	__imp_DispatchMessageA:PROC
EXTRN	__imp_PeekMessageA:PROC
EXTRN	__imp_DefWindowProcW:PROC
EXTRN	__imp_RegisterClassW:PROC
EXTRN	__imp_CreateWindowExW:PROC
EXTRN	__imp_GetDC:PROC
EXTRN	__imp_GetClientRect:PROC
EXTRN	__imp_ShowCursor:PROC
EXTRN	__imp_ClientToScreen:PROC
EXTRN	__imp_LoadCursorW:PROC
EXTRN	__imp_WideCharToMultiByte:PROC
EXTRN	__imp_timeBeginPeriod:PROC
EXTRN	__imp_CoInitializeEx:PROC
EXTRN	CreateDXGIFactory:PROC
EXTRN	D3D11CreateDevice:PROC
EXTRN	D3DCompileFromFile:PROC
EXTRN	IID_ID3D11Texture2D:BYTE
EXTRN	IID_ID3D11InfoQueue:BYTE
EXTRN	IID_IDXGIFactory2:BYTE
EXTRN	__ImageBase:BYTE
EXTRN	_fltused:DWORD
;	COMDAT ?s_dllInstance@?1??XAudio2Create@@9@9
_BSS	SEGMENT
?s_dllInstance@?1??XAudio2Create@@9@9 DQ 01H DUP (?)	; `XAudio2Create'::`2'::s_dllInstance
_BSS	ENDS
;	COMDAT ?s_pfnAudio2CreateWithVersion@?1??XAudio2Create@@9@9
_BSS	SEGMENT
?s_pfnAudio2CreateWithVersion@?1??XAudio2Create@@9@9 DQ 01H DUP (?) ; `XAudio2Create'::`2'::s_pfnAudio2CreateWithVersion
_BSS	ENDS
;	COMDAT ?s_pfnAudio2Create@?1??XAudio2Create@@9@9
_BSS	SEGMENT
?s_pfnAudio2Create@?1??XAudio2Create@@9@9 DQ 01H DUP (?) ; `XAudio2Create'::`2'::s_pfnAudio2Create
_BSS	ENDS
_BSS	SEGMENT
GlobalState DQ	01H DUP (?)
_BSS	ENDS
pdata	SEGMENT
$pdata$SafeTruncateUInt64 DD imagerel SafeTruncateUInt64
	DD	imagerel SafeTruncateUInt64+47
	DD	imagerel $unwind$SafeTruncateUInt64
$pdata$PushSize DD imagerel PushSize
	DD	imagerel PushSize+100
	DD	imagerel $unwind$PushSize
$pdata$PopSize DD imagerel PopSize
	DD	imagerel PopSize+92
	DD	imagerel $unwind$PopSize
$pdata$AlignTo DD imagerel AlignTo
	DD	imagerel AlignTo+103
	DD	imagerel $unwind$AlignTo
$pdata$WinMain DD imagerel $LN25
	DD	imagerel $LN25+2551
	DD	imagerel $unwind$WinMain
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$HRESULT_FROM_WIN32 DD imagerel $LN5
	DD	imagerel $LN5+53
	DD	imagerel $unwind$HRESULT_FROM_WIN32
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$XAudio2Create DD imagerel $LN8
	DD	imagerel $LN8+240
	DD	imagerel $unwind$XAudio2Create
pdata	ENDS
pdata	SEGMENT
$pdata$Win32GetWindowDimension DD imagerel Win32GetWindowDimension
	DD	imagerel Win32GetWindowDimension+86
	DD	imagerel $unwind$Win32GetWindowDimension
$pdata$Win32InitD3D11 DD imagerel Win32InitD3D11
	DD	imagerel Win32InitD3D11+1584
	DD	imagerel $unwind$Win32InitD3D11
$pdata$Win32D3D11BeginFrame DD imagerel Win32D3D11BeginFrame
	DD	imagerel Win32D3D11BeginFrame+1134
	DD	imagerel $unwind$Win32D3D11BeginFrame
$pdata$Win32D3D11RenderMesh DD imagerel Win32D3D11RenderMesh
	DD	imagerel Win32D3D11RenderMesh+866
	DD	imagerel $unwind$Win32D3D11RenderMesh
$pdata$Win32D3D11EndFrame DD imagerel Win32D3D11EndFrame
	DD	imagerel Win32D3D11EndFrame+93
	DD	imagerel $unwind$Win32D3D11EndFrame
$pdata$Win32D3D11CreateTexture DD imagerel Win32D3D11CreateTexture
	DD	imagerel Win32D3D11CreateTexture+275
	DD	imagerel $unwind$Win32D3D11CreateTexture
$pdata$Win32D3D11CreateMesh DD imagerel Win32D3D11CreateMesh
	DD	imagerel Win32D3D11CreateMesh+345
	DD	imagerel $unwind$Win32D3D11CreateMesh
$pdata$Win32D3D11CreateShader DD imagerel Win32D3D11CreateShader
	DD	imagerel Win32D3D11CreateShader+1689
	DD	imagerel $unwind$Win32D3D11CreateShader
$pdata$ReleaseMesh DD imagerel ReleaseMesh
	DD	imagerel ReleaseMesh+60
	DD	imagerel $unwind$ReleaseMesh
$pdata$Win32OutputString DD imagerel Win32OutputString
	DD	imagerel Win32OutputString+25
	DD	imagerel $unwind$Win32OutputString
$pdata$Win32LoadXInput DD imagerel Win32LoadXInput
	DD	imagerel Win32LoadXInput+137
	DD	imagerel $unwind$Win32LoadXInput
$pdata$Win32InitCOM DD imagerel Win32InitCOM
	DD	imagerel Win32InitCOM+34
	DD	imagerel $unwind$Win32InitCOM
$pdata$Win32InitXAudio2 DD imagerel Win32InitXAudio2
	DD	imagerel Win32InitXAudio2+137
	DD	imagerel $unwind$Win32InitXAudio2
$pdata$Win32GetLastWriteTime DD imagerel Win32GetLastWriteTime
	DD	imagerel Win32GetLastWriteTime+70
	DD	imagerel $unwind$Win32GetLastWriteTime
$pdata$Win32LoadGameCode DD imagerel Win32LoadGameCode
	DD	imagerel Win32LoadGameCode+252
	DD	imagerel $unwind$Win32LoadGameCode
$pdata$Win32UnloadGameCode DD imagerel Win32UnloadGameCode
	DD	imagerel Win32UnloadGameCode+81
	DD	imagerel $unwind$Win32UnloadGameCode
$pdata$Win32OpenFile DD imagerel Win32OpenFile
	DD	imagerel Win32OpenFile+160
	DD	imagerel $unwind$Win32OpenFile
$pdata$Win32OpenFile8 DD imagerel Win32OpenFile8
	DD	imagerel Win32OpenFile8+160
	DD	imagerel $unwind$Win32OpenFile8
$pdata$Win32GetFileSize DD imagerel Win32GetFileSize
	DD	imagerel Win32GetFileSize+68
	DD	imagerel $unwind$Win32GetFileSize
$pdata$Win32ReadEntireFile DD imagerel Win32ReadEntireFile
	DD	imagerel Win32ReadEntireFile+82
	DD	imagerel $unwind$Win32ReadEntireFile
$pdata$Win32WriteEntireFile DD imagerel Win32WriteEntireFile
	DD	imagerel Win32WriteEntireFile+113
	DD	imagerel $unwind$Win32WriteEntireFile
$pdata$Win32CloseFile DD imagerel Win32CloseFile
	DD	imagerel Win32CloseFile+25
	DD	imagerel $unwind$Win32CloseFile
$pdata$Win32GetWallClock DD imagerel Win32GetWallClock
	DD	imagerel Win32GetWallClock+25
	DD	imagerel $unwind$Win32GetWallClock
$pdata$Win32GetSecondsElapsed DD imagerel Win32GetSecondsElapsed
	DD	imagerel Win32GetSecondsElapsed+70
	DD	imagerel $unwind$Win32GetSecondsElapsed
$pdata$Win32CreateMesh DD imagerel Win32CreateMesh
	DD	imagerel Win32CreateMesh+118
	DD	imagerel $unwind$Win32CreateMesh
$pdata$Win32PopMesh DD imagerel Win32PopMesh
	DD	imagerel Win32PopMesh+50
	DD	imagerel $unwind$Win32PopMesh
$pdata$Win32CreateTexture DD imagerel Win32CreateTexture
	DD	imagerel Win32CreateTexture+103
	DD	imagerel $unwind$Win32CreateTexture
$pdata$Win32CreateShader DD imagerel Win32CreateShader
	DD	imagerel Win32CreateShader+90
	DD	imagerel $unwind$Win32CreateShader
$pdata$Win32RenderMesh DD imagerel Win32RenderMesh
	DD	imagerel Win32RenderMesh+102
	DD	imagerel $unwind$Win32RenderMesh
$pdata$Win32LoadSound DD imagerel Win32LoadSound
	DD	imagerel Win32LoadSound+1486
	DD	imagerel $unwind$Win32LoadSound
$pdata$Win32CreateSound DD imagerel Win32CreateSound
	DD	imagerel Win32CreateSound+217
	DD	imagerel $unwind$Win32CreateSound
$pdata$Win32PlaySound DD imagerel Win32PlaySound
	DD	imagerel Win32PlaySound+229
	DD	imagerel $unwind$Win32PlaySound
$pdata$Win32SetSoundVolume DD imagerel Win32SetSoundVolume
	DD	imagerel Win32SetSoundVolume+77
	DD	imagerel $unwind$Win32SetSoundVolume
$pdata$Win32StopSound DD imagerel Win32StopSound
	DD	imagerel Win32StopSound+70
	DD	imagerel $unwind$Win32StopSound
$pdata$Win32SoundIsPlaying DD imagerel Win32SoundIsPlaying
	DD	imagerel Win32SoundIsPlaying+90
	DD	imagerel $unwind$Win32SoundIsPlaying
$pdata$Win32DeleteSound DD imagerel Win32DeleteSound
	DD	imagerel Win32DeleteSound+68
	DD	imagerel $unwind$Win32DeleteSound
$pdata$Win32CopyMemory DD imagerel Win32CopyMemory
	DD	imagerel Win32CopyMemory+37
	DD	imagerel $unwind$Win32CopyMemory
$pdata$Win32ZeroMemory DD imagerel Win32ZeroMemory
	DD	imagerel Win32ZeroMemory+27
	DD	imagerel $unwind$Win32ZeroMemory
$pdata$Win32WindowProc DD imagerel Win32WindowProc
	DD	imagerel Win32WindowProc+1488
	DD	imagerel $unwind$Win32WindowProc
$pdata$WinMainCRTStartup DD imagerel $LN3
	DD	imagerel $LN3+47
	DD	imagerel $unwind$WinMainCRTStartup
pdata	ENDS
;	COMDAT __real@40000000
CONST	SEGMENT
__real@40000000 DD 040000000r			; 2
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f6dd2f2
CONST	SEGMENT
__real@3f6dd2f2 DD 03f6dd2f2r			; 0.929
CONST	ENDS
;	COMDAT __real@3f158106
CONST	SEGMENT
__real@3f158106 DD 03f158106r			; 0.584
CONST	ENDS
;	COMDAT __real@3ec8b439
CONST	SEGMENT
__real@3ec8b439 DD 03ec8b439r			; 0.392
CONST	ENDS
_DATA	SEGMENT
$SG140072 DB	'vs_5_0', 00H
	ORG $+1
$SG140073 DB	'Vertex', 00H
	ORG $+1
$SG140076 DB	'ps_5_0', 00H
	ORG $+1
$SG140077 DB	'Pixel', 00H
	ORG $+2
$SG140083 DB	'POSITION', 00H
	ORG $+3
$SG140085 DB	'UV', 00H
	ORG $+1
$SG140087 DB	'POSITION', 00H
	ORG $+3
$SG140091 DB	'NORMAL', 00H
	ORG $+5
$SG140089 DB	'TEXCOORD', 00H
	ORG $+3
$SG140093 DB	'COLOR', 00H
	ORG $+6
XInputGetState_ DQ FLAT:XInputGetStateStub
XInputSetState_ DQ FLAT:XInputSetStateStub
$SG140151 DB	'Xinput9_1_0.dll', 00H
$SG140153 DB	'Xinput1_4.dll', 00H
	ORG $+2
$SG140155 DB	'Xinput1_3.dll', 00H
	ORG $+2
$SG140157 DB	'XInputGetState', 00H
	ORG $+1
$SG140158 DB	'XInputSetState', 00H
	ORG $+1
$SG140205 DB	'GameUpdateAndRender', 00H
	ORG $+4
$SG140552 DB	'C', 00H, 'h', 00H, 'a', 00H, 'r', 00H, 'i', 00H, 'o', 00H
	DB	't', 00H, 'W', 00H, 'i', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'w'
	DB	00H, 'C', 00H, 'l', 00H, 'a', 00H, 's', 00H, 's', 00H, 00H, 00H
	ORG $+2
$SG140553 DB	'h', 00H, 'o', 00H, 'r', 00H, 'i', 00H, 'z', 00H, 'o', 00H
	DB	'n', 00H, 's', 00H, '.', 00H, 'd', 00H, 'l', 00H, 'l', 00H, 00H
	DB	00H
	ORG $+6
$SG140554 DB	'h', 00H, 'o', 00H, 'r', 00H, 'i', 00H, 'z', 00H, 'o', 00H
	DB	'n', 00H, 's', 00H, '_', 00H, 't', 00H, 'e', 00H, 'm', 00H, 'p'
	DB	00H, '.', 00H, 'd', 00H, 'l', 00H, 'l', 00H, 00H, 00H
	ORG $+4
$SG140555 DB	'l', 00H, 'o', 00H, 'c', 00H, 'k', 00H, '.', 00H, 't', 00H
	DB	'm', 00H, 'p', 00H, 00H, 00H
	ORG $+6
$SG140558 DB	'N', 00H, 'e', 00H, 'w', 00H, ' ', 00H, 'H', 00H, 'o', 00H
	DB	'r', 00H, 'i', 00H, 'z', 00H, 'o', 00H, 'n', 00H, 's', 00H, 00H
	DB	00H
_DATA	ENDS
;	COMDAT ??_C@_0O@MFBKMJDH@XAudio2Create@
_DATA	SEGMENT
??_C@_0O@MFBKMJDH@XAudio2Create@ DB 'XAudio2Create', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BN@LCGMINPD@XAudio2CreateWithVersionInfo@
_DATA	SEGMENT
??_C@_0BN@LCGMINPD@XAudio2CreateWithVersionInfo@ DB 'XAudio2CreateWithVer'
	DB	'sionInfo', 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_1BM@IMMHPOFC@?$AAx?$AAa?$AAu?$AAd?$AAi?$AAo?$AA2?$AA_?$AA9?$AA?4?$AAd?$AAl?$AAl@
_DATA	SEGMENT
??_C@_1BM@IMMHPOFC@?$AAx?$AAa?$AAu?$AAd?$AAi?$AAo?$AA2?$AA_?$AA9?$AA?4?$AAd?$AAl?$AAl@ DB 'x'
	DB	00H, 'a', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H, '2', 00H
	DB	'_', 00H, '9', 00H, '.', 00H, 'd', 00H, 'l', 00H, 'l', 00H, 00H
	DB	00H						; `string'
_DATA	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$XAudio2Create DD 011201H
	DD	04212H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$HRESULT_FROM_WIN32 DD 010801H
	DD	02208H
xdata	ENDS
xdata	SEGMENT
$unwind$SafeTruncateUInt64 DD 010901H
	DD	02209H
$unwind$PushSize DD 010e01H
	DD	0220eH
$unwind$PopSize DD 010e01H
	DD	0220eH
$unwind$AlignTo DD 010e01H
	DD	0420eH
$unwind$WinMain DD 041d01H
	DD	06f011dH
	DD	060157016H
$unwind$Win32GetWindowDimension DD 020a01H
	DD	07006720aH
$unwind$Win32InitD3D11 DD 031201H
	DD	0560112H
	DD	0700bH
$unwind$Win32D3D11BeginFrame DD 021601H
	DD	0190116H
$unwind$Win32D3D11RenderMesh DD 031a01H
	DD	07016e21aH
	DD	06015H
$unwind$Win32D3D11EndFrame DD 010d01H
	DD	0620dH
$unwind$Win32D3D11CreateTexture DD 011801H
	DD	0e218H
$unwind$Win32D3D11CreateMesh DD 021b01H
	DD	011011bH
$unwind$Win32D3D11CreateShader DD 021b01H
	DD	041011bH
$unwind$ReleaseMesh DD 010901H
	DD	04209H
$unwind$Win32OutputString DD 010901H
	DD	04209H
$unwind$Win32LoadXInput DD 010401H
	DD	06204H
$unwind$Win32InitCOM DD 010401H
	DD	04204H
$unwind$Win32InitXAudio2 DD 010401H
	DD	0a204H
$unwind$Win32GetLastWriteTime DD 020a01H
	DD	07006920aH
$unwind$Win32LoadGameCode DD 031a01H
	DD	07016e21aH
	DD	06015H
$unwind$Win32UnloadGameCode DD 010901H
	DD	04209H
$unwind$Win32OpenFile DD 010d01H
	DD	0a20dH
$unwind$Win32OpenFile8 DD 010d01H
	DD	0a20dH
$unwind$Win32GetFileSize DD 010901H
	DD	06209H
$unwind$Win32ReadEntireFile DD 011201H
	DD	08212H
$unwind$Win32WriteEntireFile DD 011201H
	DD	08212H
$unwind$Win32CloseFile DD 010901H
	DD	04209H
$unwind$Win32GetWallClock DD 010401H
	DD	06204H
$unwind$Win32GetSecondsElapsed DD 010e01H
	DD	0220eH
$unwind$Win32CreateMesh DD 011701H
	DD	08217H
$unwind$Win32PopMesh DD 010401H
	DD	06204H
$unwind$Win32CreateTexture DD 011201H
	DD	08212H
$unwind$Win32CreateShader DD 010d01H
	DD	0620dH
$unwind$Win32RenderMesh DD 011801H
	DD	08218H
$unwind$Win32LoadSound DD 041801H
	DD	0170118H
	DD	060107011H
$unwind$Win32CreateSound DD 031b01H
	DD	07017c21bH
	DD	06016H
$unwind$Win32PlaySound DD 020a01H
	DD	07006b20aH
$unwind$Win32SetSoundVolume DD 010f01H
	DD	0620fH
$unwind$Win32StopSound DD 010901H
	DD	06209H
$unwind$Win32SoundIsPlaying DD 010901H
	DD	0a209H
$unwind$Win32DeleteSound DD 010901H
	DD	06209H
$unwind$Win32CopyMemory DD 021101H
	DD	060107011H
$unwind$Win32ZeroMemory DD 010b01H
	DD	0700bH
$unwind$Win32WindowProc DD 021801H
	DD	07014d218H
$unwind$WinMainCRTStartup DD 010401H
	DD	06204H
xdata	ENDS
; Function compile flags: /Odtp
; File W:\new-horizons\code\win32_horizons.c
_TEXT	SEGMENT
Result$ = 32
WinMainCRTStartup PROC

; 820  : {

$LN3:
  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 821  :     int Result = WinMain(GetModuleHandle(0), 0, 0, 0);

  00004	33 c9		 xor	 ecx, ecx
  00006	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetModuleHandleW
  0000c	45 33 c9	 xor	 r9d, r9d
  0000f	45 33 c0	 xor	 r8d, r8d
  00012	33 d2		 xor	 edx, edx
  00014	48 8b c8	 mov	 rcx, rax
  00017	e8 00 00 00 00	 call	 WinMain
  0001c	89 44 24 20	 mov	 DWORD PTR Result$[rsp], eax

; 822  :     ExitProcess(Result);

  00020	8b 4c 24 20	 mov	 ecx, DWORD PTR Result$[rsp]
  00024	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_ExitProcess
$LN2@WinMainCRT:

; 823  : }

  0002a	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0002e	c3		 ret	 0
WinMainCRTStartup ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File W:\new-horizons\code\win32_horizons.c
_TEXT	SEGMENT
IsDown$1 = 64
tv64 = 68
Char16$2 = 72
String$3 = 76
tv79 = 80
tv77 = 84
VKCode$4 = 88
String16$5 = 92
WasDown$6 = 96
AltKeyIsDown$7 = 100
Result$ = 104
Window$ = 128
Message$ = 136
WParam$ = 144
LParam$ = 152
Win32WindowProc PROC

; 830  : {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00013	57		 push	 rdi
  00014	48 83 ec 70	 sub	 rsp, 112		; 00000070H

; 831  :     LRESULT Result = 0;

  00018	48 c7 44 24 68
	00 00 00 00	 mov	 QWORD PTR Result$[rsp], 0

; 832  :     
; 833  :     switch(Message)

  00021	8b 84 24 88 00
	00 00		 mov	 eax, DWORD PTR Message$[rsp]
  00028	89 44 24 44	 mov	 DWORD PTR tv64[rsp], eax
  0002c	81 7c 24 44 04
	01 00 00	 cmp	 DWORD PTR tv64[rsp], 260 ; 00000104H
  00034	77 6d		 ja	 SHORT $LN49@Win32Windo
  00036	81 7c 24 44 04
	01 00 00	 cmp	 DWORD PTR tv64[rsp], 260 ; 00000104H
  0003e	0f 84 10 01 00
	00		 je	 $LN11@Win32Windo
  00044	81 7c 24 44 00
	01 00 00	 cmp	 DWORD PTR tv64[rsp], 256 ; 00000100H
  0004c	77 34		 ja	 SHORT $LN50@Win32Windo
  0004e	81 7c 24 44 00
	01 00 00	 cmp	 DWORD PTR tv64[rsp], 256 ; 00000100H
  00056	0f 84 f8 00 00
	00		 je	 $LN9@Win32Windo
  0005c	83 7c 24 44 02	 cmp	 DWORD PTR tv64[rsp], 2
  00061	0f 84 74 04 00
	00		 je	 $LN44@Win32Windo
  00067	83 7c 24 44 10	 cmp	 DWORD PTR tv64[rsp], 16
  0006c	0f 84 4a 04 00
	00		 je	 $LN43@Win32Windo
  00072	83 7c 24 44 20	 cmp	 DWORD PTR tv64[rsp], 32	; 00000020H
  00077	0f 84 8e 00 00
	00		 je	 $LN6@Win32Windo
  0007d	e9 78 04 00 00	 jmp	 $LN45@Win32Windo
$LN50@Win32Windo:
  00082	81 7c 24 44 01
	01 00 00	 cmp	 DWORD PTR tv64[rsp], 257 ; 00000101H
  0008a	0f 84 c4 00 00
	00		 je	 $LN10@Win32Windo
  00090	81 7c 24 44 02
	01 00 00	 cmp	 DWORD PTR tv64[rsp], 258 ; 00000102H
  00098	0f 84 e9 02 00
	00		 je	 $LN36@Win32Windo
  0009e	e9 57 04 00 00	 jmp	 $LN45@Win32Windo
$LN49@Win32Windo:
  000a3	81 7c 24 44 02
	02 00 00	 cmp	 DWORD PTR tv64[rsp], 514 ; 00000202H
  000ab	77 3d		 ja	 SHORT $LN51@Win32Windo
  000ad	81 7c 24 44 02
	02 00 00	 cmp	 DWORD PTR tv64[rsp], 514 ; 00000202H
  000b5	0f 84 90 03 00
	00		 je	 $LN39@Win32Windo
  000bb	81 7c 24 44 05
	01 00 00	 cmp	 DWORD PTR tv64[rsp], 261 ; 00000105H
  000c3	0f 84 8b 00 00
	00		 je	 $LN12@Win32Windo
  000c9	81 7c 24 44 00
	02 00 00	 cmp	 DWORD PTR tv64[rsp], 512 ; 00000200H
  000d1	0f 84 ad 03 00
	00		 je	 $LN42@Win32Windo
  000d7	81 7c 24 44 01
	02 00 00	 cmp	 DWORD PTR tv64[rsp], 513 ; 00000201H
  000df	0f 84 53 03 00
	00		 je	 $LN38@Win32Windo
  000e5	e9 10 04 00 00	 jmp	 $LN45@Win32Windo
$LN51@Win32Windo:
  000ea	81 7c 24 44 04
	02 00 00	 cmp	 DWORD PTR tv64[rsp], 516 ; 00000204H
  000f2	0f 84 66 03 00
	00		 je	 $LN40@Win32Windo
  000f8	81 7c 24 44 05
	02 00 00	 cmp	 DWORD PTR tv64[rsp], 517 ; 00000205H
  00100	0f 84 6b 03 00
	00		 je	 $LN41@Win32Windo
  00106	e9 ef 03 00 00	 jmp	 $LN45@Win32Windo
$LN6@Win32Windo:

; 834  :     {
; 835  :         case WM_SETCURSOR:
; 836  :         {
; 837  :             if(GlobalState->ShowCursor)

  0010b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR GlobalState
  00112	83 b8 b8 00 00
	00 00		 cmp	 DWORD PTR [rax+184], 0
  00119	74 2c		 je	 SHORT $LN7@Win32Windo

; 838  :             {
; 839  :                 Result = DefWindowProc(Window, Message, WParam, LParam);

  0011b	4c 8b 8c 24 98
	00 00 00	 mov	 r9, QWORD PTR LParam$[rsp]
  00123	4c 8b 84 24 90
	00 00 00	 mov	 r8, QWORD PTR WParam$[rsp]
  0012b	8b 94 24 88 00
	00 00		 mov	 edx, DWORD PTR Message$[rsp]
  00132	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR Window$[rsp]
  0013a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_DefWindowProcW
  00140	48 89 44 24 68	 mov	 QWORD PTR Result$[rsp], rax

; 840  :             }

  00145	eb 08		 jmp	 SHORT $LN8@Win32Windo
$LN7@Win32Windo:

; 841  :             else
; 842  :             {
; 843  :                 ShowCursor(0);

  00147	33 c9		 xor	 ecx, ecx
  00149	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_ShowCursor
$LN8@Win32Windo:

; 844  :             }
; 845  :         } break;

  0014f	e9 d0 03 00 00	 jmp	 $LN2@Win32Windo
$LN9@Win32Windo:
$LN10@Win32Windo:
$LN11@Win32Windo:
$LN12@Win32Windo:

; 846  :         
; 847  :         case WM_KEYDOWN:
; 848  :         case WM_KEYUP:
; 849  :         case WM_SYSKEYDOWN:
; 850  :         case WM_SYSKEYUP:
; 851  :         {
; 852  :             u32 VKCode = (u32)WParam;

  00154	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR WParam$[rsp]
  0015b	89 44 24 58	 mov	 DWORD PTR VKCode$4[rsp], eax

; 853  :             b32 WasDown = LParam & (1 << 30);

  0015f	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR LParam$[rsp]
  00167	48 25 00 00 00
	40		 and	 rax, 1073741824		; 40000000H
  0016d	89 44 24 60	 mov	 DWORD PTR WasDown$6[rsp], eax

; 854  :             b32 IsDown = (LParam & (1 << 31)) == 0;

  00171	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR LParam$[rsp]
  00179	48 25 00 00 00
	80		 and	 rax, -2147483648	; ffffffff80000000H
  0017f	48 85 c0	 test	 rax, rax
  00182	75 0a		 jne	 SHORT $LN47@Win32Windo
  00184	c7 44 24 54 01
	00 00 00	 mov	 DWORD PTR tv77[rsp], 1
  0018c	eb 08		 jmp	 SHORT $LN48@Win32Windo
$LN47@Win32Windo:
  0018e	c7 44 24 54 00
	00 00 00	 mov	 DWORD PTR tv77[rsp], 0
$LN48@Win32Windo:
  00196	8b 44 24 54	 mov	 eax, DWORD PTR tv77[rsp]
  0019a	89 44 24 40	 mov	 DWORD PTR IsDown$1[rsp], eax

; 855  :             
; 856  :             if(WasDown != IsDown)

  0019e	8b 44 24 40	 mov	 eax, DWORD PTR IsDown$1[rsp]
  001a2	39 44 24 60	 cmp	 DWORD PTR WasDown$6[rsp], eax
  001a6	0f 84 93 01 00
	00		 je	 $LN13@Win32Windo

; 857  :             {
; 858  :                 switch(VKCode)

  001ac	8b 44 24 58	 mov	 eax, DWORD PTR VKCode$4[rsp]
  001b0	89 44 24 50	 mov	 DWORD PTR tv79[rsp], eax
  001b4	8b 44 24 50	 mov	 eax, DWORD PTR tv79[rsp]
  001b8	83 e8 08	 sub	 eax, 8
  001bb	89 44 24 50	 mov	 DWORD PTR tv79[rsp], eax
  001bf	83 7c 24 50 4f	 cmp	 DWORD PTR tv79[rsp], 79	; 0000004fH
  001c4	0f 87 75 01 00
	00		 ja	 $LN4@Win32Windo
  001ca	8b 44 24 50	 mov	 eax, DWORD PTR tv79[rsp]
  001ce	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__ImageBase
  001d5	0f b6 84 01 00
	00 00 00	 movzx	 eax, BYTE PTR $LN52@Win32Windo[rcx+rax]
  001dd	8b 84 81 00 00
	00 00		 mov	 eax, DWORD PTR $LN53@Win32Windo[rcx+rax*4]
  001e4	48 03 c1	 add	 rax, rcx
  001e7	ff e0		 jmp	 rax
$LN14@Win32Windo:

; 859  :                 {
; 860  :                     case 'W':
; 861  :                     {
; 862  :                         GlobalState->GameInput.Keyboard.W = IsDown;

  001e9	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR GlobalState
  001f0	8b 4c 24 40	 mov	 ecx, DWORD PTR IsDown$1[rsp]
  001f4	89 48 08	 mov	 DWORD PTR [rax+8], ecx

; 863  :                     } break;

  001f7	e9 43 01 00 00	 jmp	 $LN4@Win32Windo
$LN15@Win32Windo:

; 864  :                     
; 865  :                     case 'A':
; 866  :                     {
; 867  :                         GlobalState->GameInput.Keyboard.A = IsDown;

  001fc	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR GlobalState
  00203	8b 4c 24 40	 mov	 ecx, DWORD PTR IsDown$1[rsp]
  00207	89 48 0c	 mov	 DWORD PTR [rax+12], ecx

; 868  :                     } break;

  0020a	e9 30 01 00 00	 jmp	 $LN4@Win32Windo
$LN16@Win32Windo:

; 869  :                     
; 870  :                     case 'S':
; 871  :                     {
; 872  :                         GlobalState->GameInput.Keyboard.S = IsDown;

  0020f	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR GlobalState
  00216	8b 4c 24 40	 mov	 ecx, DWORD PTR IsDown$1[rsp]
  0021a	89 48 10	 mov	 DWORD PTR [rax+16], ecx

; 873  :                     } break;

  0021d	e9 1d 01 00 00	 jmp	 $LN4@Win32Windo
$LN17@Win32Windo:

; 874  :                     
; 875  :                     case 'D':
; 876  :                     {
; 877  :                         GlobalState->GameInput.Keyboard.D = IsDown;

  00222	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR GlobalState
  00229	8b 4c 24 40	 mov	 ecx, DWORD PTR IsDown$1[rsp]
  0022d	89 48 14	 mov	 DWORD PTR [rax+20], ecx

; 878  :                     } break;

  00230	e9 0a 01 00 00	 jmp	 $LN4@Win32Windo
$LN18@Win32Windo:

; 879  :                     
; 880  :                     case 'Q':
; 881  :                     {
; 882  :                         GlobalState->GameInput.Keyboard.Q = IsDown;

  00235	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR GlobalState
  0023c	8b 4c 24 40	 mov	 ecx, DWORD PTR IsDown$1[rsp]
  00240	89 48 18	 mov	 DWORD PTR [rax+24], ecx

; 883  :                     } break;

  00243	e9 f7 00 00 00	 jmp	 $LN4@Win32Windo
$LN19@Win32Windo:

; 884  :                     
; 885  :                     case 'E':
; 886  :                     {
; 887  :                         GlobalState->GameInput.Keyboard.E = IsDown;

  00248	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR GlobalState
  0024f	8b 4c 24 40	 mov	 ecx, DWORD PTR IsDown$1[rsp]
  00253	89 48 1c	 mov	 DWORD PTR [rax+28], ecx

; 888  :                     } break;

  00256	e9 e4 00 00 00	 jmp	 $LN4@Win32Windo
$LN20@Win32Windo:

; 889  :                     
; 890  :                     case 'M':
; 891  :                     {
; 892  :                         GlobalState->GameInput.Keyboard.M = IsDown;

  0025b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR GlobalState
  00262	8b 4c 24 40	 mov	 ecx, DWORD PTR IsDown$1[rsp]
  00266	89 48 20	 mov	 DWORD PTR [rax+32], ecx

; 893  :                     } break;

  00269	e9 d1 00 00 00	 jmp	 $LN4@Win32Windo
$LN21@Win32Windo:

; 894  :                     
; 895  :                     case VK_UP:
; 896  :                     {
; 897  :                         GlobalState->GameInput.Keyboard.Up = IsDown;

  0026e	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR GlobalState
  00275	8b 4c 24 40	 mov	 ecx, DWORD PTR IsDown$1[rsp]
  00279	89 48 24	 mov	 DWORD PTR [rax+36], ecx

; 898  :                     } break;

  0027c	e9 be 00 00 00	 jmp	 $LN4@Win32Windo
$LN22@Win32Windo:

; 899  :                     
; 900  :                     case VK_LEFT:
; 901  :                     {
; 902  :                         GlobalState->GameInput.Keyboard.Left = IsDown;

  00281	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR GlobalState
  00288	8b 4c 24 40	 mov	 ecx, DWORD PTR IsDown$1[rsp]
  0028c	89 48 28	 mov	 DWORD PTR [rax+40], ecx

; 903  :                     } break;

  0028f	e9 ab 00 00 00	 jmp	 $LN4@Win32Windo
$LN23@Win32Windo:

; 904  :                     
; 905  :                     case VK_DOWN:
; 906  :                     {
; 907  :                         GlobalState->GameInput.Keyboard.Down = IsDown;

  00294	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR GlobalState
  0029b	8b 4c 24 40	 mov	 ecx, DWORD PTR IsDown$1[rsp]
  0029f	89 48 2c	 mov	 DWORD PTR [rax+44], ecx

; 908  :                     } break;

  002a2	e9 98 00 00 00	 jmp	 $LN4@Win32Windo
$LN24@Win32Windo:

; 909  :                     
; 910  :                     case VK_RIGHT:
; 911  :                     {
; 912  :                         GlobalState->GameInput.Keyboard.Right = IsDown;

  002a7	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR GlobalState
  002ae	8b 4c 24 40	 mov	 ecx, DWORD PTR IsDown$1[rsp]
  002b2	89 48 30	 mov	 DWORD PTR [rax+48], ecx

; 913  :                     } break;

  002b5	e9 85 00 00 00	 jmp	 $LN4@Win32Windo
$LN25@Win32Windo:

; 914  :                     
; 915  :                     case VK_BACK:
; 916  :                     {
; 917  :                         if(IsDown)

  002ba	83 7c 24 40 00	 cmp	 DWORD PTR IsDown$1[rsp], 0
  002bf	74 0e		 je	 SHORT $LN26@Win32Windo

; 918  :                         {
; 919  :                             GlobalState->GameInput.Keyboard.Backspace = true;

  002c1	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR GlobalState
  002c8	c7 40 34 01 00
	00 00		 mov	 DWORD PTR [rax+52], 1
$LN26@Win32Windo:

; 920  :                         }
; 921  :                     } break;

  002cf	eb 6e		 jmp	 SHORT $LN4@Win32Windo
$LN27@Win32Windo:

; 922  :                     
; 923  :                     case VK_ESCAPE:
; 924  :                     {
; 925  :                         GlobalState->GameInput.Keyboard.Escape = IsDown;

  002d1	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR GlobalState
  002d8	8b 4c 24 40	 mov	 ecx, DWORD PTR IsDown$1[rsp]
  002dc	89 48 38	 mov	 DWORD PTR [rax+56], ecx

; 926  :                     } break;

  002df	eb 5e		 jmp	 SHORT $LN4@Win32Windo
$LN28@Win32Windo:

; 927  :                     
; 928  :                     case VK_DELETE:
; 929  :                     {
; 930  :                         GlobalState->GameInput.Keyboard.Delete = IsDown;

  002e1	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR GlobalState
  002e8	8b 4c 24 40	 mov	 ecx, DWORD PTR IsDown$1[rsp]
  002ec	89 48 3c	 mov	 DWORD PTR [rax+60], ecx

; 931  :                     } break;

  002ef	eb 4e		 jmp	 SHORT $LN4@Win32Windo
$LN29@Win32Windo:

; 932  :                     
; 933  :                     case VK_SPACE:
; 934  :                     {
; 935  :                         GlobalState->GameInput.Keyboard.Space = IsDown;

  002f1	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR GlobalState
  002f8	8b 4c 24 40	 mov	 ecx, DWORD PTR IsDown$1[rsp]
  002fc	89 48 40	 mov	 DWORD PTR [rax+64], ecx

; 936  :                     } break;

  002ff	eb 3e		 jmp	 SHORT $LN4@Win32Windo
$LN30@Win32Windo:

; 937  :                     
; 938  :                     case VK_RETURN:
; 939  :                     {
; 940  :                         GlobalState->GameInput.Keyboard.Enter = IsDown;

  00301	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR GlobalState
  00308	8b 4c 24 40	 mov	 ecx, DWORD PTR IsDown$1[rsp]
  0030c	89 48 44	 mov	 DWORD PTR [rax+68], ecx

; 941  :                     } break;

  0030f	eb 2e		 jmp	 SHORT $LN4@Win32Windo
$LN31@Win32Windo:

; 942  :                     
; 943  :                     case 0x31:
; 944  :                     {
; 945  :                         GlobalState->GameInput.Keyboard.One = IsDown;

  00311	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR GlobalState
  00318	8b 4c 24 40	 mov	 ecx, DWORD PTR IsDown$1[rsp]
  0031c	89 48 48	 mov	 DWORD PTR [rax+72], ecx

; 946  :                     } break;

  0031f	eb 1e		 jmp	 SHORT $LN4@Win32Windo
$LN32@Win32Windo:

; 947  :                     
; 948  :                     case 0x32:
; 949  :                     {
; 950  :                         GlobalState->GameInput.Keyboard.Two = IsDown;

  00321	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR GlobalState
  00328	8b 4c 24 40	 mov	 ecx, DWORD PTR IsDown$1[rsp]
  0032c	89 48 4c	 mov	 DWORD PTR [rax+76], ecx

; 951  :                     } break;

  0032f	eb 0e		 jmp	 SHORT $LN4@Win32Windo
$LN33@Win32Windo:

; 952  :                     
; 953  :                     case 0x33:
; 954  :                     {
; 955  :                         GlobalState->GameInput.Keyboard.Three = IsDown;

  00331	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR GlobalState
  00338	8b 4c 24 40	 mov	 ecx, DWORD PTR IsDown$1[rsp]
  0033c	89 48 50	 mov	 DWORD PTR [rax+80], ecx
$LN4@Win32Windo:
$LN13@Win32Windo:

; 956  :                     } break;
; 957  :                 }
; 958  :             }
; 959  :             
; 960  :             if(IsDown)

  0033f	83 7c 24 40 00	 cmp	 DWORD PTR IsDown$1[rsp], 0
  00344	74 3c		 je	 SHORT $LN34@Win32Windo

; 961  :             {
; 962  :                 b32 AltKeyIsDown = (LParam & (1 << 29));

  00346	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR LParam$[rsp]
  0034e	48 25 00 00 00
	20		 and	 rax, 536870912		; 20000000H
  00354	89 44 24 64	 mov	 DWORD PTR AltKeyIsDown$7[rsp], eax

; 963  :                 GlobalState->GameInput.Keyboard.AltF4 = false;

  00358	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR GlobalState
  0035f	c7 40 54 00 00
	00 00		 mov	 DWORD PTR [rax+84], 0

; 964  :                 if(AltKeyIsDown && VKCode == VK_F4)

  00366	83 7c 24 64 00	 cmp	 DWORD PTR AltKeyIsDown$7[rsp], 0
  0036b	74 15		 je	 SHORT $LN35@Win32Windo
  0036d	83 7c 24 58 73	 cmp	 DWORD PTR VKCode$4[rsp], 115 ; 00000073H
  00372	75 0e		 jne	 SHORT $LN35@Win32Windo

; 965  :                 {
; 966  :                     GlobalState->GameInput.Keyboard.AltF4 = true;

  00374	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR GlobalState
  0037b	c7 40 54 01 00
	00 00		 mov	 DWORD PTR [rax+84], 1
$LN35@Win32Windo:
$LN34@Win32Windo:

; 967  :                 }
; 968  :             }
; 969  :         } break;

  00382	e9 9d 01 00 00	 jmp	 $LN2@Win32Windo
$LN36@Win32Windo:

; 970  :         
; 971  :         case WM_CHAR:
; 972  :         {
; 973  :             wchar_t Char16 = (wchar_t)WParam;

  00387	0f b7 84 24 90
	00 00 00	 movzx	 eax, WORD PTR WParam$[rsp]
  0038f	66 89 44 24 48	 mov	 WORD PTR Char16$2[rsp], ax

; 974  :             
; 975  :             if(' ' <= Char16 && Char16 <= '~')

  00394	0f b7 44 24 48	 movzx	 eax, WORD PTR Char16$2[rsp]
  00399	83 f8 20	 cmp	 eax, 32			; 00000020H
  0039c	0f 8c 91 00 00
	00		 jl	 $LN37@Win32Windo
  003a2	0f b7 44 24 48	 movzx	 eax, WORD PTR Char16$2[rsp]
  003a7	83 f8 7e	 cmp	 eax, 126		; 0000007eH
  003aa	0f 8f 83 00 00
	00		 jg	 $LN37@Win32Windo

; 976  :             {
; 977  :                 wchar_t String16[2] = { Char16, L'\0' };

  003b0	0f b7 44 24 48	 movzx	 eax, WORD PTR Char16$2[rsp]
  003b5	66 89 44 24 5c	 mov	 WORD PTR String16$5[rsp], ax
  003ba	33 c0		 xor	 eax, eax
  003bc	66 89 44 24 5e	 mov	 WORD PTR String16$5[rsp+2], ax

; 978  :                 
; 979  :                 char String[2] = {0};

  003c1	48 8d 44 24 4c	 lea	 rax, QWORD PTR String$3[rsp]
  003c6	48 8b f8	 mov	 rdi, rax
  003c9	33 c0		 xor	 eax, eax
  003cb	b9 02 00 00 00	 mov	 ecx, 2
  003d0	f3 aa		 rep stosb

; 980  :                 WideCharToMultiByte(CP_UTF8, 0, String16, -1, String, ArrayCount(String), 0, 0);

  003d2	48 c7 44 24 38
	00 00 00 00	 mov	 QWORD PTR [rsp+56], 0
  003db	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR [rsp+48], 0
  003e4	c7 44 24 28 02
	00 00 00	 mov	 DWORD PTR [rsp+40], 2
  003ec	48 8d 44 24 4c	 lea	 rax, QWORD PTR String$3[rsp]
  003f1	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  003f6	41 b9 ff ff ff
	ff		 mov	 r9d, -1
  003fc	4c 8d 44 24 5c	 lea	 r8, QWORD PTR String16$5[rsp]
  00401	33 d2		 xor	 edx, edx
  00403	b9 e9 fd 00 00	 mov	 ecx, 65001		; 0000fde9H
  00408	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_WideCharToMultiByte

; 981  :                 GlobalState->GameInput.Keyboard.InputChar = String[0];

  0040e	b8 01 00 00 00	 mov	 eax, 1
  00413	48 6b c0 00	 imul	 rax, rax, 0
  00417	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR GlobalState
  0041e	0f b6 44 04 4c	 movzx	 eax, BYTE PTR String$3[rsp+rax]
  00423	88 41 04	 mov	 BYTE PTR [rcx+4], al

; 982  :                 GlobalState->GameInput.Keyboard.HasChar = true;

  00426	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR GlobalState
  0042d	c7 00 01 00 00
	00		 mov	 DWORD PTR [rax], 1
$LN37@Win32Windo:

; 983  :             }
; 984  :         } break;

  00433	e9 ec 00 00 00	 jmp	 $LN2@Win32Windo
$LN38@Win32Windo:

; 985  :         
; 986  :         case WM_LBUTTONDOWN:
; 987  :         {
; 988  :             GlobalState->GameInput.Mouse.LButton = true;

  00438	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR GlobalState
  0043f	c7 40 58 01 00
	00 00		 mov	 DWORD PTR [rax+88], 1

; 989  :         } break;

  00446	e9 d9 00 00 00	 jmp	 $LN2@Win32Windo
$LN39@Win32Windo:

; 990  :         
; 991  :         case WM_LBUTTONUP:
; 992  :         {
; 993  :             GlobalState->GameInput.Mouse.LButton = false;

  0044b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR GlobalState
  00452	c7 40 58 00 00
	00 00		 mov	 DWORD PTR [rax+88], 0

; 994  :         } break;

  00459	e9 c6 00 00 00	 jmp	 $LN2@Win32Windo
$LN40@Win32Windo:

; 995  :         
; 996  :         case WM_RBUTTONDOWN:
; 997  :         {
; 998  :             GlobalState->GameInput.Mouse.RButton = true;

  0045e	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR GlobalState
  00465	c7 40 5c 01 00
	00 00		 mov	 DWORD PTR [rax+92], 1

; 999  :         } break;

  0046c	e9 b3 00 00 00	 jmp	 $LN2@Win32Windo
$LN41@Win32Windo:

; 1000 :         
; 1001 :         case WM_RBUTTONUP:
; 1002 :         {
; 1003 :             GlobalState->GameInput.Mouse.RButton = false;

  00471	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR GlobalState
  00478	c7 40 5c 00 00
	00 00		 mov	 DWORD PTR [rax+92], 0

; 1004 :         } break;

  0047f	e9 a0 00 00 00	 jmp	 $LN2@Win32Windo
$LN42@Win32Windo:

; 1005 :         
; 1006 :         case WM_MOUSEMOVE:
; 1007 :         {
; 1008 :             GlobalState->GameInput.Mouse.X = GET_X_LPARAM(LParam);

  00484	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR LParam$[rsp]
  0048c	48 25 ff ff 00
	00		 and	 rax, 65535		; 0000ffffH
  00492	98		 cwde
  00493	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR GlobalState
  0049a	89 41 64	 mov	 DWORD PTR [rcx+100], eax

; 1009 :             GlobalState->GameInput.Mouse.Y = GET_Y_LPARAM(LParam);

  0049d	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR LParam$[rsp]
  004a5	48 c1 e8 10	 shr	 rax, 16
  004a9	48 25 ff ff 00
	00		 and	 rax, 65535		; 0000ffffH
  004af	98		 cwde
  004b0	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR GlobalState
  004b7	89 41 6c	 mov	 DWORD PTR [rcx+108], eax

; 1010 :         } break;

  004ba	eb 68		 jmp	 SHORT $LN2@Win32Windo
$LN43@Win32Windo:

; 1011 :         
; 1012 :         case WM_CLOSE:
; 1013 :         {
; 1014 :             GlobalState->WindowFlags |= WINDOW_FLAGS_CLOSED;

  004bc	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR GlobalState
  004c3	8b 80 98 01 00
	00		 mov	 eax, DWORD PTR [rax+408]
  004c9	83 c8 01	 or	 eax, 1
  004cc	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR GlobalState
  004d3	89 81 98 01 00
	00		 mov	 DWORD PTR [rcx+408], eax

; 1015 :         } break;

  004d9	eb 49		 jmp	 SHORT $LN2@Win32Windo
$LN44@Win32Windo:

; 1016 :         
; 1017 :         case WM_DESTROY:
; 1018 :         {
; 1019 :             GlobalState->WindowFlags |= WINDOW_FLAGS_CLOSED;

  004db	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR GlobalState
  004e2	8b 80 98 01 00
	00		 mov	 eax, DWORD PTR [rax+408]
  004e8	83 c8 01	 or	 eax, 1
  004eb	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR GlobalState
  004f2	89 81 98 01 00
	00		 mov	 DWORD PTR [rcx+408], eax

; 1020 :         } break;

  004f8	eb 2a		 jmp	 SHORT $LN2@Win32Windo
$LN45@Win32Windo:

; 1021 :         
; 1022 :         default:
; 1023 :         {
; 1024 :             Result = DefWindowProc(Window, Message, WParam, LParam);

  004fa	4c 8b 8c 24 98
	00 00 00	 mov	 r9, QWORD PTR LParam$[rsp]
  00502	4c 8b 84 24 90
	00 00 00	 mov	 r8, QWORD PTR WParam$[rsp]
  0050a	8b 94 24 88 00
	00 00		 mov	 edx, DWORD PTR Message$[rsp]
  00511	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR Window$[rsp]
  00519	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_DefWindowProcW
  0051f	48 89 44 24 68	 mov	 QWORD PTR Result$[rsp], rax
$LN2@Win32Windo:

; 1025 :         } break;
; 1026 :     }
; 1027 :     
; 1028 :     return(Result);

  00524	48 8b 44 24 68	 mov	 rax, QWORD PTR Result$[rsp]

; 1029 : }

  00529	48 83 c4 70	 add	 rsp, 112		; 00000070H
  0052d	5f		 pop	 rdi
  0052e	c3		 ret	 0
  0052f	90		 npad	 1
$LN53@Win32Windo:
  00530	00 00 00 00	 DD	 $LN25@Win32Windo
  00534	00 00 00 00	 DD	 $LN30@Win32Windo
  00538	00 00 00 00	 DD	 $LN27@Win32Windo
  0053c	00 00 00 00	 DD	 $LN29@Win32Windo
  00540	00 00 00 00	 DD	 $LN22@Win32Windo
  00544	00 00 00 00	 DD	 $LN21@Win32Windo
  00548	00 00 00 00	 DD	 $LN24@Win32Windo
  0054c	00 00 00 00	 DD	 $LN23@Win32Windo
  00550	00 00 00 00	 DD	 $LN28@Win32Windo
  00554	00 00 00 00	 DD	 $LN31@Win32Windo
  00558	00 00 00 00	 DD	 $LN32@Win32Windo
  0055c	00 00 00 00	 DD	 $LN33@Win32Windo
  00560	00 00 00 00	 DD	 $LN15@Win32Windo
  00564	00 00 00 00	 DD	 $LN17@Win32Windo
  00568	00 00 00 00	 DD	 $LN19@Win32Windo
  0056c	00 00 00 00	 DD	 $LN20@Win32Windo
  00570	00 00 00 00	 DD	 $LN18@Win32Windo
  00574	00 00 00 00	 DD	 $LN16@Win32Windo
  00578	00 00 00 00	 DD	 $LN14@Win32Windo
  0057c	00 00 00 00	 DD	 $LN4@Win32Windo
$LN52@Win32Windo:
  00580	00		 DB	 0
  00581	13		 DB	 19
  00582	13		 DB	 19
  00583	13		 DB	 19
  00584	13		 DB	 19
  00585	01		 DB	 1
  00586	13		 DB	 19
  00587	13		 DB	 19
  00588	13		 DB	 19
  00589	13		 DB	 19
  0058a	13		 DB	 19
  0058b	13		 DB	 19
  0058c	13		 DB	 19
  0058d	13		 DB	 19
  0058e	13		 DB	 19
  0058f	13		 DB	 19
  00590	13		 DB	 19
  00591	13		 DB	 19
  00592	13		 DB	 19
  00593	02		 DB	 2
  00594	13		 DB	 19
  00595	13		 DB	 19
  00596	13		 DB	 19
  00597	13		 DB	 19
  00598	03		 DB	 3
  00599	13		 DB	 19
  0059a	13		 DB	 19
  0059b	13		 DB	 19
  0059c	13		 DB	 19
  0059d	04		 DB	 4
  0059e	05		 DB	 5
  0059f	06		 DB	 6
  005a0	07		 DB	 7
  005a1	13		 DB	 19
  005a2	13		 DB	 19
  005a3	13		 DB	 19
  005a4	13		 DB	 19
  005a5	13		 DB	 19
  005a6	08		 DB	 8
  005a7	13		 DB	 19
  005a8	13		 DB	 19
  005a9	09		 DB	 9
  005aa	0a		 DB	 10
  005ab	0b		 DB	 11
  005ac	13		 DB	 19
  005ad	13		 DB	 19
  005ae	13		 DB	 19
  005af	13		 DB	 19
  005b0	13		 DB	 19
  005b1	13		 DB	 19
  005b2	13		 DB	 19
  005b3	13		 DB	 19
  005b4	13		 DB	 19
  005b5	13		 DB	 19
  005b6	13		 DB	 19
  005b7	13		 DB	 19
  005b8	13		 DB	 19
  005b9	0c		 DB	 12
  005ba	13		 DB	 19
  005bb	13		 DB	 19
  005bc	0d		 DB	 13
  005bd	0e		 DB	 14
  005be	13		 DB	 19
  005bf	13		 DB	 19
  005c0	13		 DB	 19
  005c1	13		 DB	 19
  005c2	13		 DB	 19
  005c3	13		 DB	 19
  005c4	13		 DB	 19
  005c5	0f		 DB	 15
  005c6	13		 DB	 19
  005c7	13		 DB	 19
  005c8	13		 DB	 19
  005c9	10		 DB	 16
  005ca	13		 DB	 19
  005cb	11		 DB	 17
  005cc	13		 DB	 19
  005cd	13		 DB	 19
  005ce	13		 DB	 19
  005cf	12		 DB	 18
Win32WindowProc ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File W:\new-horizons\code\win32_horizons.c
_TEXT	SEGMENT
Dest$ = 16
Length$ = 24
Win32ZeroMemory PROC

; 582  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi

; 583  :     RtlZeroMemory(Dest, Length);

  0000b	48 8b 7c 24 10	 mov	 rdi, QWORD PTR Dest$[rsp]
  00010	33 c0		 xor	 eax, eax
  00012	48 8b 4c 24 18	 mov	 rcx, QWORD PTR Length$[rsp]
  00017	f3 aa		 rep stosb

; 584  : }

  00019	5f		 pop	 rdi
  0001a	c3		 ret	 0
Win32ZeroMemory ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File W:\new-horizons\code\win32_horizons.c
_TEXT	SEGMENT
Dest$ = 24
Source$ = 32
Length$ = 40
Win32CopyMemory PROC

; 577  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	56		 push	 rsi
  00010	57		 push	 rdi

; 578  :     RtlCopyMemory(Dest, Source, Length);

  00011	48 8b 7c 24 18	 mov	 rdi, QWORD PTR Dest$[rsp]
  00016	48 8b 74 24 20	 mov	 rsi, QWORD PTR Source$[rsp]
  0001b	48 8b 4c 24 28	 mov	 rcx, QWORD PTR Length$[rsp]
  00020	f3 a4		 rep movsb

; 579  : }

  00022	5f		 pop	 rdi
  00023	5e		 pop	 rsi
  00024	c3		 ret	 0
Win32CopyMemory ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File W:\new-horizons\code\win32_horizons.c
_TEXT	SEGMENT
SourceVoice$ = 32
Voice$1 = 40
Sound$ = 64
Win32DeleteSound PROC

; 567  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 568  :     IXAudio2SourceVoice *SourceVoice = *Sound->Platform;

  00009	48 8b 44 24 40	 mov	 rax, QWORD PTR Sound$[rsp]
  0000e	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  00012	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00015	48 89 44 24 20	 mov	 QWORD PTR SourceVoice$[rsp], rax

; 569  :     if(SourceVoice)

  0001a	48 83 7c 24 20
	00		 cmp	 QWORD PTR SourceVoice$[rsp], 0
  00020	74 1d		 je	 SHORT $LN2@Win32Delet

; 570  :     {
; 571  :         IXAudio2Voice *Voice = (IXAudio2Voice *)SourceVoice;

  00022	48 8b 44 24 20	 mov	 rax, QWORD PTR SourceVoice$[rsp]
  00027	48 89 44 24 28	 mov	 QWORD PTR Voice$1[rsp], rax

; 572  :         IXAudio2Voice_DestroyVoice(Voice);

  0002c	48 8b 44 24 28	 mov	 rax, QWORD PTR Voice$1[rsp]
  00031	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00034	48 8b 4c 24 28	 mov	 rcx, QWORD PTR Voice$1[rsp]
  00039	ff 90 90 00 00
	00		 call	 QWORD PTR [rax+144]
$LN2@Win32Delet:

; 573  :     }
; 574  : }

  0003f	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00043	c3		 ret	 0
Win32DeleteSound ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File W:\new-horizons\code\win32_horizons.c
_TEXT	SEGMENT
tv72 = 32
SourceVoice$ = 40
State$ = 48
Sound$ = 96
Win32SoundIsPlaying PROC

; 558  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 559  :     IXAudio2SourceVoice *SourceVoice = *Sound->Platform;

  00009	48 8b 44 24 60	 mov	 rax, QWORD PTR Sound$[rsp]
  0000e	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  00012	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00015	48 89 44 24 28	 mov	 QWORD PTR SourceVoice$[rsp], rax

; 560  :     XAUDIO2_VOICE_STATE State;
; 561  :     IXAudio2SourceVoice_GetState(SourceVoice, &State, XAUDIO2_VOICE_NOSAMPLESPLAYED);

  0001a	48 8b 44 24 28	 mov	 rax, QWORD PTR SourceVoice$[rsp]
  0001f	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00022	41 b8 00 01 00
	00		 mov	 r8d, 256		; 00000100H
  00028	48 8d 54 24 30	 lea	 rdx, QWORD PTR State$[rsp]
  0002d	48 8b 4c 24 28	 mov	 rcx, QWORD PTR SourceVoice$[rsp]
  00032	ff 90 c8 00 00
	00		 call	 QWORD PTR [rax+200]

; 562  :     
; 563  :     return(State.BuffersQueued != 0);

  00038	83 7c 24 38 00	 cmp	 DWORD PTR State$[rsp+8], 0
  0003d	74 0a		 je	 SHORT $LN3@Win32Sound
  0003f	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv72[rsp], 1
  00047	eb 08		 jmp	 SHORT $LN4@Win32Sound
$LN3@Win32Sound:
  00049	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv72[rsp], 0
$LN4@Win32Sound:
  00051	8b 44 24 20	 mov	 eax, DWORD PTR tv72[rsp]

; 564  : }

  00055	48 83 c4 58	 add	 rsp, 88			; 00000058H
  00059	c3		 ret	 0
Win32SoundIsPlaying ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File W:\new-horizons\code\win32_horizons.c
_TEXT	SEGMENT
SourceVoice$ = 32
Sound$ = 64
Win32StopSound PROC

; 552  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 553  :     IXAudio2SourceVoice *SourceVoice = *Sound->Platform;

  00009	48 8b 44 24 40	 mov	 rax, QWORD PTR Sound$[rsp]
  0000e	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  00012	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00015	48 89 44 24 20	 mov	 QWORD PTR SourceVoice$[rsp], rax

; 554  :     AssertHR(IXAudio2SourceVoice_Stop(SourceVoice, 0, XAUDIO2_COMMIT_NOW));

  0001a	48 8b 44 24 20	 mov	 rax, QWORD PTR SourceVoice$[rsp]
  0001f	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00022	45 33 c0	 xor	 r8d, r8d
  00025	33 d2		 xor	 edx, edx
  00027	48 8b 4c 24 20	 mov	 rcx, QWORD PTR SourceVoice$[rsp]
  0002c	ff 90 a0 00 00
	00		 call	 QWORD PTR [rax+160]
  00032	85 c0		 test	 eax, eax
  00034	7d 0b		 jge	 SHORT $LN2@Win32StopS
  00036	c7 04 25 00 00
	00 00 00 00 00
	00		 mov	 DWORD PTR ds:0, 0
$LN2@Win32StopS:

; 555  : }

  00041	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00045	c3		 ret	 0
Win32StopSound ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File W:\new-horizons\code\win32_horizons.c
_TEXT	SEGMENT
Voice$ = 32
Sound$ = 64
Volume$ = 72
Win32SetSoundVolume PROC

; 545  : {

  00000	f3 0f 11 4c 24
	10		 movss	 DWORD PTR [rsp+16], xmm1
  00006	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000b	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 546  :     IXAudio2Voice *Voice = *Sound->Platform;

  0000f	48 8b 44 24 40	 mov	 rax, QWORD PTR Sound$[rsp]
  00014	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  00018	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0001b	48 89 44 24 20	 mov	 QWORD PTR Voice$[rsp], rax

; 547  :     
; 548  :     AssertHR(IXAudio2Voice_SetVolume(Voice, Volume, XAUDIO2_COMMIT_NOW));

  00020	48 8b 44 24 20	 mov	 rax, QWORD PTR Voice$[rsp]
  00025	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00028	45 33 c0	 xor	 r8d, r8d
  0002b	f3 0f 10 4c 24
	48		 movss	 xmm1, DWORD PTR Volume$[rsp]
  00031	48 8b 4c 24 20	 mov	 rcx, QWORD PTR Voice$[rsp]
  00036	ff 50 60	 call	 QWORD PTR [rax+96]
  00039	85 c0		 test	 eax, eax
  0003b	7d 0b		 jge	 SHORT $LN2@Win32SetSo
  0003d	c7 04 25 00 00
	00 00 00 00 00
	00		 mov	 DWORD PTR ds:0, 0
$LN2@Win32SetSo:

; 549  : }

  00048	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0004c	c3		 ret	 0
Win32SetSoundVolume ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File W:\new-horizons\code\win32_horizons.c
_TEXT	SEGMENT
SourceVoice$ = 32
Buffer$ = 40
Sound$ = 112
Win32PlaySound PROC

; 532  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 60	 sub	 rsp, 96			; 00000060H

; 533  :     XAUDIO2_BUFFER Buffer = {0};

  0000a	48 8d 44 24 28	 lea	 rax, QWORD PTR Buffer$[rsp]
  0000f	48 8b f8	 mov	 rdi, rax
  00012	33 c0		 xor	 eax, eax
  00014	b9 2c 00 00 00	 mov	 ecx, 44			; 0000002cH
  00019	f3 aa		 rep stosb

; 534  :     Buffer.pAudioData = Sound->Data;

  0001b	48 8b 44 24 70	 mov	 rax, QWORD PTR Sound$[rsp]
  00020	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00023	48 89 44 24 30	 mov	 QWORD PTR Buffer$[rsp+8], rax

; 535  :     Buffer.AudioBytes = Sound->Size;

  00028	48 8b 44 24 70	 mov	 rax, QWORD PTR Sound$[rsp]
  0002d	8b 40 08	 mov	 eax, DWORD PTR [rax+8]
  00030	89 44 24 2c	 mov	 DWORD PTR Buffer$[rsp+4], eax

; 536  :     
; 537  :     IXAudio2SourceVoice *SourceVoice = *Sound->Platform;

  00034	48 8b 44 24 70	 mov	 rax, QWORD PTR Sound$[rsp]
  00039	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  0003d	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00040	48 89 44 24 20	 mov	 QWORD PTR SourceVoice$[rsp], rax

; 538  :     AssertHR(IXAudio2SourceVoice_Stop(SourceVoice, 0, XAUDIO2_COMMIT_NOW));

  00045	48 8b 44 24 20	 mov	 rax, QWORD PTR SourceVoice$[rsp]
  0004a	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0004d	45 33 c0	 xor	 r8d, r8d
  00050	33 d2		 xor	 edx, edx
  00052	48 8b 4c 24 20	 mov	 rcx, QWORD PTR SourceVoice$[rsp]
  00057	ff 90 a0 00 00
	00		 call	 QWORD PTR [rax+160]
  0005d	85 c0		 test	 eax, eax
  0005f	7d 0b		 jge	 SHORT $LN2@Win32PlayS
  00061	c7 04 25 00 00
	00 00 00 00 00
	00		 mov	 DWORD PTR ds:0, 0
$LN2@Win32PlayS:

; 539  :     AssertHR(IXAudio2SourceVoice_FlushSourceBuffers(SourceVoice));

  0006c	48 8b 44 24 20	 mov	 rax, QWORD PTR SourceVoice$[rsp]
  00071	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00074	48 8b 4c 24 20	 mov	 rcx, QWORD PTR SourceVoice$[rsp]
  00079	ff 90 b0 00 00
	00		 call	 QWORD PTR [rax+176]
  0007f	85 c0		 test	 eax, eax
  00081	7d 0b		 jge	 SHORT $LN3@Win32PlayS
  00083	c7 04 25 00 00
	00 00 00 00 00
	00		 mov	 DWORD PTR ds:0, 0
$LN3@Win32PlayS:

; 540  :     AssertHR(IXAudio2SourceVoice_SubmitSourceBuffer(SourceVoice, &Buffer, 0));

  0008e	48 8b 44 24 20	 mov	 rax, QWORD PTR SourceVoice$[rsp]
  00093	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00096	45 33 c0	 xor	 r8d, r8d
  00099	48 8d 54 24 28	 lea	 rdx, QWORD PTR Buffer$[rsp]
  0009e	48 8b 4c 24 20	 mov	 rcx, QWORD PTR SourceVoice$[rsp]
  000a3	ff 90 a8 00 00
	00		 call	 QWORD PTR [rax+168]
  000a9	85 c0		 test	 eax, eax
  000ab	7d 0b		 jge	 SHORT $LN4@Win32PlayS
  000ad	c7 04 25 00 00
	00 00 00 00 00
	00		 mov	 DWORD PTR ds:0, 0
$LN4@Win32PlayS:

; 541  :     AssertHR(IXAudio2SourceVoice_Start(SourceVoice, 0, XAUDIO2_COMMIT_NOW))

  000b8	48 8b 44 24 20	 mov	 rax, QWORD PTR SourceVoice$[rsp]
  000bd	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000c0	45 33 c0	 xor	 r8d, r8d
  000c3	33 d2		 xor	 edx, edx
  000c5	48 8b 4c 24 20	 mov	 rcx, QWORD PTR SourceVoice$[rsp]
  000ca	ff 90 98 00 00
	00		 call	 QWORD PTR [rax+152]
  000d0	85 c0		 test	 eax, eax
  000d2	7d 0b		 jge	 SHORT $LN5@Win32PlayS
  000d4	c7 04 25 00 00
	00 00 00 00 00
	00		 mov	 DWORD PTR ds:0, 0
$LN5@Win32PlayS:

; 542  : }

  000df	48 83 c4 60	 add	 rsp, 96			; 00000060H
  000e3	5f		 pop	 rdi
  000e4	c3		 ret	 0
Win32PlaySound ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File W:\new-horizons\code\win32_horizons.c
_TEXT	SEGMENT
Voice$ = 32
SourceVoice$ = 40
Result$ = 48
$T1 = 72
$T2 = 128
FileName$ = 136
Volume$ = 144
Scratch$ = 152
Win32CreateSound PROC

; 520  : {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	f3 0f 11 54 24
	18		 movss	 DWORD PTR [rsp+24], xmm2
  0000b	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00010	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00015	56		 push	 rsi
  00016	57		 push	 rdi
  00017	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 521  :     loaded_sound Result = Win32LoadSound(FileName, Scratch);

  0001b	4c 8b 84 24 98
	00 00 00	 mov	 r8, QWORD PTR Scratch$[rsp]
  00023	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR FileName$[rsp]
  0002b	48 8d 4c 24 48	 lea	 rcx, QWORD PTR $T1[rsp]
  00030	e8 00 00 00 00	 call	 Win32LoadSound
  00035	48 8d 4c 24 30	 lea	 rcx, QWORD PTR Result$[rsp]
  0003a	48 8b f9	 mov	 rdi, rcx
  0003d	48 8b f0	 mov	 rsi, rax
  00040	b9 18 00 00 00	 mov	 ecx, 24
  00045	f3 a4		 rep movsb

; 522  :     
; 523  :     IXAudio2SourceVoice *SourceVoice = *Result.Platform;

  00047	48 8b 44 24 40	 mov	 rax, QWORD PTR Result$[rsp+16]
  0004c	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0004f	48 89 44 24 28	 mov	 QWORD PTR SourceVoice$[rsp], rax

; 524  :     IXAudio2Voice *Voice = *Result.Platform;

  00054	48 8b 44 24 40	 mov	 rax, QWORD PTR Result$[rsp+16]
  00059	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0005c	48 89 44 24 20	 mov	 QWORD PTR Voice$[rsp], rax

; 525  :     AssertHR(IXAudio2Voice_SetVolume(Voice, Volume, XAUDIO2_COMMIT_NOW));

  00061	48 8b 44 24 20	 mov	 rax, QWORD PTR Voice$[rsp]
  00066	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00069	45 33 c0	 xor	 r8d, r8d
  0006c	f3 0f 10 8c 24
	90 00 00 00	 movss	 xmm1, DWORD PTR Volume$[rsp]
  00075	48 8b 4c 24 20	 mov	 rcx, QWORD PTR Voice$[rsp]
  0007a	ff 50 60	 call	 QWORD PTR [rax+96]
  0007d	85 c0		 test	 eax, eax
  0007f	7d 0b		 jge	 SHORT $LN2@Win32Creat
  00081	c7 04 25 00 00
	00 00 00 00 00
	00		 mov	 DWORD PTR ds:0, 0
$LN2@Win32Creat:

; 526  :     AssertHR(IXAudio2SourceVoice_Start(SourceVoice, 0, XAUDIO2_COMMIT_NOW));

  0008c	48 8b 44 24 28	 mov	 rax, QWORD PTR SourceVoice$[rsp]
  00091	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00094	45 33 c0	 xor	 r8d, r8d
  00097	33 d2		 xor	 edx, edx
  00099	48 8b 4c 24 28	 mov	 rcx, QWORD PTR SourceVoice$[rsp]
  0009e	ff 90 98 00 00
	00		 call	 QWORD PTR [rax+152]
  000a4	85 c0		 test	 eax, eax
  000a6	7d 0b		 jge	 SHORT $LN3@Win32Creat
  000a8	c7 04 25 00 00
	00 00 00 00 00
	00		 mov	 DWORD PTR ds:0, 0
$LN3@Win32Creat:

; 527  :     
; 528  :     return(Result);

  000b3	48 8d 44 24 30	 lea	 rax, QWORD PTR Result$[rsp]
  000b8	48 8b bc 24 80
	00 00 00	 mov	 rdi, QWORD PTR $T2[rsp]
  000c0	48 8b f0	 mov	 rsi, rax
  000c3	b9 18 00 00 00	 mov	 ecx, 24
  000c8	f3 a4		 rep movsb
  000ca	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR $T2[rsp]

; 529  : }

  000d2	48 83 c4 68	 add	 rsp, 104		; 00000068H
  000d6	5f		 pop	 rdi
  000d7	5e		 pop	 rsi
  000d8	c3		 ret	 0
Win32CreateSound ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File W:\new-horizons\code\win32_horizons.c
_TEXT	SEGMENT
BytesRead$1 = 64
File$ = 72
ChunkDataSize$2 = 80
ChunkType$3 = 84
Result$ = 88
FileFormat$4 = 112
AudioData$5 = 120
SourceVoice$6 = 128
Format$7 = 136
$T8 = 208
FileName$ = 216
Scratch$ = 224
Win32LoadSound PROC

; 372  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 81 ec b8 00
	00 00		 sub	 rsp, 184		; 000000b8H

; 373  :     loaded_sound Result = {0};

  00018	48 8d 44 24 58	 lea	 rax, QWORD PTR Result$[rsp]
  0001d	48 8b f8	 mov	 rdi, rax
  00020	33 c0		 xor	 eax, eax
  00022	b9 18 00 00 00	 mov	 ecx, 24
  00027	f3 aa		 rep stosb

; 374  :     
; 375  :     HANDLE File = CreateFileW(FileName, GENERIC_READ, FILE_SHARE_READ,

  00029	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR [rsp+48], 0
  00032	c7 44 24 28 80
	00 00 00	 mov	 DWORD PTR [rsp+40], 128	; 00000080H
  0003a	c7 44 24 20 03
	00 00 00	 mov	 DWORD PTR [rsp+32], 3
  00042	45 33 c9	 xor	 r9d, r9d
  00045	41 b8 01 00 00
	00		 mov	 r8d, 1
  0004b	ba 00 00 00 80	 mov	 edx, -2147483648	; 80000000H
  00050	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR FileName$[rsp]
  00058	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_CreateFileW
  0005e	48 89 44 24 48	 mov	 QWORD PTR File$[rsp], rax

; 376  :                               0, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, 0);
; 377  :     if(File != INVALID_HANDLE_VALUE)

  00063	48 83 7c 24 48
	ff		 cmp	 QWORD PTR File$[rsp], -1
  00069	0f 84 36 05 00
	00		 je	 $LN2@Win32LoadS

; 378  :     {
; 379  :         if(SetFilePointer(File, 0, 0, FILE_BEGIN) != INVALID_SET_FILE_POINTER)

  0006f	45 33 c9	 xor	 r9d, r9d
  00072	45 33 c0	 xor	 r8d, r8d
  00075	33 d2		 xor	 edx, edx
  00077	48 8b 4c 24 48	 mov	 rcx, QWORD PTR File$[rsp]
  0007c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_SetFilePointer
  00082	83 f8 ff	 cmp	 eax, -1			; ffffffffH
  00085	0f 84 0f 05 00
	00		 je	 $LN4@Win32LoadS

; 380  :         {
; 381  :             DWORD ChunkType;
; 382  :             DWORD ChunkDataSize;
; 383  :             DWORD FileFormat;
; 384  :             DWORD BytesRead = 0;

  0008b	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR BytesRead$1[rsp], 0

; 385  :             
; 386  :             WAVEFORMATEXTENSIBLE Format = {0};

  00093	48 8d 84 24 88
	00 00 00	 lea	 rax, QWORD PTR Format$7[rsp]
  0009b	48 8b f8	 mov	 rdi, rax
  0009e	33 c0		 xor	 eax, eax
  000a0	b9 28 00 00 00	 mov	 ecx, 40			; 00000028H
  000a5	f3 aa		 rep stosb

; 387  :             
; 388  :             ReadFile(File, &ChunkType, sizeof(DWORD), &BytesRead, 0);

  000a7	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  000b0	4c 8d 4c 24 40	 lea	 r9, QWORD PTR BytesRead$1[rsp]
  000b5	41 b8 04 00 00
	00		 mov	 r8d, 4
  000bb	48 8d 54 24 54	 lea	 rdx, QWORD PTR ChunkType$3[rsp]
  000c0	48 8b 4c 24 48	 mov	 rcx, QWORD PTR File$[rsp]
  000c5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_ReadFile

; 389  :             if(BytesRead != sizeof(DWORD))

  000cb	8b 44 24 40	 mov	 eax, DWORD PTR BytesRead$1[rsp]
  000cf	48 83 f8 04	 cmp	 rax, 4
  000d3	74 2f		 je	 SHORT $LN6@Win32LoadS

; 390  :             {
; 391  :                 // TODO(evan): Logging
; 392  :                 CloseHandle(File);

  000d5	48 8b 4c 24 48	 mov	 rcx, QWORD PTR File$[rsp]
  000da	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_CloseHandle

; 393  :                 return(Result);

  000e0	48 8d 44 24 58	 lea	 rax, QWORD PTR Result$[rsp]
  000e5	48 8b bc 24 d0
	00 00 00	 mov	 rdi, QWORD PTR $T8[rsp]
  000ed	48 8b f0	 mov	 rsi, rax
  000f0	b9 18 00 00 00	 mov	 ecx, 24
  000f5	f3 a4		 rep movsb
  000f7	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR $T8[rsp]
  000ff	e9 c0 04 00 00	 jmp	 $LN1@Win32LoadS
$LN6@Win32LoadS:

; 394  :             }
; 395  :             
; 396  :             if(ChunkType != 'FFIR')

  00104	81 7c 24 54 52
	49 46 46	 cmp	 DWORD PTR ChunkType$3[rsp], 1179011410 ; 46464952H
  0010c	74 2f		 je	 SHORT $LN7@Win32LoadS

; 397  :             {
; 398  :                 // TODO(evan): Logging
; 399  :                 CloseHandle(File);

  0010e	48 8b 4c 24 48	 mov	 rcx, QWORD PTR File$[rsp]
  00113	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_CloseHandle

; 400  :                 return(Result);

  00119	48 8d 44 24 58	 lea	 rax, QWORD PTR Result$[rsp]
  0011e	48 8b bc 24 d0
	00 00 00	 mov	 rdi, QWORD PTR $T8[rsp]
  00126	48 8b f0	 mov	 rsi, rax
  00129	b9 18 00 00 00	 mov	 ecx, 24
  0012e	f3 a4		 rep movsb
  00130	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR $T8[rsp]
  00138	e9 87 04 00 00	 jmp	 $LN1@Win32LoadS
$LN7@Win32LoadS:

; 401  :             }
; 402  :             
; 403  :             ReadFile(File, &ChunkDataSize, sizeof(DWORD), &BytesRead, 0);

  0013d	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  00146	4c 8d 4c 24 40	 lea	 r9, QWORD PTR BytesRead$1[rsp]
  0014b	41 b8 04 00 00
	00		 mov	 r8d, 4
  00151	48 8d 54 24 50	 lea	 rdx, QWORD PTR ChunkDataSize$2[rsp]
  00156	48 8b 4c 24 48	 mov	 rcx, QWORD PTR File$[rsp]
  0015b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_ReadFile

; 404  :             if(BytesRead != sizeof(DWORD))

  00161	8b 44 24 40	 mov	 eax, DWORD PTR BytesRead$1[rsp]
  00165	48 83 f8 04	 cmp	 rax, 4
  00169	74 2f		 je	 SHORT $LN8@Win32LoadS

; 405  :             {
; 406  :                 // TODO(evan): Logging
; 407  :                 CloseHandle(File);

  0016b	48 8b 4c 24 48	 mov	 rcx, QWORD PTR File$[rsp]
  00170	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_CloseHandle

; 408  :                 return(Result);

  00176	48 8d 44 24 58	 lea	 rax, QWORD PTR Result$[rsp]
  0017b	48 8b bc 24 d0
	00 00 00	 mov	 rdi, QWORD PTR $T8[rsp]
  00183	48 8b f0	 mov	 rsi, rax
  00186	b9 18 00 00 00	 mov	 ecx, 24
  0018b	f3 a4		 rep movsb
  0018d	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR $T8[rsp]
  00195	e9 2a 04 00 00	 jmp	 $LN1@Win32LoadS
$LN8@Win32LoadS:

; 409  :             }
; 410  :             
; 411  :             ReadFile(File, &FileFormat, sizeof(DWORD), &BytesRead, 0);

  0019a	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  001a3	4c 8d 4c 24 40	 lea	 r9, QWORD PTR BytesRead$1[rsp]
  001a8	41 b8 04 00 00
	00		 mov	 r8d, 4
  001ae	48 8d 54 24 70	 lea	 rdx, QWORD PTR FileFormat$4[rsp]
  001b3	48 8b 4c 24 48	 mov	 rcx, QWORD PTR File$[rsp]
  001b8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_ReadFile

; 412  :             if(BytesRead != sizeof(DWORD))

  001be	8b 44 24 40	 mov	 eax, DWORD PTR BytesRead$1[rsp]
  001c2	48 83 f8 04	 cmp	 rax, 4
  001c6	74 2f		 je	 SHORT $LN9@Win32LoadS

; 413  :             {
; 414  :                 // TODO(evan): Logging
; 415  :                 CloseHandle(File);

  001c8	48 8b 4c 24 48	 mov	 rcx, QWORD PTR File$[rsp]
  001cd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_CloseHandle

; 416  :                 return(Result);

  001d3	48 8d 44 24 58	 lea	 rax, QWORD PTR Result$[rsp]
  001d8	48 8b bc 24 d0
	00 00 00	 mov	 rdi, QWORD PTR $T8[rsp]
  001e0	48 8b f0	 mov	 rsi, rax
  001e3	b9 18 00 00 00	 mov	 ecx, 24
  001e8	f3 a4		 rep movsb
  001ea	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR $T8[rsp]
  001f2	e9 cd 03 00 00	 jmp	 $LN1@Win32LoadS
$LN9@Win32LoadS:

; 417  :             }
; 418  :             
; 419  :             if(FileFormat != 'EVAW')

  001f7	81 7c 24 70 57
	41 56 45	 cmp	 DWORD PTR FileFormat$4[rsp], 1163280727 ; 45564157H
  001ff	74 2f		 je	 SHORT $LN10@Win32LoadS

; 420  :             {
; 421  :                 // TODO(evan): Logging
; 422  :                 CloseHandle(File);

  00201	48 8b 4c 24 48	 mov	 rcx, QWORD PTR File$[rsp]
  00206	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_CloseHandle

; 423  :                 return(Result);

  0020c	48 8d 44 24 58	 lea	 rax, QWORD PTR Result$[rsp]
  00211	48 8b bc 24 d0
	00 00 00	 mov	 rdi, QWORD PTR $T8[rsp]
  00219	48 8b f0	 mov	 rsi, rax
  0021c	b9 18 00 00 00	 mov	 ecx, 24
  00221	f3 a4		 rep movsb
  00223	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR $T8[rsp]
  0022b	e9 94 03 00 00	 jmp	 $LN1@Win32LoadS
$LN10@Win32LoadS:

; 424  :             }
; 425  :             
; 426  :             ReadFile(File, &ChunkType, sizeof(DWORD), &BytesRead, 0);

  00230	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  00239	4c 8d 4c 24 40	 lea	 r9, QWORD PTR BytesRead$1[rsp]
  0023e	41 b8 04 00 00
	00		 mov	 r8d, 4
  00244	48 8d 54 24 54	 lea	 rdx, QWORD PTR ChunkType$3[rsp]
  00249	48 8b 4c 24 48	 mov	 rcx, QWORD PTR File$[rsp]
  0024e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_ReadFile

; 427  :             if(BytesRead != sizeof(DWORD))

  00254	8b 44 24 40	 mov	 eax, DWORD PTR BytesRead$1[rsp]
  00258	48 83 f8 04	 cmp	 rax, 4
  0025c	74 2f		 je	 SHORT $LN11@Win32LoadS

; 428  :             {
; 429  :                 // TODO(evan): Logging
; 430  :                 CloseHandle(File);

  0025e	48 8b 4c 24 48	 mov	 rcx, QWORD PTR File$[rsp]
  00263	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_CloseHandle

; 431  :                 return(Result);

  00269	48 8d 44 24 58	 lea	 rax, QWORD PTR Result$[rsp]
  0026e	48 8b bc 24 d0
	00 00 00	 mov	 rdi, QWORD PTR $T8[rsp]
  00276	48 8b f0	 mov	 rsi, rax
  00279	b9 18 00 00 00	 mov	 ecx, 24
  0027e	f3 a4		 rep movsb
  00280	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR $T8[rsp]
  00288	e9 37 03 00 00	 jmp	 $LN1@Win32LoadS
$LN11@Win32LoadS:

; 432  :             }
; 433  :             
; 434  :             if(ChunkType != 'tmf')
; 435  :             {
; 436  :                 // TODO(evan): Logging
; 437  :                 // CloseHandle(File);
; 438  :                 // return(Result);
; 439  :             }
; 440  :             
; 441  :             ReadFile(File, &ChunkDataSize, sizeof(DWORD), &BytesRead, 0);

  0028d	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  00296	4c 8d 4c 24 40	 lea	 r9, QWORD PTR BytesRead$1[rsp]
  0029b	41 b8 04 00 00
	00		 mov	 r8d, 4
  002a1	48 8d 54 24 50	 lea	 rdx, QWORD PTR ChunkDataSize$2[rsp]
  002a6	48 8b 4c 24 48	 mov	 rcx, QWORD PTR File$[rsp]
  002ab	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_ReadFile

; 442  :             if(BytesRead != sizeof(DWORD))

  002b1	8b 44 24 40	 mov	 eax, DWORD PTR BytesRead$1[rsp]
  002b5	48 83 f8 04	 cmp	 rax, 4
  002b9	74 2f		 je	 SHORT $LN13@Win32LoadS

; 443  :             {
; 444  :                 // TODO(evan): Logging
; 445  :                 CloseHandle(File);

  002bb	48 8b 4c 24 48	 mov	 rcx, QWORD PTR File$[rsp]
  002c0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_CloseHandle

; 446  :                 return(Result);

  002c6	48 8d 44 24 58	 lea	 rax, QWORD PTR Result$[rsp]
  002cb	48 8b bc 24 d0
	00 00 00	 mov	 rdi, QWORD PTR $T8[rsp]
  002d3	48 8b f0	 mov	 rsi, rax
  002d6	b9 18 00 00 00	 mov	 ecx, 24
  002db	f3 a4		 rep movsb
  002dd	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR $T8[rsp]
  002e5	e9 da 02 00 00	 jmp	 $LN1@Win32LoadS
$LN13@Win32LoadS:

; 447  :             }
; 448  :             
; 449  :             ReadFile(File, &Format, ChunkDataSize, &BytesRead, 0);

  002ea	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  002f3	4c 8d 4c 24 40	 lea	 r9, QWORD PTR BytesRead$1[rsp]
  002f8	44 8b 44 24 50	 mov	 r8d, DWORD PTR ChunkDataSize$2[rsp]
  002fd	48 8d 94 24 88
	00 00 00	 lea	 rdx, QWORD PTR Format$7[rsp]
  00305	48 8b 4c 24 48	 mov	 rcx, QWORD PTR File$[rsp]
  0030a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_ReadFile

; 450  :             if(BytesRead != ChunkDataSize)

  00310	8b 44 24 50	 mov	 eax, DWORD PTR ChunkDataSize$2[rsp]
  00314	39 44 24 40	 cmp	 DWORD PTR BytesRead$1[rsp], eax
  00318	74 2f		 je	 SHORT $LN14@Win32LoadS

; 451  :             {
; 452  :                 // TODO(evan): Logging
; 453  :                 CloseHandle(File);

  0031a	48 8b 4c 24 48	 mov	 rcx, QWORD PTR File$[rsp]
  0031f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_CloseHandle

; 454  :                 return(Result);

  00325	48 8d 44 24 58	 lea	 rax, QWORD PTR Result$[rsp]
  0032a	48 8b bc 24 d0
	00 00 00	 mov	 rdi, QWORD PTR $T8[rsp]
  00332	48 8b f0	 mov	 rsi, rax
  00335	b9 18 00 00 00	 mov	 ecx, 24
  0033a	f3 a4		 rep movsb
  0033c	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR $T8[rsp]
  00344	e9 7b 02 00 00	 jmp	 $LN1@Win32LoadS
$LN14@Win32LoadS:

; 455  :             }
; 456  :             
; 457  :             ReadFile(File, &ChunkType, sizeof(DWORD), &BytesRead, 0);

  00349	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  00352	4c 8d 4c 24 40	 lea	 r9, QWORD PTR BytesRead$1[rsp]
  00357	41 b8 04 00 00
	00		 mov	 r8d, 4
  0035d	48 8d 54 24 54	 lea	 rdx, QWORD PTR ChunkType$3[rsp]
  00362	48 8b 4c 24 48	 mov	 rcx, QWORD PTR File$[rsp]
  00367	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_ReadFile

; 458  :             if(BytesRead != sizeof(DWORD))

  0036d	8b 44 24 40	 mov	 eax, DWORD PTR BytesRead$1[rsp]
  00371	48 83 f8 04	 cmp	 rax, 4
  00375	74 2f		 je	 SHORT $LN15@Win32LoadS

; 459  :             {
; 460  :                 // TODO(evan): Logging
; 461  :                 CloseHandle(File);

  00377	48 8b 4c 24 48	 mov	 rcx, QWORD PTR File$[rsp]
  0037c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_CloseHandle

; 462  :                 return(Result);

  00382	48 8d 44 24 58	 lea	 rax, QWORD PTR Result$[rsp]
  00387	48 8b bc 24 d0
	00 00 00	 mov	 rdi, QWORD PTR $T8[rsp]
  0038f	48 8b f0	 mov	 rsi, rax
  00392	b9 18 00 00 00	 mov	 ecx, 24
  00397	f3 a4		 rep movsb
  00399	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR $T8[rsp]
  003a1	e9 1e 02 00 00	 jmp	 $LN1@Win32LoadS
$LN15@Win32LoadS:

; 463  :             }
; 464  :             
; 465  :             if(ChunkType != 'atad')

  003a6	81 7c 24 54 64
	61 74 61	 cmp	 DWORD PTR ChunkType$3[rsp], 1635017060 ; 61746164H
  003ae	74 2f		 je	 SHORT $LN16@Win32LoadS

; 466  :             {
; 467  :                 // TODO(evan): Logging
; 468  :                 CloseHandle(File);

  003b0	48 8b 4c 24 48	 mov	 rcx, QWORD PTR File$[rsp]
  003b5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_CloseHandle

; 469  :                 return(Result);

  003bb	48 8d 44 24 58	 lea	 rax, QWORD PTR Result$[rsp]
  003c0	48 8b bc 24 d0
	00 00 00	 mov	 rdi, QWORD PTR $T8[rsp]
  003c8	48 8b f0	 mov	 rsi, rax
  003cb	b9 18 00 00 00	 mov	 ecx, 24
  003d0	f3 a4		 rep movsb
  003d2	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR $T8[rsp]
  003da	e9 e5 01 00 00	 jmp	 $LN1@Win32LoadS
$LN16@Win32LoadS:

; 470  :             }
; 471  :             
; 472  :             ReadFile(File, &ChunkDataSize, sizeof(DWORD), &BytesRead, 0);

  003df	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  003e8	4c 8d 4c 24 40	 lea	 r9, QWORD PTR BytesRead$1[rsp]
  003ed	41 b8 04 00 00
	00		 mov	 r8d, 4
  003f3	48 8d 54 24 50	 lea	 rdx, QWORD PTR ChunkDataSize$2[rsp]
  003f8	48 8b 4c 24 48	 mov	 rcx, QWORD PTR File$[rsp]
  003fd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_ReadFile

; 473  :             if(BytesRead != sizeof(DWORD))

  00403	8b 44 24 40	 mov	 eax, DWORD PTR BytesRead$1[rsp]
  00407	48 83 f8 04	 cmp	 rax, 4
  0040b	74 2f		 je	 SHORT $LN17@Win32LoadS

; 474  :             {
; 475  :                 // TODO(evan): Logging
; 476  :                 CloseHandle(File);

  0040d	48 8b 4c 24 48	 mov	 rcx, QWORD PTR File$[rsp]
  00412	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_CloseHandle

; 477  :                 return(Result);

  00418	48 8d 44 24 58	 lea	 rax, QWORD PTR Result$[rsp]
  0041d	48 8b bc 24 d0
	00 00 00	 mov	 rdi, QWORD PTR $T8[rsp]
  00425	48 8b f0	 mov	 rsi, rax
  00428	b9 18 00 00 00	 mov	 ecx, 24
  0042d	f3 a4		 rep movsb
  0042f	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR $T8[rsp]
  00437	e9 88 01 00 00	 jmp	 $LN1@Win32LoadS
$LN17@Win32LoadS:

; 478  :             }
; 479  :             
; 480  :             u8 *AudioData = PushSize(Scratch, ChunkDataSize);

  0043c	8b 44 24 50	 mov	 eax, DWORD PTR ChunkDataSize$2[rsp]
  00440	8b d0		 mov	 edx, eax
  00442	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR Scratch$[rsp]
  0044a	e8 00 00 00 00	 call	 PushSize
  0044f	48 89 44 24 78	 mov	 QWORD PTR AudioData$5[rsp], rax

; 481  :             if(!AudioData)

  00454	48 83 7c 24 78
	00		 cmp	 QWORD PTR AudioData$5[rsp], 0
  0045a	75 2f		 jne	 SHORT $LN18@Win32LoadS

; 482  :             {
; 483  :                 // TODO(evan): Logging
; 484  :                 CloseHandle(File);

  0045c	48 8b 4c 24 48	 mov	 rcx, QWORD PTR File$[rsp]
  00461	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_CloseHandle

; 485  :                 return(Result);

  00467	48 8d 44 24 58	 lea	 rax, QWORD PTR Result$[rsp]
  0046c	48 8b bc 24 d0
	00 00 00	 mov	 rdi, QWORD PTR $T8[rsp]
  00474	48 8b f0	 mov	 rsi, rax
  00477	b9 18 00 00 00	 mov	 ecx, 24
  0047c	f3 a4		 rep movsb
  0047e	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR $T8[rsp]
  00486	e9 39 01 00 00	 jmp	 $LN1@Win32LoadS
$LN18@Win32LoadS:

; 486  :             }
; 487  :             
; 488  :             ReadFile(File, AudioData, ChunkDataSize, &BytesRead, 0);

  0048b	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  00494	4c 8d 4c 24 40	 lea	 r9, QWORD PTR BytesRead$1[rsp]
  00499	44 8b 44 24 50	 mov	 r8d, DWORD PTR ChunkDataSize$2[rsp]
  0049e	48 8b 54 24 78	 mov	 rdx, QWORD PTR AudioData$5[rsp]
  004a3	48 8b 4c 24 48	 mov	 rcx, QWORD PTR File$[rsp]
  004a8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_ReadFile

; 489  :             if(BytesRead != ChunkDataSize)

  004ae	8b 44 24 50	 mov	 eax, DWORD PTR ChunkDataSize$2[rsp]
  004b2	39 44 24 40	 cmp	 DWORD PTR BytesRead$1[rsp], eax
  004b6	74 2f		 je	 SHORT $LN19@Win32LoadS

; 490  :             {
; 491  :                 // TODO(evan): Logging
; 492  :                 CloseHandle(File);

  004b8	48 8b 4c 24 48	 mov	 rcx, QWORD PTR File$[rsp]
  004bd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_CloseHandle

; 493  :                 return(Result);

  004c3	48 8d 44 24 58	 lea	 rax, QWORD PTR Result$[rsp]
  004c8	48 8b bc 24 d0
	00 00 00	 mov	 rdi, QWORD PTR $T8[rsp]
  004d0	48 8b f0	 mov	 rsi, rax
  004d3	b9 18 00 00 00	 mov	 ecx, 24
  004d8	f3 a4		 rep movsb
  004da	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR $T8[rsp]
  004e2	e9 dd 00 00 00	 jmp	 $LN1@Win32LoadS
$LN19@Win32LoadS:

; 494  :             }
; 495  :             
; 496  :             Result.Data = AudioData;

  004e7	48 8b 44 24 78	 mov	 rax, QWORD PTR AudioData$5[rsp]
  004ec	48 89 44 24 58	 mov	 QWORD PTR Result$[rsp], rax

; 497  :             Result.Size = ChunkDataSize;

  004f1	8b 44 24 50	 mov	 eax, DWORD PTR ChunkDataSize$2[rsp]
  004f5	89 44 24 60	 mov	 DWORD PTR Result$[rsp+8], eax

; 498  :             CloseHandle(File);

  004f9	48 8b 4c 24 48	 mov	 rcx, QWORD PTR File$[rsp]
  004fe	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_CloseHandle

; 499  :             IXAudio2SourceVoice *SourceVoice;
; 500  :             AssertHR(IXAudio2_CreateSourceVoice(GlobalState->XAudio, &SourceVoice,

  00504	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR GlobalState
  0050b	48 8b 80 a8 01
	00 00		 mov	 rax, QWORD PTR [rax+424]
  00512	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00515	48 c7 44 24 38
	00 00 00 00	 mov	 QWORD PTR [rsp+56], 0
  0051e	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR [rsp+48], 0
  00527	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR [rsp+40], 0
  00530	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  00538	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  0053e	45 33 c9	 xor	 r9d, r9d
  00541	4c 8d 84 24 88
	00 00 00	 lea	 r8, QWORD PTR Format$7[rsp]
  00549	48 8d 94 24 80
	00 00 00	 lea	 rdx, QWORD PTR SourceVoice$6[rsp]
  00551	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR GlobalState
  00558	48 8b 89 a8 01
	00 00		 mov	 rcx, QWORD PTR [rcx+424]
  0055f	ff 50 28	 call	 QWORD PTR [rax+40]
  00562	85 c0		 test	 eax, eax
  00564	7d 0b		 jge	 SHORT $LN20@Win32LoadS
  00566	c7 04 25 00 00
	00 00 00 00 00
	00		 mov	 DWORD PTR ds:0, 0
$LN20@Win32LoadS:

; 501  :                                                 &Format.Format, 0, XAUDIO2_DEFAULT_FREQ_RATIO, 0, 0, 0));
; 502  :             Result.Platform = PushSize(Scratch, sizeof(IXAudio2SourceVoice *));

  00571	ba 08 00 00 00	 mov	 edx, 8
  00576	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR Scratch$[rsp]
  0057e	e8 00 00 00 00	 call	 PushSize
  00583	48 89 44 24 68	 mov	 QWORD PTR Result$[rsp+16], rax

; 503  :             *Result.Platform = SourceVoice;

  00588	48 8b 44 24 68	 mov	 rax, QWORD PTR Result$[rsp+16]
  0058d	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR SourceVoice$6[rsp]
  00595	48 89 08	 mov	 QWORD PTR [rax], rcx

; 504  :         }

  00598	eb 0b		 jmp	 SHORT $LN5@Win32LoadS
$LN4@Win32LoadS:

; 505  :         else
; 506  :         {
; 507  :             // TODO(evan): Logging
; 508  :             CloseHandle(File);

  0059a	48 8b 4c 24 48	 mov	 rcx, QWORD PTR File$[rsp]
  0059f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_CloseHandle
$LN5@Win32LoadS:
$LN2@Win32LoadS:

; 509  :         }
; 510  :     }
; 511  :     else
; 512  :     {
; 513  :         // TODO(evan): Logging
; 514  :     }
; 515  :     
; 516  :     return(Result);

  005a5	48 8d 44 24 58	 lea	 rax, QWORD PTR Result$[rsp]
  005aa	48 8b bc 24 d0
	00 00 00	 mov	 rdi, QWORD PTR $T8[rsp]
  005b2	48 8b f0	 mov	 rsi, rax
  005b5	b9 18 00 00 00	 mov	 ecx, 24
  005ba	f3 a4		 rep movsb
  005bc	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR $T8[rsp]
$LN1@Win32LoadS:

; 517  : }

  005c4	48 81 c4 b8 00
	00 00		 add	 rsp, 184		; 000000b8H
  005cb	5f		 pop	 rdi
  005cc	5e		 pop	 rsi
  005cd	c3		 ret	 0
Win32LoadSound ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File W:\new-horizons\code\win32_horizons.c
_TEXT	SEGMENT
Mesh$ = 80
Texture$ = 88
Shader$ = 96
Constants$ = 104
Is2D$ = 112
Win32RenderMesh PROC

; 366  : {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 367  :     Win32D3D11RenderMesh(&GlobalState->D3D11State, GlobalState->WindowDimension, Mesh, Shader, Texture, Constants, Is2D);

  00018	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR GlobalState
  0001f	48 05 c0 00 00
	00		 add	 rax, 192		; 000000c0H
  00025	8b 4c 24 70	 mov	 ecx, DWORD PTR Is2D$[rsp]
  00029	89 4c 24 30	 mov	 DWORD PTR [rsp+48], ecx
  0002d	48 8b 4c 24 68	 mov	 rcx, QWORD PTR Constants$[rsp]
  00032	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00037	48 8b 4c 24 58	 mov	 rcx, QWORD PTR Texture$[rsp]
  0003c	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00041	4c 8b 4c 24 60	 mov	 r9, QWORD PTR Shader$[rsp]
  00046	4c 8b 44 24 50	 mov	 r8, QWORD PTR Mesh$[rsp]
  0004b	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR GlobalState
  00052	48 8b 91 9c 01
	00 00		 mov	 rdx, QWORD PTR [rcx+412]
  00059	48 8b c8	 mov	 rcx, rax
  0005c	e8 00 00 00 00	 call	 Win32D3D11RenderMesh

; 368  : }

  00061	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00065	c3		 ret	 0
Win32RenderMesh ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File W:\new-horizons\code\win32_horizons.c
_TEXT	SEGMENT
Shader$ = 32
ShaderPath$ = 64
Is2D$ = 72
Win32CreateShader PROC

; 358  : {

  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 359  :     win32_d3d11_shader *Shader = PushStruct(&GlobalState->Arena, win32_d3d11_shader);

  0000d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR GlobalState
  00014	48 05 b0 01 00
	00		 add	 rax, 432		; 000001b0H
  0001a	ba 20 00 00 00	 mov	 edx, 32			; 00000020H
  0001f	48 8b c8	 mov	 rcx, rax
  00022	e8 00 00 00 00	 call	 PushSize
  00027	48 89 44 24 20	 mov	 QWORD PTR Shader$[rsp], rax

; 360  :     Win32D3D11CreateShader(&GlobalState->D3D11State, Shader, ShaderPath, Is2D);

  0002c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR GlobalState
  00033	48 05 c0 00 00
	00		 add	 rax, 192		; 000000c0H
  00039	44 8b 4c 24 48	 mov	 r9d, DWORD PTR Is2D$[rsp]
  0003e	4c 8b 44 24 40	 mov	 r8, QWORD PTR ShaderPath$[rsp]
  00043	48 8b 54 24 20	 mov	 rdx, QWORD PTR Shader$[rsp]
  00048	48 8b c8	 mov	 rcx, rax
  0004b	e8 00 00 00 00	 call	 Win32D3D11CreateShader

; 361  :     
; 362  :     return(Shader);

  00050	48 8b 44 24 20	 mov	 rax, QWORD PTR Shader$[rsp]

; 363  : }

  00055	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00059	c3		 ret	 0
Win32CreateShader ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File W:\new-horizons\code\win32_horizons.c
_TEXT	SEGMENT
Texture$ = 48
Data$ = 80
Width$ = 88
Height$ = 96
Win32CreateTexture PROC

; 349  : {

  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 350  :     win32_d3d11_texture *Texture = PushStruct(&GlobalState->Arena, win32_d3d11_texture);

  00012	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR GlobalState
  00019	48 05 b0 01 00
	00		 add	 rax, 432		; 000001b0H
  0001f	ba 08 00 00 00	 mov	 edx, 8
  00024	48 8b c8	 mov	 rcx, rax
  00027	e8 00 00 00 00	 call	 PushSize
  0002c	48 89 44 24 30	 mov	 QWORD PTR Texture$[rsp], rax

; 351  :     Win32D3D11CreateTexture(&GlobalState->D3D11State, Texture,

  00031	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR GlobalState
  00038	48 05 c0 00 00
	00		 add	 rax, 192		; 000000c0H
  0003e	8b 4c 24 60	 mov	 ecx, DWORD PTR Height$[rsp]
  00042	89 4c 24 20	 mov	 DWORD PTR [rsp+32], ecx
  00046	44 8b 4c 24 58	 mov	 r9d, DWORD PTR Width$[rsp]
  0004b	4c 8b 44 24 50	 mov	 r8, QWORD PTR Data$[rsp]
  00050	48 8b 54 24 30	 mov	 rdx, QWORD PTR Texture$[rsp]
  00055	48 8b c8	 mov	 rcx, rax
  00058	e8 00 00 00 00	 call	 Win32D3D11CreateTexture

; 352  :                             Data, Width, Height);
; 353  :     
; 354  :     return(Texture);

  0005d	48 8b 44 24 30	 mov	 rax, QWORD PTR Texture$[rsp]

; 355  : }

  00062	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00066	c3		 ret	 0
Win32CreateTexture ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File W:\new-horizons\code\win32_horizons.c
_TEXT	SEGMENT
Mesh$ = 32
Win32PopMesh PROC

; 342  : {

  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 343  :     // NOTE(evan): Grab the latest mesh in the buffer
; 344  :     win32_d3d11_mesh *Mesh = PopStruct(&GlobalState->Arena, win32_d3d11_mesh);

  00004	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR GlobalState
  0000b	48 05 b0 01 00
	00		 add	 rax, 432		; 000001b0H
  00011	ba 18 00 00 00	 mov	 edx, 24
  00016	48 8b c8	 mov	 rcx, rax
  00019	e8 00 00 00 00	 call	 PopSize
  0001e	48 89 44 24 20	 mov	 QWORD PTR Mesh$[rsp], rax

; 345  :     ReleaseMesh(Mesh);

  00023	48 8b 4c 24 20	 mov	 rcx, QWORD PTR Mesh$[rsp]
  00028	e8 00 00 00 00	 call	 ReleaseMesh

; 346  : }

  0002d	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00031	c3		 ret	 0
Win32PopMesh ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File W:\new-horizons\code\win32_horizons.c
_TEXT	SEGMENT
Mesh$ = 48
VertexData$ = 80
VertexCount$ = 88
IndexData$ = 96
IndexCount$ = 104
Is2D$ = 112
Win32CreateMesh PROC

; 332  : {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00013	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 333  :     win32_d3d11_mesh *Mesh = PushStruct(&GlobalState->Arena, win32_d3d11_mesh);

  00017	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR GlobalState
  0001e	48 05 b0 01 00
	00		 add	 rax, 432		; 000001b0H
  00024	ba 18 00 00 00	 mov	 edx, 24
  00029	48 8b c8	 mov	 rcx, rax
  0002c	e8 00 00 00 00	 call	 PushSize
  00031	48 89 44 24 30	 mov	 QWORD PTR Mesh$[rsp], rax

; 334  :     Win32D3D11CreateMesh(&GlobalState->D3D11State, Mesh,

  00036	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR GlobalState
  0003d	48 05 c0 00 00
	00		 add	 rax, 192		; 000000c0H
  00043	8b 4c 24 68	 mov	 ecx, DWORD PTR IndexCount$[rsp]
  00047	89 4c 24 28	 mov	 DWORD PTR [rsp+40], ecx
  0004b	48 8b 4c 24 60	 mov	 rcx, QWORD PTR IndexData$[rsp]
  00050	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00055	44 8b 4c 24 58	 mov	 r9d, DWORD PTR VertexCount$[rsp]
  0005a	4c 8b 44 24 50	 mov	 r8, QWORD PTR VertexData$[rsp]
  0005f	48 8b 54 24 30	 mov	 rdx, QWORD PTR Mesh$[rsp]
  00064	48 8b c8	 mov	 rcx, rax
  00067	e8 00 00 00 00	 call	 Win32D3D11CreateMesh

; 335  :                          VertexData, VertexCount,
; 336  :                          IndexData, IndexCount);
; 337  :     
; 338  :     return(Mesh);

  0006c	48 8b 44 24 30	 mov	 rax, QWORD PTR Mesh$[rsp]

; 339  : }

  00071	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00075	c3		 ret	 0
Win32CreateMesh ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File W:\new-horizons\code\win32_horizons.c
_TEXT	SEGMENT
Result$ = 0
Start$ = 32
End$ = 40
Win32GetSecondsElapsed PROC

; 325  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 18	 sub	 rsp, 24

; 326  :     f32 Result = ((f32)(End.QuadPart - Start.QuadPart) /

  0000e	48 8b 44 24 20	 mov	 rax, QWORD PTR Start$[rsp]
  00013	48 8b 4c 24 28	 mov	 rcx, QWORD PTR End$[rsp]
  00018	48 2b c8	 sub	 rcx, rax
  0001b	48 8b c1	 mov	 rax, rcx
  0001e	f3 48 0f 2a c0	 cvtsi2ss xmm0, rax
  00023	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR GlobalState
  0002a	f3 48 0f 2a 88
	b0 00 00 00	 cvtsi2ss xmm1, QWORD PTR [rax+176]
  00033	f3 0f 5e c1	 divss	 xmm0, xmm1
  00037	f3 0f 11 04 24	 movss	 DWORD PTR Result$[rsp], xmm0

; 327  :                   (f32)GlobalState->PerfCountFrequency);
; 328  :     return(Result);

  0003c	f3 0f 10 04 24	 movss	 xmm0, DWORD PTR Result$[rsp]

; 329  : }

  00041	48 83 c4 18	 add	 rsp, 24
  00045	c3		 ret	 0
Win32GetSecondsElapsed ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File W:\new-horizons\code\win32_horizons.c
_TEXT	SEGMENT
Result$ = 32
Win32GetWallClock PROC

; 317  : {

  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 318  :     LARGE_INTEGER Result;
; 319  :     QueryPerformanceCounter(&Result);

  00004	48 8d 4c 24 20	 lea	 rcx, QWORD PTR Result$[rsp]
  00009	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_QueryPerformanceCounter

; 320  :     return(Result);

  0000f	48 8b 44 24 20	 mov	 rax, QWORD PTR Result$[rsp]

; 321  : }

  00014	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00018	c3		 ret	 0
Win32GetWallClock ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File W:\new-horizons\code\win32_horizons.c
_TEXT	SEGMENT
Handle$ = 48
Win32CloseFile PROC

; 311  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 312  :     CloseHandle(Handle);

  00009	48 8b 4c 24 30	 mov	 rcx, QWORD PTR Handle$[rsp]
  0000e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_CloseHandle

; 313  : }

  00014	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00018	c3		 ret	 0
Win32CloseFile ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File W:\new-horizons\code\win32_horizons.c
_TEXT	SEGMENT
Result$ = 48
BytesWritten$1 = 52
File$ = 56
Handle$ = 80
DataSize$ = 88
Data$ = 96
Win32WriteEntireFile PROC

; 285  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 286  :     b32 Result = false;

  00012	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR Result$[rsp], 0

; 287  :     
; 288  :     HANDLE File = *((HANDLE *)Handle);

  0001a	48 8b 44 24 50	 mov	 rax, QWORD PTR Handle$[rsp]
  0001f	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00022	48 89 44 24 38	 mov	 QWORD PTR File$[rsp], rax

; 289  :     if(File != INVALID_HANDLE_VALUE)

  00027	48 83 7c 24 38
	ff		 cmp	 QWORD PTR File$[rsp], -1
  0002d	74 39		 je	 SHORT $LN2@Win32Write

; 290  :     {
; 291  :         DWORD BytesWritten;
; 292  :         if(WriteFile(File, Data, DataSize, &BytesWritten, 0) &&

  0002f	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  00038	4c 8d 4c 24 34	 lea	 r9, QWORD PTR BytesWritten$1[rsp]
  0003d	44 8b 44 24 58	 mov	 r8d, DWORD PTR DataSize$[rsp]
  00042	48 8b 54 24 60	 mov	 rdx, QWORD PTR Data$[rsp]
  00047	48 8b 4c 24 38	 mov	 rcx, QWORD PTR File$[rsp]
  0004c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_WriteFile
  00052	85 c0		 test	 eax, eax
  00054	74 12		 je	 SHORT $LN4@Win32Write
  00056	8b 44 24 58	 mov	 eax, DWORD PTR DataSize$[rsp]
  0005a	39 44 24 34	 cmp	 DWORD PTR BytesWritten$1[rsp], eax
  0005e	75 08		 jne	 SHORT $LN4@Win32Write

; 293  :            BytesWritten == DataSize)
; 294  :         {
; 295  :             Result = true;

  00060	c7 44 24 30 01
	00 00 00	 mov	 DWORD PTR Result$[rsp], 1
$LN4@Win32Write:
$LN2@Win32Write:

; 296  :         }
; 297  :         else
; 298  :         {
; 299  :             // TODO(evan): Logging
; 300  :         }
; 301  :     }
; 302  :     else
; 303  :     {
; 304  :         // TODO(evan): Logging
; 305  :     }
; 306  :     
; 307  :     return(Result);

  00068	8b 44 24 30	 mov	 eax, DWORD PTR Result$[rsp]

; 308  : }

  0006c	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00070	c3		 ret	 0
Win32WriteEntireFile ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File W:\new-horizons\code\win32_horizons.c
_TEXT	SEGMENT
BytesRead$1 = 48
Handle$ = 80
FileSize$ = 88
Dest$ = 96
Win32ReadEntireFile PROC

; 258  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 259  :     if(Handle != INVALID_HANDLE_VALUE)

  00012	48 83 7c 24 50
	ff		 cmp	 QWORD PTR Handle$[rsp], -1
  00018	74 33		 je	 SHORT $LN2@Win32ReadE

; 260  :     {
; 261  :         if(Dest)

  0001a	48 83 7c 24 60
	00		 cmp	 QWORD PTR Dest$[rsp], 0
  00020	74 2b		 je	 SHORT $LN4@Win32ReadE

; 262  :         {
; 263  :             DWORD BytesRead;
; 264  :             if(ReadFile(Handle, Dest, FileSize, &BytesRead, 0) &&

  00022	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  0002b	4c 8d 4c 24 30	 lea	 r9, QWORD PTR BytesRead$1[rsp]
  00030	44 8b 44 24 58	 mov	 r8d, DWORD PTR FileSize$[rsp]
  00035	48 8b 54 24 60	 mov	 rdx, QWORD PTR Dest$[rsp]
  0003a	48 8b 4c 24 50	 mov	 rcx, QWORD PTR Handle$[rsp]
  0003f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_ReadFile
  00045	85 c0		 test	 eax, eax
  00047	74 04		 je	 SHORT $LN6@Win32ReadE
  00049	8b 44 24 58	 mov	 eax, DWORD PTR FileSize$[rsp]
$LN6@Win32ReadE:
$LN4@Win32ReadE:
$LN2@Win32ReadE:

; 265  :                BytesRead == FileSize)
; 266  :             {
; 267  :             }
; 268  :             else
; 269  :             {
; 270  :                 // TODO(evan): Logging
; 271  :             }
; 272  :         }
; 273  :         else
; 274  :         {
; 275  :             // TODO(evan): Logging
; 276  :         }
; 277  :     }
; 278  :     else
; 279  :     {
; 280  :         // TODO(evan): Logging
; 281  :     }
; 282  : }

  0004d	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00051	c3		 ret	 0
Win32ReadEntireFile ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File W:\new-horizons\code\win32_horizons.c
_TEXT	SEGMENT
Result$ = 32
FileSize$1 = 40
Handle$ = 64
Win32GetFileSize PROC

; 234  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 235  :     u32 Result = 0;

  00009	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR Result$[rsp], 0

; 236  :     
; 237  :     if(Handle != INVALID_HANDLE_VALUE)

  00011	48 83 7c 24 40
	ff		 cmp	 QWORD PTR Handle$[rsp], -1
  00017	74 22		 je	 SHORT $LN2@Win32GetFi

; 238  :     {
; 239  :         LARGE_INTEGER FileSize;
; 240  :         if(GetFileSizeEx(Handle, &FileSize))

  00019	48 8d 54 24 28	 lea	 rdx, QWORD PTR FileSize$1[rsp]
  0001e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR Handle$[rsp]
  00023	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetFileSizeEx
  00029	85 c0		 test	 eax, eax
  0002b	74 0e		 je	 SHORT $LN4@Win32GetFi

; 241  :         {
; 242  :             Result = SafeTruncateUInt64(FileSize.QuadPart);

  0002d	48 8b 4c 24 28	 mov	 rcx, QWORD PTR FileSize$1[rsp]
  00032	e8 00 00 00 00	 call	 SafeTruncateUInt64
  00037	89 44 24 20	 mov	 DWORD PTR Result$[rsp], eax
$LN4@Win32GetFi:
$LN2@Win32GetFi:

; 243  :         }
; 244  :         else
; 245  :         {
; 246  :             // TODO(evan): Logging
; 247  :         }
; 248  :     }
; 249  :     else
; 250  :     {
; 251  :         // TODO(evan): Logging
; 252  :     }
; 253  :     
; 254  :     return(Result);

  0003b	8b 44 24 20	 mov	 eax, DWORD PTR Result$[rsp]

; 255  : }

  0003f	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00043	c3		 ret	 0
Win32GetFileSize ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File W:\new-horizons\code\win32_horizons.c
_TEXT	SEGMENT
ShareMode$ = 64
AccessFlags$ = 68
File$ = 72
FileName$ = 96
Flags$ = 104
Win32OpenFile8 PROC

; 213  : {

  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 214  :     DWORD AccessFlags = 0;

  0000d	c7 44 24 44 00
	00 00 00	 mov	 DWORD PTR AccessFlags$[rsp], 0

; 215  :     DWORD ShareMode = 0;

  00015	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR ShareMode$[rsp], 0

; 216  :     if(Flags & FILE_OPEN_READ)

  0001d	8b 44 24 68	 mov	 eax, DWORD PTR Flags$[rsp]
  00021	83 e0 01	 and	 eax, 1
  00024	85 c0		 test	 eax, eax
  00026	74 17		 je	 SHORT $LN2@Win32OpenF

; 217  :     {
; 218  :         AccessFlags |= GENERIC_READ;

  00028	8b 44 24 44	 mov	 eax, DWORD PTR AccessFlags$[rsp]
  0002c	0f ba e8 1f	 bts	 eax, 31
  00030	89 44 24 44	 mov	 DWORD PTR AccessFlags$[rsp], eax

; 219  :         ShareMode |= FILE_SHARE_READ;

  00034	8b 44 24 40	 mov	 eax, DWORD PTR ShareMode$[rsp]
  00038	83 c8 01	 or	 eax, 1
  0003b	89 44 24 40	 mov	 DWORD PTR ShareMode$[rsp], eax
$LN2@Win32OpenF:

; 220  :     }
; 221  :     if(Flags & FILE_OPEN_WRITE)

  0003f	8b 44 24 68	 mov	 eax, DWORD PTR Flags$[rsp]
  00043	83 e0 02	 and	 eax, 2
  00046	85 c0		 test	 eax, eax
  00048	74 17		 je	 SHORT $LN3@Win32OpenF

; 222  :     {
; 223  :         AccessFlags |= GENERIC_WRITE;

  0004a	8b 44 24 44	 mov	 eax, DWORD PTR AccessFlags$[rsp]
  0004e	0f ba e8 1e	 bts	 eax, 30
  00052	89 44 24 44	 mov	 DWORD PTR AccessFlags$[rsp], eax

; 224  :         ShareMode |= FILE_SHARE_WRITE;

  00056	8b 44 24 40	 mov	 eax, DWORD PTR ShareMode$[rsp]
  0005a	83 c8 02	 or	 eax, 2
  0005d	89 44 24 40	 mov	 DWORD PTR ShareMode$[rsp], eax
$LN3@Win32OpenF:

; 225  :     }
; 226  :     
; 227  :     HANDLE File = CreateFileA(FileName, AccessFlags, ShareMode, 0,

  00061	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR [rsp+48], 0
  0006a	c7 44 24 28 80
	00 00 00	 mov	 DWORD PTR [rsp+40], 128	; 00000080H
  00072	c7 44 24 20 03
	00 00 00	 mov	 DWORD PTR [rsp+32], 3
  0007a	45 33 c9	 xor	 r9d, r9d
  0007d	44 8b 44 24 40	 mov	 r8d, DWORD PTR ShareMode$[rsp]
  00082	8b 54 24 44	 mov	 edx, DWORD PTR AccessFlags$[rsp]
  00086	48 8b 4c 24 60	 mov	 rcx, QWORD PTR FileName$[rsp]
  0008b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_CreateFileA
  00091	48 89 44 24 48	 mov	 QWORD PTR File$[rsp], rax

; 228  :                               OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, 0);
; 229  :     
; 230  :     return(File);

  00096	48 8b 44 24 48	 mov	 rax, QWORD PTR File$[rsp]

; 231  : }

  0009b	48 83 c4 58	 add	 rsp, 88			; 00000058H
  0009f	c3		 ret	 0
Win32OpenFile8 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File W:\new-horizons\code\win32_horizons.c
_TEXT	SEGMENT
ShareMode$ = 64
AccessFlags$ = 68
File$ = 72
FileName$ = 96
Flags$ = 104
Win32OpenFile PROC

; 192  : {

  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 193  :     DWORD AccessFlags = 0;

  0000d	c7 44 24 44 00
	00 00 00	 mov	 DWORD PTR AccessFlags$[rsp], 0

; 194  :     DWORD ShareMode = 0;

  00015	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR ShareMode$[rsp], 0

; 195  :     if(Flags & FILE_OPEN_READ)

  0001d	8b 44 24 68	 mov	 eax, DWORD PTR Flags$[rsp]
  00021	83 e0 01	 and	 eax, 1
  00024	85 c0		 test	 eax, eax
  00026	74 17		 je	 SHORT $LN2@Win32OpenF

; 196  :     {
; 197  :         AccessFlags |= GENERIC_READ;

  00028	8b 44 24 44	 mov	 eax, DWORD PTR AccessFlags$[rsp]
  0002c	0f ba e8 1f	 bts	 eax, 31
  00030	89 44 24 44	 mov	 DWORD PTR AccessFlags$[rsp], eax

; 198  :         ShareMode |= FILE_SHARE_READ;

  00034	8b 44 24 40	 mov	 eax, DWORD PTR ShareMode$[rsp]
  00038	83 c8 01	 or	 eax, 1
  0003b	89 44 24 40	 mov	 DWORD PTR ShareMode$[rsp], eax
$LN2@Win32OpenF:

; 199  :     }
; 200  :     if(Flags & FILE_OPEN_WRITE)

  0003f	8b 44 24 68	 mov	 eax, DWORD PTR Flags$[rsp]
  00043	83 e0 02	 and	 eax, 2
  00046	85 c0		 test	 eax, eax
  00048	74 17		 je	 SHORT $LN3@Win32OpenF

; 201  :     {
; 202  :         AccessFlags |= GENERIC_WRITE;

  0004a	8b 44 24 44	 mov	 eax, DWORD PTR AccessFlags$[rsp]
  0004e	0f ba e8 1e	 bts	 eax, 30
  00052	89 44 24 44	 mov	 DWORD PTR AccessFlags$[rsp], eax

; 203  :         ShareMode |= FILE_SHARE_WRITE;

  00056	8b 44 24 40	 mov	 eax, DWORD PTR ShareMode$[rsp]
  0005a	83 c8 02	 or	 eax, 2
  0005d	89 44 24 40	 mov	 DWORD PTR ShareMode$[rsp], eax
$LN3@Win32OpenF:

; 204  :     }
; 205  :     
; 206  :     HANDLE File = CreateFileW(FileName, AccessFlags, ShareMode, 0,

  00061	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR [rsp+48], 0
  0006a	c7 44 24 28 80
	00 00 00	 mov	 DWORD PTR [rsp+40], 128	; 00000080H
  00072	c7 44 24 20 03
	00 00 00	 mov	 DWORD PTR [rsp+32], 3
  0007a	45 33 c9	 xor	 r9d, r9d
  0007d	44 8b 44 24 40	 mov	 r8d, DWORD PTR ShareMode$[rsp]
  00082	8b 54 24 44	 mov	 edx, DWORD PTR AccessFlags$[rsp]
  00086	48 8b 4c 24 60	 mov	 rcx, QWORD PTR FileName$[rsp]
  0008b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_CreateFileW
  00091	48 89 44 24 48	 mov	 QWORD PTR File$[rsp], rax

; 207  :                               OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, 0);
; 208  :     
; 209  :     return(File);

  00096	48 8b 44 24 48	 mov	 rax, QWORD PTR File$[rsp]

; 210  : }

  0009b	48 83 c4 58	 add	 rsp, 88			; 00000058H
  0009f	c3		 ret	 0
Win32OpenFile ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File W:\new-horizons\code\win32_horizons.c
_TEXT	SEGMENT
GameCode$ = 48
Win32UnloadGameCode PROC

; 180  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 181  :     if(GameCode->GameDll)

  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR GameCode$[rsp]
  0000e	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  00013	74 1c		 je	 SHORT $LN2@Win32Unloa

; 182  :     {
; 183  :         FreeLibrary(GameCode->GameDll);

  00015	48 8b 44 24 30	 mov	 rax, QWORD PTR GameCode$[rsp]
  0001a	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  0001e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_FreeLibrary

; 184  :         GameCode->GameDll = 0;

  00024	48 8b 44 24 30	 mov	 rax, QWORD PTR GameCode$[rsp]
  00029	48 c7 40 08 00
	00 00 00	 mov	 QWORD PTR [rax+8], 0
$LN2@Win32Unloa:

; 185  :     }
; 186  :     
; 187  :     GameCode->IsValid = false;

  00031	48 8b 44 24 30	 mov	 rax, QWORD PTR GameCode$[rsp]
  00036	c7 00 00 00 00
	00		 mov	 DWORD PTR [rax], 0

; 188  :     GameCode->GameUpdateAndRender = GameUpdateAndRenderStub;

  0003c	48 8b 44 24 30	 mov	 rax, QWORD PTR GameCode$[rsp]
  00041	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:GameUpdateAndRenderStub
  00048	48 89 48 18	 mov	 QWORD PTR [rax+24], rcx

; 189  : }

  0004c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00050	c3		 ret	 0
Win32UnloadGameCode ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File W:\new-horizons\code\win32_horizons.c
_TEXT	SEGMENT
tv85 = 32
Result$ = 40
Ignored$ = 72
$T1 = 144
SourceDllName$ = 152
TempDllName$ = 160
LockFileName$ = 168
Win32LoadGameCode PROC

; 150  : {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	56		 push	 rsi
  00015	57		 push	 rdi
  00016	48 83 ec 78	 sub	 rsp, 120		; 00000078H

; 151  :     win32_game_code Result = {0};

  0001a	48 8d 44 24 28	 lea	 rax, QWORD PTR Result$[rsp]
  0001f	48 8b f8	 mov	 rdi, rax
  00022	33 c0		 xor	 eax, eax
  00024	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  00029	f3 aa		 rep stosb

; 152  :     
; 153  :     WIN32_FILE_ATTRIBUTE_DATA Ignored;
; 154  :     if(!GetFileAttributesExW(LockFileName, GetFileExInfoStandard, &Ignored))

  0002b	4c 8d 44 24 48	 lea	 r8, QWORD PTR Ignored$[rsp]
  00030	33 d2		 xor	 edx, edx
  00032	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR LockFileName$[rsp]
  0003a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetFileAttributesExW
  00040	85 c0		 test	 eax, eax
  00042	75 7f		 jne	 SHORT $LN2@Win32LoadG

; 155  :     {
; 156  :         Result.LastWriteTime = Win32GetLastWriteTime(SourceDllName);

  00044	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR SourceDllName$[rsp]
  0004c	e8 00 00 00 00	 call	 Win32GetLastWriteTime
  00051	48 89 44 24 38	 mov	 QWORD PTR Result$[rsp+16], rax

; 157  :         
; 158  :         CopyFileW(SourceDllName, TempDllName, false);

  00056	45 33 c0	 xor	 r8d, r8d
  00059	48 8b 94 24 a0
	00 00 00	 mov	 rdx, QWORD PTR TempDllName$[rsp]
  00061	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR SourceDllName$[rsp]
  00069	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_CopyFileW

; 159  :         
; 160  :         Result.GameDll = LoadLibraryW(TempDllName);

  0006f	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR TempDllName$[rsp]
  00077	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_LoadLibraryW
  0007d	48 89 44 24 30	 mov	 QWORD PTR Result$[rsp+8], rax

; 161  :         if(Result.GameDll)

  00082	48 83 7c 24 30
	00		 cmp	 QWORD PTR Result$[rsp+8], 0
  00088	74 39		 je	 SHORT $LN3@Win32LoadG

; 162  :         {
; 163  :             Result.GameUpdateAndRender =

  0008a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG140205
  00091	48 8b 4c 24 30	 mov	 rcx, QWORD PTR Result$[rsp+8]
  00096	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetProcAddress
  0009c	48 89 44 24 40	 mov	 QWORD PTR Result$[rsp+24], rax

; 164  :             (game_update_and_render *)GetProcAddress(Result.GameDll, "GameUpdateAndRender");
; 165  :             
; 166  :             Result.IsValid = Result.GameUpdateAndRender != 0;

  000a1	48 83 7c 24 40
	00		 cmp	 QWORD PTR Result$[rsp+24], 0
  000a7	74 0a		 je	 SHORT $LN6@Win32LoadG
  000a9	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv85[rsp], 1
  000b1	eb 08		 jmp	 SHORT $LN7@Win32LoadG
$LN6@Win32LoadG:
  000b3	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv85[rsp], 0
$LN7@Win32LoadG:
  000bb	8b 44 24 20	 mov	 eax, DWORD PTR tv85[rsp]
  000bf	89 44 24 28	 mov	 DWORD PTR Result$[rsp], eax
$LN3@Win32LoadG:
$LN2@Win32LoadG:

; 167  :         }
; 168  :     }
; 169  :     
; 170  :     if(!Result.IsValid)

  000c3	83 7c 24 28 00	 cmp	 DWORD PTR Result$[rsp], 0
  000c8	75 0c		 jne	 SHORT $LN4@Win32LoadG

; 171  :     {
; 172  :         Result.GameUpdateAndRender = GameUpdateAndRenderStub;

  000ca	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:GameUpdateAndRenderStub
  000d1	48 89 44 24 40	 mov	 QWORD PTR Result$[rsp+24], rax
$LN4@Win32LoadG:

; 173  :     }
; 174  :     
; 175  :     return(Result);

  000d6	48 8d 44 24 28	 lea	 rax, QWORD PTR Result$[rsp]
  000db	48 8b bc 24 90
	00 00 00	 mov	 rdi, QWORD PTR $T1[rsp]
  000e3	48 8b f0	 mov	 rsi, rax
  000e6	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  000eb	f3 a4		 rep movsb
  000ed	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR $T1[rsp]

; 176  : }

  000f5	48 83 c4 78	 add	 rsp, 120		; 00000078H
  000f9	5f		 pop	 rdi
  000fa	5e		 pop	 rsi
  000fb	c3		 ret	 0
Win32LoadGameCode ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File W:\new-horizons\code\win32_horizons.c
_TEXT	SEGMENT
LastWriteTime$ = 32
Data$ = 40
FileName$ = 96
Win32GetLastWriteTime PROC

; 104  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 50	 sub	 rsp, 80			; 00000050H

; 105  :     FILETIME LastWriteTime = {0};

  0000a	48 8d 44 24 20	 lea	 rax, QWORD PTR LastWriteTime$[rsp]
  0000f	48 8b f8	 mov	 rdi, rax
  00012	33 c0		 xor	 eax, eax
  00014	b9 08 00 00 00	 mov	 ecx, 8
  00019	f3 aa		 rep stosb

; 106  :     
; 107  :     WIN32_FILE_ATTRIBUTE_DATA Data;
; 108  :     if(GetFileAttributesExW(FileName, GetFileExInfoStandard, &Data))

  0001b	4c 8d 44 24 28	 lea	 r8, QWORD PTR Data$[rsp]
  00020	33 d2		 xor	 edx, edx
  00022	48 8b 4c 24 60	 mov	 rcx, QWORD PTR FileName$[rsp]
  00027	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetFileAttributesExW
  0002d	85 c0		 test	 eax, eax
  0002f	74 0a		 je	 SHORT $LN2@Win32GetLa

; 109  :     {
; 110  :         LastWriteTime = Data.ftLastWriteTime;

  00031	48 8b 44 24 3c	 mov	 rax, QWORD PTR Data$[rsp+20]
  00036	48 89 44 24 20	 mov	 QWORD PTR LastWriteTime$[rsp], rax
$LN2@Win32GetLa:

; 111  :     }
; 112  :     
; 113  :     return(LastWriteTime);

  0003b	48 8b 44 24 20	 mov	 rax, QWORD PTR LastWriteTime$[rsp]

; 114  : }

  00040	48 83 c4 50	 add	 rsp, 80			; 00000050H
  00044	5f		 pop	 rdi
  00045	c3		 ret	 0
Win32GetLastWriteTime ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File W:\new-horizons\code\win32_horizons.c
_TEXT	SEGMENT
XAudio$ = 64
MasterVoice$ = 72
Win32InitXAudio2 PROC

; 90   : {

  00000	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 91   :     IXAudio2 *XAudio;
; 92   :     AssertHR(XAudio2Create(&XAudio, 0, XAUDIO2_DEFAULT_PROCESSOR));

  00004	41 b8 01 00 00
	00		 mov	 r8d, 1
  0000a	33 d2		 xor	 edx, edx
  0000c	48 8d 4c 24 40	 lea	 rcx, QWORD PTR XAudio$[rsp]
  00011	e8 00 00 00 00	 call	 XAudio2Create
  00016	85 c0		 test	 eax, eax
  00018	7d 0b		 jge	 SHORT $LN2@Win32InitX
  0001a	c7 04 25 00 00
	00 00 00 00 00
	00		 mov	 DWORD PTR ds:0, 0
$LN2@Win32InitX:

; 93   :     GlobalState->XAudio = XAudio;

  00025	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR GlobalState
  0002c	48 8b 4c 24 40	 mov	 rcx, QWORD PTR XAudio$[rsp]
  00031	48 89 88 a8 01
	00 00		 mov	 QWORD PTR [rax+424], rcx

; 94   :     
; 95   :     IXAudio2MasteringVoice *MasterVoice;
; 96   :     AssertHR(IXAudio2_CreateMasteringVoice(XAudio, &MasterVoice,

  00038	48 8b 44 24 40	 mov	 rax, QWORD PTR XAudio$[rsp]
  0003d	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00040	c7 44 24 38 06
	00 00 00	 mov	 DWORD PTR [rsp+56], 6
  00048	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR [rsp+48], 0
  00051	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR [rsp+40], 0
  0005a	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR [rsp+32], 0
  00062	45 33 c9	 xor	 r9d, r9d
  00065	45 33 c0	 xor	 r8d, r8d
  00068	48 8d 54 24 48	 lea	 rdx, QWORD PTR MasterVoice$[rsp]
  0006d	48 8b 4c 24 40	 mov	 rcx, QWORD PTR XAudio$[rsp]
  00072	ff 50 38	 call	 QWORD PTR [rax+56]
  00075	85 c0		 test	 eax, eax
  00077	7d 0b		 jge	 SHORT $LN3@Win32InitX
  00079	c7 04 25 00 00
	00 00 00 00 00
	00		 mov	 DWORD PTR ds:0, 0
$LN3@Win32InitX:

; 97   :                                            XAUDIO2_DEFAULT_CHANNELS,
; 98   :                                            XAUDIO2_DEFAULT_SAMPLERATE,
; 99   :                                            0, 0, 0, AudioCategory_GameEffects));
; 100  : }

  00084	48 83 c4 58	 add	 rsp, 88			; 00000058H
  00088	c3		 ret	 0
Win32InitXAudio2 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File W:\new-horizons\code\win32_horizons.c
_TEXT	SEGMENT
Win32InitCOM PROC

; 84   : {

  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 85   :     AssertHR(CoInitializeEx(0, COINIT_MULTITHREADED));

  00004	33 d2		 xor	 edx, edx
  00006	33 c9		 xor	 ecx, ecx
  00008	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_CoInitializeEx
  0000e	85 c0		 test	 eax, eax
  00010	7d 0b		 jge	 SHORT $LN2@Win32InitC
  00012	c7 04 25 00 00
	00 00 00 00 00
	00		 mov	 DWORD PTR ds:0, 0
$LN2@Win32InitC:

; 86   : }

  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
Win32InitCOM ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File W:\new-horizons\code\win32_horizons.c
_TEXT	SEGMENT
XInputLibrary$ = 32
Win32LoadXInput PROC

; 64   : {

  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 65   :     HMODULE XInputLibrary = LoadLibraryA("Xinput9_1_0.dll");

  00004	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG140151
  0000b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_LoadLibraryA
  00011	48 89 44 24 20	 mov	 QWORD PTR XInputLibrary$[rsp], rax

; 66   :     if(!XInputLibrary)

  00016	48 83 7c 24 20
	00		 cmp	 QWORD PTR XInputLibrary$[rsp], 0
  0001c	75 2c		 jne	 SHORT $LN2@Win32LoadX

; 67   :     {
; 68   :         XInputLibrary = LoadLibraryA("Xinput1_4.dll");

  0001e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG140153
  00025	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_LoadLibraryA
  0002b	48 89 44 24 20	 mov	 QWORD PTR XInputLibrary$[rsp], rax

; 69   :         if(!XInputLibrary)

  00030	48 83 7c 24 20
	00		 cmp	 QWORD PTR XInputLibrary$[rsp], 0
  00036	75 12		 jne	 SHORT $LN3@Win32LoadX

; 70   :         {
; 71   :             XInputLibrary = LoadLibraryA("Xinput1_3.dll");

  00038	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG140155
  0003f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_LoadLibraryA
  00045	48 89 44 24 20	 mov	 QWORD PTR XInputLibrary$[rsp], rax
$LN3@Win32LoadX:
$LN2@Win32LoadX:

; 72   :         }
; 73   :     }
; 74   :     
; 75   :     if(XInputLibrary)

  0004a	48 83 7c 24 20
	00		 cmp	 QWORD PTR XInputLibrary$[rsp], 0
  00050	74 32		 je	 SHORT $LN4@Win32LoadX

; 76   :     {
; 77   :         XInputGetState = (x_input_get_state *)GetProcAddress(XInputLibrary, "XInputGetState");

  00052	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG140157
  00059	48 8b 4c 24 20	 mov	 rcx, QWORD PTR XInputLibrary$[rsp]
  0005e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetProcAddress
  00064	48 89 05 00 00
	00 00		 mov	 QWORD PTR XInputGetState_, rax

; 78   :         XInputSetState = (x_input_set_state *)GetProcAddress(XInputLibrary, "XInputSetState");

  0006b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG140158
  00072	48 8b 4c 24 20	 mov	 rcx, QWORD PTR XInputLibrary$[rsp]
  00077	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetProcAddress
  0007d	48 89 05 00 00
	00 00		 mov	 QWORD PTR XInputSetState_, rax
$LN4@Win32LoadX:

; 79   :     }
; 80   : }

  00084	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00088	c3		 ret	 0
Win32LoadXInput ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File W:\new-horizons\code\win32_horizons.c
_TEXT	SEGMENT
Output$ = 48
Win32OutputString PROC

; 58   : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 59   :     OutputDebugStringA(Output);

  00009	48 8b 4c 24 30	 mov	 rcx, QWORD PTR Output$[rsp]
  0000e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_OutputDebugStringA

; 60   : }

  00014	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00018	c3		 ret	 0
Win32OutputString ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File W:\new-horizons\code\win32_horizons.c
_TEXT	SEGMENT
dwUserIndex$ = 8
pVibration$ = 16
XInputSetStateStub PROC

; 51   : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx

; 52   :     return(ERROR_DEVICE_NOT_CONNECTED);

  00009	b8 8f 04 00 00	 mov	 eax, 1167		; 0000048fH

; 53   : }

  0000e	c3		 ret	 0
XInputSetStateStub ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File W:\new-horizons\code\win32_horizons.c
_TEXT	SEGMENT
dwUserIndex$ = 8
pState$ = 16
XInputGetStateStub PROC

; 42   : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx

; 43   :     return(ERROR_DEVICE_NOT_CONNECTED);

  00009	b8 8f 04 00 00	 mov	 eax, 1167		; 0000048fH

; 44   : }

  0000e	c3		 ret	 0
XInputGetStateStub ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File W:\new-horizons\code\win32_d3d11.c
_TEXT	SEGMENT
Mesh$ = 48
ReleaseMesh PROC

; 399  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 400  :     ID3D11Buffer_Release(Mesh->VBuffer);

  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR Mesh$[rsp]
  0000e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00011	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00014	48 8b 4c 24 30	 mov	 rcx, QWORD PTR Mesh$[rsp]
  00019	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0001c	ff 50 10	 call	 QWORD PTR [rax+16]

; 401  :     ID3D11Buffer_Release(Mesh->IBuffer);

  0001f	48 8b 44 24 30	 mov	 rax, QWORD PTR Mesh$[rsp]
  00024	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00028	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0002b	48 8b 4c 24 30	 mov	 rcx, QWORD PTR Mesh$[rsp]
  00030	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  00034	ff 50 10	 call	 QWORD PTR [rax+16]

; 402  : }

  00037	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0003b	c3		 ret	 0
ReleaseMesh ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File W:\new-horizons\code\win32_d3d11.c
_TEXT	SEGMENT
VBlob$1 = 80
Flags$2 = 88
Result$3 = 92
PBlob$4 = 96
Error$5 = 104
Desc$6 = 112
Message$7 = 136
Message$8 = 144
tv342 = 152
tv341 = 160
tv137 = 168
tv142 = 176
tv339 = 184
tv338 = 192
tv337 = 200
tv155 = 208
tv160 = 216
tv335 = 224
tv334 = 232
tv333 = 240
tv174 = 248
tv178 = 256
tv331 = 264
tv330 = 272
tv329 = 280
tv257 = 288
tv261 = 296
tv327 = 304
tv285 = 312
Desc$9 = 320
Desc$10 = 384
State$ = 528
Shader$ = 536
ShaderPath$ = 544
Is2D$ = 552
Win32D3D11CreateShader PROC

; 309  : {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 81 ec 08 02
	00 00		 sub	 rsp, 520		; 00000208H

; 310  :     {
; 311  :         UINT Flags = (D3DCOMPILE_PACK_MATRIX_COLUMN_MAJOR|

  0001b	c7 44 24 58 10
	08 04 00	 mov	 DWORD PTR Flags$2[rsp], 264208 ; 00040810H

; 312  :                       D3DCOMPILE_ENABLE_STRICTNESS|
; 313  :                       D3DCOMPILE_WARNINGS_ARE_ERRORS);
; 314  : #if defined(HORIZONS_INTERNAL)
; 315  :         Flags |= (D3DCOMPILE_DEBUG|

  00023	8b 44 24 58	 mov	 eax, DWORD PTR Flags$2[rsp]
  00027	83 c8 05	 or	 eax, 5
  0002a	89 44 24 58	 mov	 DWORD PTR Flags$2[rsp], eax

; 316  :                   D3DCOMPILE_SKIP_OPTIMIZATION);
; 317  : #else
; 318  :         Flags |= D3DCOMPILE_OPTIMIZATION_LEVEL3;
; 319  : #endif
; 320  :         
; 321  :         ID3DBlob *Error;
; 322  :         
; 323  :         ID3DBlob *VBlob;
; 324  :         HRESULT Result = D3DCompileFromFile(ShaderPath, 0, 0,

  0002e	48 8d 44 24 68	 lea	 rax, QWORD PTR Error$5[rsp]
  00033	48 89 44 24 40	 mov	 QWORD PTR [rsp+64], rax
  00038	48 8d 44 24 50	 lea	 rax, QWORD PTR VBlob$1[rsp]
  0003d	48 89 44 24 38	 mov	 QWORD PTR [rsp+56], rax
  00042	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR [rsp+48], 0
  0004a	8b 44 24 58	 mov	 eax, DWORD PTR Flags$2[rsp]
  0004e	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00052	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG140072
  00059	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0005e	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG140073
  00065	45 33 c0	 xor	 r8d, r8d
  00068	33 d2		 xor	 edx, edx
  0006a	48 8b 8c 24 20
	02 00 00	 mov	 rcx, QWORD PTR ShaderPath$[rsp]
  00072	e8 00 00 00 00	 call	 D3DCompileFromFile
  00077	89 44 24 5c	 mov	 DWORD PTR Result$3[rsp], eax

; 325  :                                             "Vertex", "vs_5_0", Flags,
; 326  :                                             0, &VBlob, &Error);
; 327  :         if(FAILED(Result))

  0007b	83 7c 24 5c 00	 cmp	 DWORD PTR Result$3[rsp], 0
  00080	7d 38		 jge	 SHORT $LN2@Win32D3D11

; 328  :         {
; 329  :             const char *Message = ID3D10Blob_GetBufferPointer(Error);

  00082	48 8b 44 24 68	 mov	 rax, QWORD PTR Error$5[rsp]
  00087	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0008a	48 8b 4c 24 68	 mov	 rcx, QWORD PTR Error$5[rsp]
  0008f	ff 50 18	 call	 QWORD PTR [rax+24]
  00092	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR Message$7[rsp], rax

; 330  :             OutputDebugStringA(Message);

  0009a	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR Message$7[rsp]
  000a2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_OutputDebugStringA

; 331  :             Assert(0);

  000a8	33 c0		 xor	 eax, eax
  000aa	83 f8 01	 cmp	 eax, 1
  000ad	74 0b		 je	 SHORT $LN3@Win32D3D11
  000af	c7 04 25 00 00
	00 00 00 00 00
	00		 mov	 DWORD PTR ds:0, 0
$LN3@Win32D3D11:
$LN2@Win32D3D11:

; 332  :         }
; 333  :         
; 334  :         ID3DBlob *PBlob;
; 335  :         Result = D3DCompileFromFile(ShaderPath, 0, 0,

  000ba	48 8d 44 24 68	 lea	 rax, QWORD PTR Error$5[rsp]
  000bf	48 89 44 24 40	 mov	 QWORD PTR [rsp+64], rax
  000c4	48 8d 44 24 60	 lea	 rax, QWORD PTR PBlob$4[rsp]
  000c9	48 89 44 24 38	 mov	 QWORD PTR [rsp+56], rax
  000ce	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR [rsp+48], 0
  000d6	8b 44 24 58	 mov	 eax, DWORD PTR Flags$2[rsp]
  000da	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  000de	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG140076
  000e5	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000ea	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG140077
  000f1	45 33 c0	 xor	 r8d, r8d
  000f4	33 d2		 xor	 edx, edx
  000f6	48 8b 8c 24 20
	02 00 00	 mov	 rcx, QWORD PTR ShaderPath$[rsp]
  000fe	e8 00 00 00 00	 call	 D3DCompileFromFile
  00103	89 44 24 5c	 mov	 DWORD PTR Result$3[rsp], eax

; 336  :                                     "Pixel", "ps_5_0", Flags,
; 337  :                                     0, &PBlob, &Error);
; 338  :         if(FAILED(Result))

  00107	83 7c 24 5c 00	 cmp	 DWORD PTR Result$3[rsp], 0
  0010c	7d 38		 jge	 SHORT $LN4@Win32D3D11

; 339  :         {
; 340  :             const char *Message = ID3D10Blob_GetBufferPointer(Error);

  0010e	48 8b 44 24 68	 mov	 rax, QWORD PTR Error$5[rsp]
  00113	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00116	48 8b 4c 24 68	 mov	 rcx, QWORD PTR Error$5[rsp]
  0011b	ff 50 18	 call	 QWORD PTR [rax+24]
  0011e	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR Message$8[rsp], rax

; 341  :             OutputDebugStringA(Message);

  00126	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR Message$8[rsp]
  0012e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_OutputDebugStringA

; 342  :             Assert(0);

  00134	33 c0		 xor	 eax, eax
  00136	83 f8 01	 cmp	 eax, 1
  00139	74 0b		 je	 SHORT $LN5@Win32D3D11
  0013b	c7 04 25 00 00
	00 00 00 00 00
	00		 mov	 DWORD PTR ds:0, 0
$LN5@Win32D3D11:
$LN4@Win32D3D11:

; 343  :         }
; 344  :         
; 345  :         ID3D11Device_CreateVertexShader(State->Device, ID3D10Blob_GetBufferPointer(VBlob),

  00146	48 8b 84 24 18
	02 00 00	 mov	 rax, QWORD PTR Shader$[rsp]
  0014e	48 83 c0 08	 add	 rax, 8
  00152	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR tv137[rsp], rax
  0015a	48 8b 4c 24 50	 mov	 rcx, QWORD PTR VBlob$1[rsp]
  0015f	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00162	48 89 8c 24 98
	00 00 00	 mov	 QWORD PTR tv342[rsp], rcx
  0016a	48 8b 4c 24 50	 mov	 rcx, QWORD PTR VBlob$1[rsp]
  0016f	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR tv342[rsp]
  00177	ff 52 20	 call	 QWORD PTR [rdx+32]
  0017a	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR tv142[rsp], rax
  00182	48 8b 4c 24 50	 mov	 rcx, QWORD PTR VBlob$1[rsp]
  00187	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0018a	48 89 8c 24 a0
	00 00 00	 mov	 QWORD PTR tv341[rsp], rcx
  00192	48 8b 4c 24 50	 mov	 rcx, QWORD PTR VBlob$1[rsp]
  00197	48 8b 94 24 a0
	00 00 00	 mov	 rdx, QWORD PTR tv341[rsp]
  0019f	ff 52 18	 call	 QWORD PTR [rdx+24]
  001a2	48 8b 8c 24 10
	02 00 00	 mov	 rcx, QWORD PTR State$[rsp]
  001aa	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  001ad	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  001b0	48 89 8c 24 b8
	00 00 00	 mov	 QWORD PTR tv339[rsp], rcx
  001b8	48 8b 94 24 a8
	00 00 00	 mov	 rdx, QWORD PTR tv137[rsp]
  001c0	48 89 54 24 20	 mov	 QWORD PTR [rsp+32], rdx
  001c5	45 33 c9	 xor	 r9d, r9d
  001c8	48 8b 94 24 b0
	00 00 00	 mov	 rdx, QWORD PTR tv142[rsp]
  001d0	4c 8b c2	 mov	 r8, rdx
  001d3	48 8b d0	 mov	 rdx, rax
  001d6	48 8b 84 24 10
	02 00 00	 mov	 rax, QWORD PTR State$[rsp]
  001de	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  001e1	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR tv339[rsp]
  001e9	ff 50 60	 call	 QWORD PTR [rax+96]

; 346  :                                         ID3D10Blob_GetBufferSize(VBlob),
; 347  :                                         0, &Shader->VShader);
; 348  :         ID3D11Device_CreatePixelShader(State->Device, ID3D10Blob_GetBufferPointer(PBlob),

  001ec	48 8b 84 24 18
	02 00 00	 mov	 rax, QWORD PTR Shader$[rsp]
  001f4	48 83 c0 10	 add	 rax, 16
  001f8	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR tv155[rsp], rax
  00200	48 8b 4c 24 60	 mov	 rcx, QWORD PTR PBlob$4[rsp]
  00205	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00208	48 89 8c 24 c0
	00 00 00	 mov	 QWORD PTR tv338[rsp], rcx
  00210	48 8b 4c 24 60	 mov	 rcx, QWORD PTR PBlob$4[rsp]
  00215	48 8b 94 24 c0
	00 00 00	 mov	 rdx, QWORD PTR tv338[rsp]
  0021d	ff 52 20	 call	 QWORD PTR [rdx+32]
  00220	48 89 84 24 d8
	00 00 00	 mov	 QWORD PTR tv160[rsp], rax
  00228	48 8b 4c 24 60	 mov	 rcx, QWORD PTR PBlob$4[rsp]
  0022d	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00230	48 89 8c 24 c8
	00 00 00	 mov	 QWORD PTR tv337[rsp], rcx
  00238	48 8b 4c 24 60	 mov	 rcx, QWORD PTR PBlob$4[rsp]
  0023d	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR tv337[rsp]
  00245	ff 52 18	 call	 QWORD PTR [rdx+24]
  00248	48 8b 8c 24 10
	02 00 00	 mov	 rcx, QWORD PTR State$[rsp]
  00250	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00253	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00256	48 89 8c 24 e0
	00 00 00	 mov	 QWORD PTR tv335[rsp], rcx
  0025e	48 8b 94 24 d0
	00 00 00	 mov	 rdx, QWORD PTR tv155[rsp]
  00266	48 89 54 24 20	 mov	 QWORD PTR [rsp+32], rdx
  0026b	45 33 c9	 xor	 r9d, r9d
  0026e	48 8b 94 24 d8
	00 00 00	 mov	 rdx, QWORD PTR tv160[rsp]
  00276	4c 8b c2	 mov	 r8, rdx
  00279	48 8b d0	 mov	 rdx, rax
  0027c	48 8b 84 24 10
	02 00 00	 mov	 rax, QWORD PTR State$[rsp]
  00284	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00287	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR tv335[rsp]
  0028f	ff 50 78	 call	 QWORD PTR [rax+120]

; 349  :                                        ID3D10Blob_GetBufferSize(PBlob),
; 350  :                                        0, &Shader->PShader);
; 351  :         
; 352  :         if(Is2D)

  00292	83 bc 24 28 02
	00 00 00	 cmp	 DWORD PTR Is2D$[rsp], 0
  0029a	0f 84 5a 01 00
	00		 je	 $LN6@Win32D3D11

; 353  :         {
; 354  :             D3D11_INPUT_ELEMENT_DESC Desc[] =

  002a0	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG140083
  002a7	48 89 84 24 40
	01 00 00	 mov	 QWORD PTR Desc$9[rsp], rax
  002af	c7 84 24 48 01
	00 00 00 00 00
	00		 mov	 DWORD PTR Desc$9[rsp+8], 0
  002ba	c7 84 24 4c 01
	00 00 10 00 00
	00		 mov	 DWORD PTR Desc$9[rsp+12], 16
  002c5	c7 84 24 50 01
	00 00 00 00 00
	00		 mov	 DWORD PTR Desc$9[rsp+16], 0
  002d0	c7 84 24 54 01
	00 00 00 00 00
	00		 mov	 DWORD PTR Desc$9[rsp+20], 0
  002db	c7 84 24 58 01
	00 00 00 00 00
	00		 mov	 DWORD PTR Desc$9[rsp+24], 0
  002e6	c7 84 24 5c 01
	00 00 00 00 00
	00		 mov	 DWORD PTR Desc$9[rsp+28], 0
  002f1	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG140085
  002f8	48 89 84 24 60
	01 00 00	 mov	 QWORD PTR Desc$9[rsp+32], rax
  00300	c7 84 24 68 01
	00 00 00 00 00
	00		 mov	 DWORD PTR Desc$9[rsp+40], 0
  0030b	c7 84 24 6c 01
	00 00 02 00 00
	00		 mov	 DWORD PTR Desc$9[rsp+44], 2
  00316	c7 84 24 70 01
	00 00 00 00 00
	00		 mov	 DWORD PTR Desc$9[rsp+48], 0
  00321	c7 84 24 74 01
	00 00 08 00 00
	00		 mov	 DWORD PTR Desc$9[rsp+52], 8
  0032c	c7 84 24 78 01
	00 00 00 00 00
	00		 mov	 DWORD PTR Desc$9[rsp+56], 0
  00337	c7 84 24 7c 01
	00 00 00 00 00
	00		 mov	 DWORD PTR Desc$9[rsp+60], 0

; 355  :             {
; 356  :                 { "POSITION", 0, DXGI_FORMAT_R32G32_FLOAT,    0, offsetof(ui_vertex, Position), D3D11_INPUT_PER_VERTEX_DATA, 0 },
; 357  :                 { "UV",    0, DXGI_FORMAT_R32G32B32A32_FLOAT, 0, offsetof(ui_vertex, UV),       D3D11_INPUT_PER_VERTEX_DATA, 0 }
; 358  :             };
; 359  :             
; 360  :             ID3D11Device_CreateInputLayout(State->Device, Desc, ArrayCount(Desc),

  00342	48 8b 84 24 18
	02 00 00	 mov	 rax, QWORD PTR Shader$[rsp]
  0034a	48 83 c0 18	 add	 rax, 24
  0034e	48 89 84 24 f8
	00 00 00	 mov	 QWORD PTR tv174[rsp], rax
  00356	48 8b 4c 24 50	 mov	 rcx, QWORD PTR VBlob$1[rsp]
  0035b	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0035e	48 89 8c 24 e8
	00 00 00	 mov	 QWORD PTR tv334[rsp], rcx
  00366	48 8b 4c 24 50	 mov	 rcx, QWORD PTR VBlob$1[rsp]
  0036b	48 8b 94 24 e8
	00 00 00	 mov	 rdx, QWORD PTR tv334[rsp]
  00373	ff 52 20	 call	 QWORD PTR [rdx+32]
  00376	48 89 84 24 00
	01 00 00	 mov	 QWORD PTR tv178[rsp], rax
  0037e	48 8b 4c 24 50	 mov	 rcx, QWORD PTR VBlob$1[rsp]
  00383	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00386	48 89 8c 24 f0
	00 00 00	 mov	 QWORD PTR tv333[rsp], rcx
  0038e	48 8b 4c 24 50	 mov	 rcx, QWORD PTR VBlob$1[rsp]
  00393	48 8b 94 24 f0
	00 00 00	 mov	 rdx, QWORD PTR tv333[rsp]
  0039b	ff 52 18	 call	 QWORD PTR [rdx+24]
  0039e	48 8b 8c 24 10
	02 00 00	 mov	 rcx, QWORD PTR State$[rsp]
  003a6	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  003a9	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  003ac	48 89 8c 24 08
	01 00 00	 mov	 QWORD PTR tv331[rsp], rcx
  003b4	48 8b 94 24 f8
	00 00 00	 mov	 rdx, QWORD PTR tv174[rsp]
  003bc	48 89 54 24 28	 mov	 QWORD PTR [rsp+40], rdx
  003c1	48 8b 94 24 00
	01 00 00	 mov	 rdx, QWORD PTR tv178[rsp]
  003c9	48 89 54 24 20	 mov	 QWORD PTR [rsp+32], rdx
  003ce	4c 8b c8	 mov	 r9, rax
  003d1	41 b8 02 00 00
	00		 mov	 r8d, 2
  003d7	48 8d 94 24 40
	01 00 00	 lea	 rdx, QWORD PTR Desc$9[rsp]
  003df	48 8b 84 24 10
	02 00 00	 mov	 rax, QWORD PTR State$[rsp]
  003e7	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  003ea	48 8b 84 24 08
	01 00 00	 mov	 rax, QWORD PTR tv331[rsp]
  003f2	ff 50 58	 call	 QWORD PTR [rax+88]

; 361  :                                            ID3D10Blob_GetBufferPointer(VBlob),
; 362  :                                            ID3D10Blob_GetBufferSize(VBlob),
; 363  :                                            &Shader->Layout);
; 364  :         }

  003f5	e9 f7 01 00 00	 jmp	 $LN7@Win32D3D11
$LN6@Win32D3D11:

; 365  :         else
; 366  :         {
; 367  :             D3D11_INPUT_ELEMENT_DESC Desc[] =

  003fa	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG140087
  00401	48 89 84 24 80
	01 00 00	 mov	 QWORD PTR Desc$10[rsp], rax
  00409	c7 84 24 88 01
	00 00 00 00 00
	00		 mov	 DWORD PTR Desc$10[rsp+8], 0
  00414	c7 84 24 8c 01
	00 00 06 00 00
	00		 mov	 DWORD PTR Desc$10[rsp+12], 6
  0041f	c7 84 24 90 01
	00 00 00 00 00
	00		 mov	 DWORD PTR Desc$10[rsp+16], 0
  0042a	c7 84 24 94 01
	00 00 00 00 00
	00		 mov	 DWORD PTR Desc$10[rsp+20], 0
  00435	c7 84 24 98 01
	00 00 00 00 00
	00		 mov	 DWORD PTR Desc$10[rsp+24], 0
  00440	c7 84 24 9c 01
	00 00 00 00 00
	00		 mov	 DWORD PTR Desc$10[rsp+28], 0
  0044b	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG140089
  00452	48 89 84 24 a0
	01 00 00	 mov	 QWORD PTR Desc$10[rsp+32], rax
  0045a	c7 84 24 a8 01
	00 00 00 00 00
	00		 mov	 DWORD PTR Desc$10[rsp+40], 0
  00465	c7 84 24 ac 01
	00 00 10 00 00
	00		 mov	 DWORD PTR Desc$10[rsp+44], 16
  00470	c7 84 24 b0 01
	00 00 00 00 00
	00		 mov	 DWORD PTR Desc$10[rsp+48], 0
  0047b	c7 84 24 b4 01
	00 00 0c 00 00
	00		 mov	 DWORD PTR Desc$10[rsp+52], 12
  00486	c7 84 24 b8 01
	00 00 00 00 00
	00		 mov	 DWORD PTR Desc$10[rsp+56], 0
  00491	c7 84 24 bc 01
	00 00 00 00 00
	00		 mov	 DWORD PTR Desc$10[rsp+60], 0
  0049c	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG140091
  004a3	48 89 84 24 c0
	01 00 00	 mov	 QWORD PTR Desc$10[rsp+64], rax
  004ab	c7 84 24 c8 01
	00 00 00 00 00
	00		 mov	 DWORD PTR Desc$10[rsp+72], 0
  004b6	c7 84 24 cc 01
	00 00 06 00 00
	00		 mov	 DWORD PTR Desc$10[rsp+76], 6
  004c1	c7 84 24 d0 01
	00 00 00 00 00
	00		 mov	 DWORD PTR Desc$10[rsp+80], 0
  004cc	c7 84 24 d4 01
	00 00 14 00 00
	00		 mov	 DWORD PTR Desc$10[rsp+84], 20
  004d7	c7 84 24 d8 01
	00 00 00 00 00
	00		 mov	 DWORD PTR Desc$10[rsp+88], 0
  004e2	c7 84 24 dc 01
	00 00 00 00 00
	00		 mov	 DWORD PTR Desc$10[rsp+92], 0
  004ed	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG140093
  004f4	48 89 84 24 e0
	01 00 00	 mov	 QWORD PTR Desc$10[rsp+96], rax
  004fc	c7 84 24 e8 01
	00 00 00 00 00
	00		 mov	 DWORD PTR Desc$10[rsp+104], 0
  00507	c7 84 24 ec 01
	00 00 02 00 00
	00		 mov	 DWORD PTR Desc$10[rsp+108], 2
  00512	c7 84 24 f0 01
	00 00 00 00 00
	00		 mov	 DWORD PTR Desc$10[rsp+112], 0
  0051d	c7 84 24 f4 01
	00 00 20 00 00
	00		 mov	 DWORD PTR Desc$10[rsp+116], 32 ; 00000020H
  00528	c7 84 24 f8 01
	00 00 00 00 00
	00		 mov	 DWORD PTR Desc$10[rsp+120], 0
  00533	c7 84 24 fc 01
	00 00 00 00 00
	00		 mov	 DWORD PTR Desc$10[rsp+124], 0

; 368  :             {
; 369  :                 { "POSITION", 0, DXGI_FORMAT_R32G32B32_FLOAT,    0, offsetof(vertex, Position), D3D11_INPUT_PER_VERTEX_DATA, 0 },
; 370  :                 { "TEXCOORD", 0, DXGI_FORMAT_R32G32_FLOAT,       0, offsetof(vertex, UV),       D3D11_INPUT_PER_VERTEX_DATA, 0 },
; 371  :                 { "NORMAL",   0, DXGI_FORMAT_R32G32B32_FLOAT,    0, offsetof(vertex, Normal),   D3D11_INPUT_PER_VERTEX_DATA, 0 },
; 372  :                 { "COLOR",    0, DXGI_FORMAT_R32G32B32A32_FLOAT, 0, offsetof(vertex, Color),    D3D11_INPUT_PER_VERTEX_DATA, 0 }
; 373  :             };
; 374  :             
; 375  :             ID3D11Device_CreateInputLayout(State->Device, Desc, ArrayCount(Desc),

  0053e	48 8b 84 24 18
	02 00 00	 mov	 rax, QWORD PTR Shader$[rsp]
  00546	48 83 c0 18	 add	 rax, 24
  0054a	48 89 84 24 20
	01 00 00	 mov	 QWORD PTR tv257[rsp], rax
  00552	48 8b 4c 24 50	 mov	 rcx, QWORD PTR VBlob$1[rsp]
  00557	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0055a	48 89 8c 24 10
	01 00 00	 mov	 QWORD PTR tv330[rsp], rcx
  00562	48 8b 4c 24 50	 mov	 rcx, QWORD PTR VBlob$1[rsp]
  00567	48 8b 94 24 10
	01 00 00	 mov	 rdx, QWORD PTR tv330[rsp]
  0056f	ff 52 20	 call	 QWORD PTR [rdx+32]
  00572	48 89 84 24 28
	01 00 00	 mov	 QWORD PTR tv261[rsp], rax
  0057a	48 8b 4c 24 50	 mov	 rcx, QWORD PTR VBlob$1[rsp]
  0057f	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00582	48 89 8c 24 18
	01 00 00	 mov	 QWORD PTR tv329[rsp], rcx
  0058a	48 8b 4c 24 50	 mov	 rcx, QWORD PTR VBlob$1[rsp]
  0058f	48 8b 94 24 18
	01 00 00	 mov	 rdx, QWORD PTR tv329[rsp]
  00597	ff 52 18	 call	 QWORD PTR [rdx+24]
  0059a	48 8b 8c 24 10
	02 00 00	 mov	 rcx, QWORD PTR State$[rsp]
  005a2	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  005a5	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  005a8	48 89 8c 24 30
	01 00 00	 mov	 QWORD PTR tv327[rsp], rcx
  005b0	48 8b 94 24 20
	01 00 00	 mov	 rdx, QWORD PTR tv257[rsp]
  005b8	48 89 54 24 28	 mov	 QWORD PTR [rsp+40], rdx
  005bd	48 8b 94 24 28
	01 00 00	 mov	 rdx, QWORD PTR tv261[rsp]
  005c5	48 89 54 24 20	 mov	 QWORD PTR [rsp+32], rdx
  005ca	4c 8b c8	 mov	 r9, rax
  005cd	41 b8 04 00 00
	00		 mov	 r8d, 4
  005d3	48 8d 94 24 80
	01 00 00	 lea	 rdx, QWORD PTR Desc$10[rsp]
  005db	48 8b 84 24 10
	02 00 00	 mov	 rax, QWORD PTR State$[rsp]
  005e3	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  005e6	48 8b 84 24 30
	01 00 00	 mov	 rax, QWORD PTR tv327[rsp]
  005ee	ff 50 58	 call	 QWORD PTR [rax+88]
$LN7@Win32D3D11:

; 376  :                                            ID3D10Blob_GetBufferPointer(VBlob),
; 377  :                                            ID3D10Blob_GetBufferSize(VBlob),
; 378  :                                            &Shader->Layout);
; 379  :         }
; 380  :         
; 381  :         ID3D10Blob_Release(PBlob);

  005f1	48 8b 44 24 60	 mov	 rax, QWORD PTR PBlob$4[rsp]
  005f6	48 8b 00	 mov	 rax, QWORD PTR [rax]
  005f9	48 8b 4c 24 60	 mov	 rcx, QWORD PTR PBlob$4[rsp]
  005fe	ff 50 10	 call	 QWORD PTR [rax+16]

; 382  :         ID3D10Blob_Release(VBlob);

  00601	48 8b 44 24 50	 mov	 rax, QWORD PTR VBlob$1[rsp]
  00606	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00609	48 8b 4c 24 50	 mov	 rcx, QWORD PTR VBlob$1[rsp]
  0060e	ff 50 10	 call	 QWORD PTR [rax+16]

; 383  :     }
; 384  :     
; 385  :     {
; 386  :         D3D11_BUFFER_DESC Desc =

  00611	ba 10 00 00 00	 mov	 edx, 16
  00616	b9 40 01 00 00	 mov	 ecx, 320		; 00000140H
  0061b	e8 00 00 00 00	 call	 AlignTo
  00620	89 44 24 70	 mov	 DWORD PTR Desc$6[rsp], eax
  00624	c7 44 24 74 02
	00 00 00	 mov	 DWORD PTR Desc$6[rsp+4], 2
  0062c	c7 44 24 78 04
	00 00 00	 mov	 DWORD PTR Desc$6[rsp+8], 4
  00634	c7 44 24 7c 00
	00 01 00	 mov	 DWORD PTR Desc$6[rsp+12], 65536 ; 00010000H
  0063c	c7 84 24 80 00
	00 00 00 00 00
	00		 mov	 DWORD PTR Desc$6[rsp+16], 0
  00647	c7 84 24 84 00
	00 00 00 00 00
	00		 mov	 DWORD PTR Desc$6[rsp+20], 0

; 387  :         {
; 388  :             .ByteWidth = (UINT)AlignTo(sizeof(shader_constants), 16),
; 389  :             .Usage = D3D11_USAGE_DYNAMIC,
; 390  :             .BindFlags = D3D11_BIND_CONSTANT_BUFFER,
; 391  :             .CPUAccessFlags = D3D11_CPU_ACCESS_WRITE
; 392  :         };
; 393  :         ID3D11Device_CreateBuffer(State->Device, &Desc, 0, &Shader->UBuffer);

  00652	48 8b 84 24 18
	02 00 00	 mov	 rax, QWORD PTR Shader$[rsp]
  0065a	48 8b 8c 24 10
	02 00 00	 mov	 rcx, QWORD PTR State$[rsp]
  00662	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00665	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00668	48 89 8c 24 38
	01 00 00	 mov	 QWORD PTR tv285[rsp], rcx
  00670	4c 8b c8	 mov	 r9, rax
  00673	45 33 c0	 xor	 r8d, r8d
  00676	48 8d 54 24 70	 lea	 rdx, QWORD PTR Desc$6[rsp]
  0067b	48 8b 84 24 10
	02 00 00	 mov	 rax, QWORD PTR State$[rsp]
  00683	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00686	48 8b 84 24 38
	01 00 00	 mov	 rax, QWORD PTR tv285[rsp]
  0068e	ff 50 18	 call	 QWORD PTR [rax+24]

; 394  :     }
; 395  : }

  00691	48 81 c4 08 02
	00 00		 add	 rsp, 520		; 00000208H
  00698	c3		 ret	 0
Win32D3D11CreateShader ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File W:\new-horizons\code\win32_d3d11.c
_TEXT	SEGMENT
tv91 = 32
tv83 = 40
Initial$1 = 48
Initial$2 = 64
Desc$3 = 80
Desc$4 = 104
State$ = 144
Mesh$ = 152
VertexData$ = 160
VertexCount$ = 168
IndexData$ = 176
IndexCount$ = 184
Win32D3D11CreateMesh PROC

; 279  : {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 81 ec 88 00
	00 00		 sub	 rsp, 136		; 00000088H

; 280  :     Mesh->IndexCount = IndexCount;

  0001b	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR Mesh$[rsp]
  00023	8b 8c 24 b8 00
	00 00		 mov	 ecx, DWORD PTR IndexCount$[rsp]
  0002a	89 48 10	 mov	 DWORD PTR [rax+16], ecx

; 281  :     
; 282  :     {
; 283  :         D3D11_BUFFER_DESC Desc =

  0002d	48 63 84 24 a8
	00 00 00	 movsxd	 rax, DWORD PTR VertexCount$[rsp]
  00035	48 6b c0 30	 imul	 rax, rax, 48		; 00000030H
  00039	89 44 24 50	 mov	 DWORD PTR Desc$3[rsp], eax
  0003d	c7 44 24 54 01
	00 00 00	 mov	 DWORD PTR Desc$3[rsp+4], 1
  00045	c7 44 24 58 01
	00 00 00	 mov	 DWORD PTR Desc$3[rsp+8], 1
  0004d	c7 44 24 5c 00
	00 00 00	 mov	 DWORD PTR Desc$3[rsp+12], 0
  00055	c7 44 24 60 00
	00 00 00	 mov	 DWORD PTR Desc$3[rsp+16], 0
  0005d	c7 44 24 64 00
	00 00 00	 mov	 DWORD PTR Desc$3[rsp+20], 0

; 284  :         {
; 285  :             .ByteWidth = sizeof(vertex) * VertexCount,
; 286  :             .Usage = D3D11_USAGE_IMMUTABLE,
; 287  :             .BindFlags = D3D11_BIND_VERTEX_BUFFER
; 288  :         };
; 289  :         
; 290  :         D3D11_SUBRESOURCE_DATA Initial = { .pSysMem = VertexData };

  00065	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR VertexData$[rsp]
  0006d	48 89 44 24 30	 mov	 QWORD PTR Initial$1[rsp], rax
  00072	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR Initial$1[rsp+8], 0
  0007a	c7 44 24 3c 00
	00 00 00	 mov	 DWORD PTR Initial$1[rsp+12], 0

; 291  :         ID3D11Device_CreateBuffer(State->Device, &Desc, &Initial, &Mesh->VBuffer);

  00082	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR Mesh$[rsp]
  0008a	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR State$[rsp]
  00092	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00095	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00098	48 89 4c 24 20	 mov	 QWORD PTR tv91[rsp], rcx
  0009d	4c 8b c8	 mov	 r9, rax
  000a0	4c 8d 44 24 30	 lea	 r8, QWORD PTR Initial$1[rsp]
  000a5	48 8d 54 24 50	 lea	 rdx, QWORD PTR Desc$3[rsp]
  000aa	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR State$[rsp]
  000b2	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  000b5	48 8b 44 24 20	 mov	 rax, QWORD PTR tv91[rsp]
  000ba	ff 50 18	 call	 QWORD PTR [rax+24]

; 292  :     }
; 293  :     
; 294  :     {
; 295  :         D3D11_BUFFER_DESC Desc =

  000bd	48 63 84 24 b8
	00 00 00	 movsxd	 rax, DWORD PTR IndexCount$[rsp]
  000c5	48 c1 e0 02	 shl	 rax, 2
  000c9	89 44 24 68	 mov	 DWORD PTR Desc$4[rsp], eax
  000cd	c7 44 24 6c 01
	00 00 00	 mov	 DWORD PTR Desc$4[rsp+4], 1
  000d5	c7 44 24 70 02
	00 00 00	 mov	 DWORD PTR Desc$4[rsp+8], 2
  000dd	c7 44 24 74 00
	00 00 00	 mov	 DWORD PTR Desc$4[rsp+12], 0
  000e5	c7 44 24 78 00
	00 00 00	 mov	 DWORD PTR Desc$4[rsp+16], 0
  000ed	c7 44 24 7c 00
	00 00 00	 mov	 DWORD PTR Desc$4[rsp+20], 0

; 296  :         {
; 297  :             .ByteWidth = sizeof(u32) * IndexCount,
; 298  :             .Usage = D3D11_USAGE_IMMUTABLE,
; 299  :             .BindFlags = D3D11_BIND_INDEX_BUFFER
; 300  :         };
; 301  :         
; 302  :         D3D11_SUBRESOURCE_DATA Initial = { .pSysMem = IndexData };

  000f5	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR IndexData$[rsp]
  000fd	48 89 44 24 40	 mov	 QWORD PTR Initial$2[rsp], rax
  00102	c7 44 24 48 00
	00 00 00	 mov	 DWORD PTR Initial$2[rsp+8], 0
  0010a	c7 44 24 4c 00
	00 00 00	 mov	 DWORD PTR Initial$2[rsp+12], 0

; 303  :         ID3D11Device_CreateBuffer(State->Device, &Desc, &Initial, &Mesh->IBuffer);

  00112	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR Mesh$[rsp]
  0011a	48 83 c0 08	 add	 rax, 8
  0011e	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR State$[rsp]
  00126	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00129	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0012c	48 89 4c 24 28	 mov	 QWORD PTR tv83[rsp], rcx
  00131	4c 8b c8	 mov	 r9, rax
  00134	4c 8d 44 24 40	 lea	 r8, QWORD PTR Initial$2[rsp]
  00139	48 8d 54 24 68	 lea	 rdx, QWORD PTR Desc$4[rsp]
  0013e	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR State$[rsp]
  00146	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00149	48 8b 44 24 28	 mov	 rax, QWORD PTR tv83[rsp]
  0014e	ff 50 18	 call	 QWORD PTR [rax+24]

; 304  :     }
; 305  : }

  00151	48 81 c4 88 00
	00 00		 add	 rsp, 136		; 00000088H
  00158	c3		 ret	 0
Win32D3D11CreateMesh ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File W:\new-horizons\code\win32_d3d11.c
_TEXT	SEGMENT
Tex$ = 32
tv88 = 40
ResourceData$ = 48
Desc$ = 64
State$ = 128
Texture$ = 136
Data$ = 144
Width$ = 152
Height$ = 160
Win32D3D11CreateTexture PROC

; 250  : {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 78	 sub	 rsp, 120		; 00000078H

; 251  :     D3D11_TEXTURE2D_DESC Desc =

  00018	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR Width$[rsp]
  0001f	89 44 24 40	 mov	 DWORD PTR Desc$[rsp], eax
  00023	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR Height$[rsp]
  0002a	89 44 24 44	 mov	 DWORD PTR Desc$[rsp+4], eax
  0002e	c7 44 24 48 01
	00 00 00	 mov	 DWORD PTR Desc$[rsp+8], 1
  00036	c7 44 24 4c 01
	00 00 00	 mov	 DWORD PTR Desc$[rsp+12], 1
  0003e	c7 44 24 50 1c
	00 00 00	 mov	 DWORD PTR Desc$[rsp+16], 28
  00046	c7 44 24 54 01
	00 00 00	 mov	 DWORD PTR Desc$[rsp+20], 1
  0004e	c7 44 24 58 00
	00 00 00	 mov	 DWORD PTR Desc$[rsp+24], 0
  00056	c7 44 24 5c 01
	00 00 00	 mov	 DWORD PTR Desc$[rsp+28], 1
  0005e	c7 44 24 60 08
	00 00 00	 mov	 DWORD PTR Desc$[rsp+32], 8
  00066	c7 44 24 64 00
	00 00 00	 mov	 DWORD PTR Desc$[rsp+36], 0
  0006e	c7 44 24 68 00
	00 00 00	 mov	 DWORD PTR Desc$[rsp+40], 0

; 252  :     {
; 253  :         .Width = Width,
; 254  :         .Height = Height,
; 255  :         .MipLevels = 1,
; 256  :         .ArraySize = 1,
; 257  :         .Format = DXGI_FORMAT_R8G8B8A8_UNORM,
; 258  :         .SampleDesc.Count = 1,
; 259  :         .Usage = D3D11_USAGE_IMMUTABLE,
; 260  :         .BindFlags = D3D11_BIND_SHADER_RESOURCE
; 261  :     };
; 262  :     
; 263  :     D3D11_SUBRESOURCE_DATA ResourceData = 

  00076	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR Data$[rsp]
  0007e	48 89 44 24 30	 mov	 QWORD PTR ResourceData$[rsp], rax
  00083	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR Width$[rsp]
  0008a	48 c1 e0 02	 shl	 rax, 2
  0008e	89 44 24 38	 mov	 DWORD PTR ResourceData$[rsp+8], eax
  00092	c7 44 24 3c 00
	00 00 00	 mov	 DWORD PTR ResourceData$[rsp+12], 0

; 264  :     {
; 265  :         .pSysMem = Data,
; 266  :         .SysMemPitch = Width * sizeof(u32)
; 267  :     };
; 268  :     
; 269  :     ID3D11Texture2D *Tex;
; 270  :     ID3D11Device_CreateTexture2D(State->Device, &Desc, &ResourceData, &Tex);

  0009a	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR State$[rsp]
  000a2	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000a5	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000a8	4c 8d 4c 24 20	 lea	 r9, QWORD PTR Tex$[rsp]
  000ad	4c 8d 44 24 30	 lea	 r8, QWORD PTR ResourceData$[rsp]
  000b2	48 8d 54 24 40	 lea	 rdx, QWORD PTR Desc$[rsp]
  000b7	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR State$[rsp]
  000bf	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000c2	ff 50 28	 call	 QWORD PTR [rax+40]

; 271  :     ID3D11Device_CreateShaderResourceView(State->Device, (ID3D11Resource *)Tex, 0, &Texture->View);

  000c5	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR Texture$[rsp]
  000cd	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR State$[rsp]
  000d5	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000d8	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000db	48 89 4c 24 28	 mov	 QWORD PTR tv88[rsp], rcx
  000e0	4c 8b c8	 mov	 r9, rax
  000e3	45 33 c0	 xor	 r8d, r8d
  000e6	48 8b 54 24 20	 mov	 rdx, QWORD PTR Tex$[rsp]
  000eb	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR State$[rsp]
  000f3	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  000f6	48 8b 44 24 28	 mov	 rax, QWORD PTR tv88[rsp]
  000fb	ff 50 38	 call	 QWORD PTR [rax+56]

; 272  :     ID3D11Texture2D_Release(Tex);

  000fe	48 8b 44 24 20	 mov	 rax, QWORD PTR Tex$[rsp]
  00103	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00106	48 8b 4c 24 20	 mov	 rcx, QWORD PTR Tex$[rsp]
  0010b	ff 50 10	 call	 QWORD PTR [rax+16]

; 273  : }

  0010e	48 83 c4 78	 add	 rsp, 120		; 00000078H
  00112	c3		 ret	 0
Win32D3D11CreateTexture ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File W:\new-horizons\code\win32_d3d11.c
_TEXT	SEGMENT
Result$ = 32
SwapChain$ = 64
VSync$ = 72
Win32D3D11EndFrame PROC

; 232  : {

  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 233  :     HRESULT Result = IDXGISwapChain1_Present(SwapChain, VSync, 0);

  0000d	48 8b 44 24 40	 mov	 rax, QWORD PTR SwapChain$[rsp]
  00012	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00015	45 33 c0	 xor	 r8d, r8d
  00018	8b 54 24 48	 mov	 edx, DWORD PTR VSync$[rsp]
  0001c	48 8b 4c 24 40	 mov	 rcx, QWORD PTR SwapChain$[rsp]
  00021	ff 50 40	 call	 QWORD PTR [rax+64]
  00024	89 44 24 20	 mov	 DWORD PTR Result$[rsp], eax

; 234  :     if(Result == DXGI_STATUS_OCCLUDED)

  00028	81 7c 24 20 01
	00 7a 08	 cmp	 DWORD PTR Result$[rsp], 142213121 ; 087a0001H
  00030	75 14		 jne	 SHORT $LN2@Win32D3D11

; 235  :     {
; 236  :         if(VSync)

  00032	83 7c 24 48 00	 cmp	 DWORD PTR VSync$[rsp], 0
  00037	74 0b		 je	 SHORT $LN4@Win32D3D11

; 237  :         {
; 238  :             Sleep(10);

  00039	b9 0a 00 00 00	 mov	 ecx, 10
  0003e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_Sleep
$LN4@Win32D3D11:

; 239  :         }
; 240  :     }

  00044	eb 12		 jmp	 SHORT $LN3@Win32D3D11
$LN2@Win32D3D11:

; 241  :     else
; 242  :     {
; 243  :         AssertHR(Result);

  00046	83 7c 24 20 00	 cmp	 DWORD PTR Result$[rsp], 0
  0004b	7d 0b		 jge	 SHORT $LN5@Win32D3D11
  0004d	c7 04 25 00 00
	00 00 00 00 00
	00		 mov	 DWORD PTR ds:0, 0
$LN5@Win32D3D11:
$LN3@Win32D3D11:

; 244  :     }
; 245  : }

  00058	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0005c	c3		 ret	 0
Win32D3D11EndFrame ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File W:\new-horizons\code\win32_d3d11.c
_TEXT	SEGMENT
Stride$1 = 48
Offset$2 = 52
MapSize$3 = 56
tv237 = 64
tv233 = 72
tv229 = 80
Mapped$4 = 88
State$ = 144
WindowDimension$ = 152
Mesh$ = 160
Shader$ = 168
Texture$ = 176
Constants$ = 184
Is2D$ = 192
Win32D3D11RenderMesh PROC

; 189  : {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	56		 push	 rsi
  00015	57		 push	 rdi
  00016	48 83 ec 78	 sub	 rsp, 120		; 00000078H

; 190  :     if(State->RTView)

  0001a	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR State$[rsp]
  00022	48 83 78 40 00	 cmp	 QWORD PTR [rax+64], 0
  00027	0f 84 2e 03 00
	00		 je	 $LN2@Win32D3D11

; 191  :     {
; 192  :         memory_index MapSize;
; 193  :         UINT Stride;
; 194  :         if(Is2D)

  0002d	83 bc 24 c0 00
	00 00 00	 cmp	 DWORD PTR Is2D$[rsp], 0
  00035	74 70		 je	 SHORT $LN3@Win32D3D11

; 195  :         {
; 196  :             ID3D11DeviceContext_RSSetState(State->Context, State->NoCullRasterizerState);

  00037	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR State$[rsp]
  0003f	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00043	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00046	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR State$[rsp]
  0004e	48 8b 51 20	 mov	 rdx, QWORD PTR [rcx+32]
  00052	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR State$[rsp]
  0005a	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  0005e	ff 90 58 01 00
	00		 call	 QWORD PTR [rax+344]

; 197  :             ID3D11DeviceContext_OMSetDepthStencilState(State->Context, State->DepthState, 0);

  00064	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR State$[rsp]
  0006c	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00070	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00073	45 33 c0	 xor	 r8d, r8d
  00076	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR State$[rsp]
  0007e	48 8b 51 28	 mov	 rdx, QWORD PTR [rcx+40]
  00082	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR State$[rsp]
  0008a	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  0008e	ff 90 20 01 00
	00		 call	 QWORD PTR [rax+288]

; 198  :             MapSize = sizeof(ui_shader_constants);

  00094	48 c7 44 24 38
	54 00 00 00	 mov	 QWORD PTR MapSize$3[rsp], 84 ; 00000054H

; 199  :             Stride = sizeof(ui_vertex);

  0009d	c7 44 24 30 10
	00 00 00	 mov	 DWORD PTR Stride$1[rsp], 16

; 200  :         }

  000a5	eb 6e		 jmp	 SHORT $LN4@Win32D3D11
$LN3@Win32D3D11:

; 201  :         else
; 202  :         {
; 203  :             ID3D11DeviceContext_RSSetState(State->Context, State->RasterizerState);

  000a7	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR State$[rsp]
  000af	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  000b3	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000b6	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR State$[rsp]
  000be	48 8b 51 18	 mov	 rdx, QWORD PTR [rcx+24]
  000c2	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR State$[rsp]
  000ca	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  000ce	ff 90 58 01 00
	00		 call	 QWORD PTR [rax+344]

; 204  :             ID3D11DeviceContext_OMSetDepthStencilState(State->Context, State->DepthState, 0);

  000d4	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR State$[rsp]
  000dc	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  000e0	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000e3	45 33 c0	 xor	 r8d, r8d
  000e6	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR State$[rsp]
  000ee	48 8b 51 28	 mov	 rdx, QWORD PTR [rcx+40]
  000f2	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR State$[rsp]
  000fa	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  000fe	ff 90 20 01 00
	00		 call	 QWORD PTR [rax+288]

; 205  :             MapSize = sizeof(shader_constants);

  00104	48 c7 44 24 38
	40 01 00 00	 mov	 QWORD PTR MapSize$3[rsp], 320 ; 00000140H

; 206  :             Stride = sizeof(vertex);

  0010d	c7 44 24 30 30
	00 00 00	 mov	 DWORD PTR Stride$1[rsp], 48 ; 00000030H
$LN4@Win32D3D11:

; 207  :         }
; 208  :         
; 209  :         D3D11_MAPPED_SUBRESOURCE Mapped;
; 210  :         ID3D11DeviceContext_Map(State->Context, (ID3D11Resource *)Shader->UBuffer,

  00115	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR State$[rsp]
  0011d	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00121	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00124	48 8d 4c 24 58	 lea	 rcx, QWORD PTR Mapped$4[rsp]
  00129	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0012e	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR [rsp+32], 0
  00136	41 b9 04 00 00
	00		 mov	 r9d, 4
  0013c	45 33 c0	 xor	 r8d, r8d
  0013f	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR Shader$[rsp]
  00147	48 8b 11	 mov	 rdx, QWORD PTR [rcx]
  0014a	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR State$[rsp]
  00152	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  00156	ff 50 70	 call	 QWORD PTR [rax+112]

; 211  :                                 0, D3D11_MAP_WRITE_DISCARD, 0, &Mapped);
; 212  :         memcpy(Mapped.pData, Constants, MapSize);

  00159	48 8b 7c 24 58	 mov	 rdi, QWORD PTR Mapped$4[rsp]
  0015e	48 8b b4 24 b8
	00 00 00	 mov	 rsi, QWORD PTR Constants$[rsp]
  00166	48 8b 4c 24 38	 mov	 rcx, QWORD PTR MapSize$3[rsp]
  0016b	f3 a4		 rep movsb

; 213  :         ID3D11DeviceContext_Unmap(State->Context, (ID3D11Resource *)Shader->UBuffer, 0);

  0016d	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR State$[rsp]
  00175	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00179	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0017c	45 33 c0	 xor	 r8d, r8d
  0017f	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR Shader$[rsp]
  00187	48 8b 11	 mov	 rdx, QWORD PTR [rcx]
  0018a	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR State$[rsp]
  00192	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  00196	ff 50 78	 call	 QWORD PTR [rax+120]

; 214  :         
; 215  :         ID3D11DeviceContext_IASetInputLayout(State->Context, Shader->Layout);

  00199	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR State$[rsp]
  001a1	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  001a5	48 8b 00	 mov	 rax, QWORD PTR [rax]
  001a8	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR Shader$[rsp]
  001b0	48 8b 51 18	 mov	 rdx, QWORD PTR [rcx+24]
  001b4	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR State$[rsp]
  001bc	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  001c0	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]

; 216  :         UINT Offset = 0;

  001c6	c7 44 24 34 00
	00 00 00	 mov	 DWORD PTR Offset$2[rsp], 0

; 217  :         ID3D11DeviceContext_IASetVertexBuffers(State->Context, 0, 1, &Mesh->VBuffer, &Stride, &Offset);

  001ce	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR Mesh$[rsp]
  001d6	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR State$[rsp]
  001de	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  001e2	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  001e5	48 89 4c 24 40	 mov	 QWORD PTR tv237[rsp], rcx
  001ea	48 8d 54 24 34	 lea	 rdx, QWORD PTR Offset$2[rsp]
  001ef	48 89 54 24 28	 mov	 QWORD PTR [rsp+40], rdx
  001f4	48 8d 54 24 30	 lea	 rdx, QWORD PTR Stride$1[rsp]
  001f9	48 89 54 24 20	 mov	 QWORD PTR [rsp+32], rdx
  001fe	4c 8b c8	 mov	 r9, rax
  00201	41 b8 01 00 00
	00		 mov	 r8d, 1
  00207	33 d2		 xor	 edx, edx
  00209	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR State$[rsp]
  00211	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  00215	48 8b 44 24 40	 mov	 rax, QWORD PTR tv237[rsp]
  0021a	ff 90 90 00 00
	00		 call	 QWORD PTR [rax+144]

; 218  :         ID3D11DeviceContext_IASetIndexBuffer(State->Context, Mesh->IBuffer, DXGI_FORMAT_R32_UINT, 0);

  00220	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR State$[rsp]
  00228	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0022c	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0022f	45 33 c9	 xor	 r9d, r9d
  00232	41 b8 2a 00 00
	00		 mov	 r8d, 42			; 0000002aH
  00238	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR Mesh$[rsp]
  00240	48 8b 51 08	 mov	 rdx, QWORD PTR [rcx+8]
  00244	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR State$[rsp]
  0024c	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  00250	ff 90 98 00 00
	00		 call	 QWORD PTR [rax+152]

; 219  :         
; 220  :         ID3D11DeviceContext_VSSetConstantBuffers(State->Context, 0, 1, &Shader->UBuffer);

  00256	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR Shader$[rsp]
  0025e	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR State$[rsp]
  00266	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  0026a	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0026d	48 89 4c 24 48	 mov	 QWORD PTR tv233[rsp], rcx
  00272	4c 8b c8	 mov	 r9, rax
  00275	41 b8 01 00 00
	00		 mov	 r8d, 1
  0027b	33 d2		 xor	 edx, edx
  0027d	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR State$[rsp]
  00285	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  00289	48 8b 44 24 48	 mov	 rax, QWORD PTR tv233[rsp]
  0028e	ff 50 38	 call	 QWORD PTR [rax+56]

; 221  :         ID3D11DeviceContext_VSSetShader(State->Context, Shader->VShader, 0, 0);

  00291	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR State$[rsp]
  00299	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0029d	48 8b 00	 mov	 rax, QWORD PTR [rax]
  002a0	45 33 c9	 xor	 r9d, r9d
  002a3	45 33 c0	 xor	 r8d, r8d
  002a6	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR Shader$[rsp]
  002ae	48 8b 51 08	 mov	 rdx, QWORD PTR [rcx+8]
  002b2	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR State$[rsp]
  002ba	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  002be	ff 50 58	 call	 QWORD PTR [rax+88]

; 222  :         
; 223  :         ID3D11DeviceContext_PSSetShaderResources(State->Context, 0, 1, &Texture->View);

  002c1	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR Texture$[rsp]
  002c9	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR State$[rsp]
  002d1	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  002d5	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  002d8	48 89 4c 24 50	 mov	 QWORD PTR tv229[rsp], rcx
  002dd	4c 8b c8	 mov	 r9, rax
  002e0	41 b8 01 00 00
	00		 mov	 r8d, 1
  002e6	33 d2		 xor	 edx, edx
  002e8	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR State$[rsp]
  002f0	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  002f4	48 8b 44 24 50	 mov	 rax, QWORD PTR tv229[rsp]
  002f9	ff 50 40	 call	 QWORD PTR [rax+64]

; 224  :         ID3D11DeviceContext_PSSetShader(State->Context, Shader->PShader, 0, 0);

  002fc	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR State$[rsp]
  00304	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00308	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0030b	45 33 c9	 xor	 r9d, r9d
  0030e	45 33 c0	 xor	 r8d, r8d
  00311	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR Shader$[rsp]
  00319	48 8b 51 10	 mov	 rdx, QWORD PTR [rcx+16]
  0031d	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR State$[rsp]
  00325	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  00329	ff 50 48	 call	 QWORD PTR [rax+72]

; 225  :         
; 226  :         ID3D11DeviceContext_DrawIndexed(State->Context, Mesh->IndexCount, 0, 0);

  0032c	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR State$[rsp]
  00334	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00338	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0033b	45 33 c9	 xor	 r9d, r9d
  0033e	45 33 c0	 xor	 r8d, r8d
  00341	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR Mesh$[rsp]
  00349	8b 51 10	 mov	 edx, DWORD PTR [rcx+16]
  0034c	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR State$[rsp]
  00354	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  00358	ff 50 60	 call	 QWORD PTR [rax+96]
$LN2@Win32D3D11:

; 227  :     }
; 228  : }

  0035b	48 83 c4 78	 add	 rsp, 120		; 00000078H
  0035f	5f		 pop	 rdi
  00360	5e		 pop	 rsi
  00361	c3		 ret	 0
Win32D3D11RenderMesh ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File W:\new-horizons\code\win32_d3d11.c
_TEXT	SEGMENT
Backbuffer$1 = 48
Depth$2 = 56
Color$3 = 64
Viewport$4 = 80
tv292 = 104
tv287 = 112
tv275 = 120
tv271 = 128
DepthDesc$5 = 136
State$ = 208
WindowDimension$ = 216
WindowResized$ = 224
Win32D3D11BeginFrame PROC

; 127  : {

  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H

; 128  :     if(!State->RTView || WindowResized)

  00016	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR State$[rsp]
  0001e	48 83 78 40 00	 cmp	 QWORD PTR [rax+64], 0
  00023	74 0e		 je	 SHORT $LN3@Win32D3D11
  00025	83 bc 24 e0 00
	00 00 00	 cmp	 DWORD PTR WindowResized$[rsp], 0
  0002d	0f 84 12 02 00
	00		 je	 $LN2@Win32D3D11
$LN3@Win32D3D11:

; 129  :     {
; 130  :         if(State->RTView)

  00033	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR State$[rsp]
  0003b	48 83 78 40 00	 cmp	 QWORD PTR [rax+64], 0
  00040	74 6d		 je	 SHORT $LN4@Win32D3D11

; 131  :         {
; 132  :             ID3D11DeviceContext_ClearState(State->Context);

  00042	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR State$[rsp]
  0004a	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0004e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00051	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR State$[rsp]
  00059	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  0005d	ff 90 70 03 00
	00		 call	 QWORD PTR [rax+880]

; 133  :             ID3D11RenderTargetView_Release(State->RTView);

  00063	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR State$[rsp]
  0006b	48 8b 40 40	 mov	 rax, QWORD PTR [rax+64]
  0006f	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00072	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR State$[rsp]
  0007a	48 8b 49 40	 mov	 rcx, QWORD PTR [rcx+64]
  0007e	ff 50 10	 call	 QWORD PTR [rax+16]

; 134  :             ID3D11DepthStencilView_Release(State->DSView);

  00081	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR State$[rsp]
  00089	48 8b 40 48	 mov	 rax, QWORD PTR [rax+72]
  0008d	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00090	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR State$[rsp]
  00098	48 8b 49 48	 mov	 rcx, QWORD PTR [rcx+72]
  0009c	ff 50 10	 call	 QWORD PTR [rax+16]

; 135  :             State->RTView = 0;

  0009f	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR State$[rsp]
  000a7	48 c7 40 40 00
	00 00 00	 mov	 QWORD PTR [rax+64], 0
$LN4@Win32D3D11:

; 136  :         }
; 137  :         
; 138  :         if(WindowDimension.Width != 0 && WindowDimension.Height != 0)

  000af	83 bc 24 d8 00
	00 00 00	 cmp	 DWORD PTR WindowDimension$[rsp], 0
  000b7	0f 84 88 01 00
	00		 je	 $LN5@Win32D3D11
  000bd	83 bc 24 dc 00
	00 00 00	 cmp	 DWORD PTR WindowDimension$[rsp+4], 0
  000c5	0f 84 7a 01 00
	00		 je	 $LN5@Win32D3D11

; 139  :         {
; 140  :             AssertHR(IDXGISwapChain1_ResizeBuffers(State->SwapChain, 0, WindowDimension.Width, WindowDimension.Height, DXGI_FORMAT_UNKNOWN, 0));

  000cb	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR State$[rsp]
  000d3	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  000d7	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000da	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR [rsp+40], 0
  000e2	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR [rsp+32], 0
  000ea	44 8b 8c 24 dc
	00 00 00	 mov	 r9d, DWORD PTR WindowDimension$[rsp+4]
  000f2	44 8b 84 24 d8
	00 00 00	 mov	 r8d, DWORD PTR WindowDimension$[rsp]
  000fa	33 d2		 xor	 edx, edx
  000fc	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR State$[rsp]
  00104	48 8b 49 10	 mov	 rcx, QWORD PTR [rcx+16]
  00108	ff 50 68	 call	 QWORD PTR [rax+104]
  0010b	85 c0		 test	 eax, eax
  0010d	7d 0b		 jge	 SHORT $LN6@Win32D3D11
  0010f	c7 04 25 00 00
	00 00 00 00 00
	00		 mov	 DWORD PTR ds:0, 0
$LN6@Win32D3D11:

; 141  :             
; 142  :             ID3D11Texture2D *Backbuffer;
; 143  :             IDXGISwapChain1_GetBuffer(State->SwapChain, 0, &IID_ID3D11Texture2D, &Backbuffer);

  0011a	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR State$[rsp]
  00122	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  00126	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00129	4c 8d 4c 24 30	 lea	 r9, QWORD PTR Backbuffer$1[rsp]
  0012e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:IID_ID3D11Texture2D
  00135	33 d2		 xor	 edx, edx
  00137	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR State$[rsp]
  0013f	48 8b 49 10	 mov	 rcx, QWORD PTR [rcx+16]
  00143	ff 50 48	 call	 QWORD PTR [rax+72]

; 144  :             ID3D11Device_CreateRenderTargetView(State->Device, (ID3D11Resource *)Backbuffer, 0, &State->RTView);

  00146	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR State$[rsp]
  0014e	48 83 c0 40	 add	 rax, 64			; 00000040H
  00152	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR State$[rsp]
  0015a	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0015d	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00160	48 89 4c 24 68	 mov	 QWORD PTR tv292[rsp], rcx
  00165	4c 8b c8	 mov	 r9, rax
  00168	45 33 c0	 xor	 r8d, r8d
  0016b	48 8b 54 24 30	 mov	 rdx, QWORD PTR Backbuffer$1[rsp]
  00170	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR State$[rsp]
  00178	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  0017b	48 8b 44 24 68	 mov	 rax, QWORD PTR tv292[rsp]
  00180	ff 50 48	 call	 QWORD PTR [rax+72]

; 145  :             
; 146  :             D3D11_TEXTURE2D_DESC DepthDesc;
; 147  :             ID3D11Texture2D_GetDesc(Backbuffer, &DepthDesc);

  00183	48 8b 44 24 30	 mov	 rax, QWORD PTR Backbuffer$1[rsp]
  00188	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0018b	48 8d 94 24 88
	00 00 00	 lea	 rdx, QWORD PTR DepthDesc$5[rsp]
  00193	48 8b 4c 24 30	 mov	 rcx, QWORD PTR Backbuffer$1[rsp]
  00198	ff 50 50	 call	 QWORD PTR [rax+80]

; 148  :             DepthDesc.Format = DXGI_FORMAT_D24_UNORM_S8_UINT;

  0019b	c7 84 24 98 00
	00 00 2d 00 00
	00		 mov	 DWORD PTR DepthDesc$5[rsp+16], 45 ; 0000002dH

; 149  :             DepthDesc.BindFlags = D3D11_BIND_DEPTH_STENCIL;

  001a6	c7 84 24 a8 00
	00 00 40 00 00
	00		 mov	 DWORD PTR DepthDesc$5[rsp+32], 64 ; 00000040H

; 150  :             DepthDesc.SampleDesc.Count = 2;

  001b1	c7 84 24 9c 00
	00 00 02 00 00
	00		 mov	 DWORD PTR DepthDesc$5[rsp+20], 2

; 151  :             
; 152  :             ID3D11Texture2D *Depth;
; 153  :             ID3D11Device_CreateTexture2D(State->Device, &DepthDesc, 0, &Depth);

  001bc	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR State$[rsp]
  001c4	48 8b 00	 mov	 rax, QWORD PTR [rax]
  001c7	48 8b 00	 mov	 rax, QWORD PTR [rax]
  001ca	4c 8d 4c 24 38	 lea	 r9, QWORD PTR Depth$2[rsp]
  001cf	45 33 c0	 xor	 r8d, r8d
  001d2	48 8d 94 24 88
	00 00 00	 lea	 rdx, QWORD PTR DepthDesc$5[rsp]
  001da	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR State$[rsp]
  001e2	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  001e5	ff 50 28	 call	 QWORD PTR [rax+40]

; 154  :             ID3D11Device_CreateDepthStencilView(State->Device, (ID3D11Resource *)Depth, 0, &State->DSView);

  001e8	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR State$[rsp]
  001f0	48 83 c0 48	 add	 rax, 72			; 00000048H
  001f4	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR State$[rsp]
  001fc	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  001ff	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00202	48 89 4c 24 70	 mov	 QWORD PTR tv287[rsp], rcx
  00207	4c 8b c8	 mov	 r9, rax
  0020a	45 33 c0	 xor	 r8d, r8d
  0020d	48 8b 54 24 38	 mov	 rdx, QWORD PTR Depth$2[rsp]
  00212	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR State$[rsp]
  0021a	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  0021d	48 8b 44 24 70	 mov	 rax, QWORD PTR tv287[rsp]
  00222	ff 50 50	 call	 QWORD PTR [rax+80]

; 155  :             ID3D11Texture2D_Release(Depth);

  00225	48 8b 44 24 38	 mov	 rax, QWORD PTR Depth$2[rsp]
  0022a	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0022d	48 8b 4c 24 38	 mov	 rcx, QWORD PTR Depth$2[rsp]
  00232	ff 50 10	 call	 QWORD PTR [rax+16]

; 156  :             ID3D11Texture2D_Release(Backbuffer);

  00235	48 8b 44 24 30	 mov	 rax, QWORD PTR Backbuffer$1[rsp]
  0023a	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0023d	48 8b 4c 24 30	 mov	 rcx, QWORD PTR Backbuffer$1[rsp]
  00242	ff 50 10	 call	 QWORD PTR [rax+16]
$LN5@Win32D3D11:
$LN2@Win32D3D11:

; 157  :         }
; 158  :     }
; 159  :     
; 160  :     if(State->RTView)

  00245	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR State$[rsp]
  0024d	48 83 78 40 00	 cmp	 QWORD PTR [rax+64], 0
  00252	0f 84 0e 02 00
	00		 je	 $LN7@Win32D3D11

; 161  :     {
; 162  :         D3D11_VIEWPORT Viewport =

  00258	0f 57 c0	 xorps	 xmm0, xmm0
  0025b	f3 0f 11 44 24
	50		 movss	 DWORD PTR Viewport$4[rsp], xmm0
  00261	0f 57 c0	 xorps	 xmm0, xmm0
  00264	f3 0f 11 44 24
	54		 movss	 DWORD PTR Viewport$4[rsp+4], xmm0
  0026a	8b 84 24 d8 00
	00 00		 mov	 eax, DWORD PTR WindowDimension$[rsp]
  00271	f3 48 0f 2a c0	 cvtsi2ss xmm0, rax
  00276	f3 0f 11 44 24
	58		 movss	 DWORD PTR Viewport$4[rsp+8], xmm0
  0027c	8b 84 24 dc 00
	00 00		 mov	 eax, DWORD PTR WindowDimension$[rsp+4]
  00283	f3 48 0f 2a c0	 cvtsi2ss xmm0, rax
  00288	f3 0f 11 44 24
	5c		 movss	 DWORD PTR Viewport$4[rsp+12], xmm0
  0028e	0f 57 c0	 xorps	 xmm0, xmm0
  00291	f3 0f 11 44 24
	60		 movss	 DWORD PTR Viewport$4[rsp+16], xmm0
  00297	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0029f	f3 0f 11 44 24
	64		 movss	 DWORD PTR Viewport$4[rsp+20], xmm0

; 163  :         {
; 164  :             .TopLeftX = 0,
; 165  :             .TopLeftY = 0,
; 166  :             .Width = (FLOAT)WindowDimension.Width,
; 167  :             .Height = (FLOAT)WindowDimension.Height,
; 168  :             .MinDepth = 0,
; 169  :             .MaxDepth = 1
; 170  :         };
; 171  :         
; 172  :         // TODO(evan): Move this to the game code
; 173  :         FLOAT Color[] = { 0.392f, 0.584f, 0.929f, 1.0f };

  002a5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ec8b439
  002ad	f3 0f 11 44 24
	40		 movss	 DWORD PTR Color$3[rsp], xmm0
  002b3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f158106
  002bb	f3 0f 11 44 24
	44		 movss	 DWORD PTR Color$3[rsp+4], xmm0
  002c1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f6dd2f2
  002c9	f3 0f 11 44 24
	48		 movss	 DWORD PTR Color$3[rsp+8], xmm0
  002cf	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  002d7	f3 0f 11 44 24
	4c		 movss	 DWORD PTR Color$3[rsp+12], xmm0

; 174  :         ID3D11DeviceContext_ClearRenderTargetView(State->Context, State->RTView, Color);

  002dd	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR State$[rsp]
  002e5	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  002e9	48 8b 00	 mov	 rax, QWORD PTR [rax]
  002ec	4c 8d 44 24 40	 lea	 r8, QWORD PTR Color$3[rsp]
  002f1	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR State$[rsp]
  002f9	48 8b 51 40	 mov	 rdx, QWORD PTR [rcx+64]
  002fd	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR State$[rsp]
  00305	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  00309	ff 90 90 01 00
	00		 call	 QWORD PTR [rax+400]

; 175  :         ID3D11DeviceContext_ClearDepthStencilView(State->Context, State->DSView, D3D11_CLEAR_DEPTH, 1.0f, 0);

  0030f	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR State$[rsp]
  00317	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0031b	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0031e	c6 44 24 20 00	 mov	 BYTE PTR [rsp+32], 0
  00323	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3f800000
  0032b	41 b8 01 00 00
	00		 mov	 r8d, 1
  00331	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR State$[rsp]
  00339	48 8b 51 48	 mov	 rdx, QWORD PTR [rcx+72]
  0033d	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR State$[rsp]
  00345	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  00349	ff 90 a8 01 00
	00		 call	 QWORD PTR [rax+424]

; 176  :         
; 177  :         ID3D11DeviceContext_IASetPrimitiveTopology(State->Context, D3D11_PRIMITIVE_TOPOLOGY_TRIANGLELIST);

  0034f	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR State$[rsp]
  00357	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0035b	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0035e	ba 04 00 00 00	 mov	 edx, 4
  00363	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR State$[rsp]
  0036b	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  0036f	ff 90 c0 00 00
	00		 call	 QWORD PTR [rax+192]

; 178  :         ID3D11DeviceContext_RSSetViewports(State->Context, 1, &Viewport);

  00375	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR State$[rsp]
  0037d	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00381	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00384	4c 8d 44 24 50	 lea	 r8, QWORD PTR Viewport$4[rsp]
  00389	ba 01 00 00 00	 mov	 edx, 1
  0038e	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR State$[rsp]
  00396	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  0039a	ff 90 60 01 00
	00		 call	 QWORD PTR [rax+352]

; 179  :         ID3D11DeviceContext_PSSetSamplers(State->Context, 0, 1, &State->Sampler);

  003a0	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR State$[rsp]
  003a8	48 83 c0 38	 add	 rax, 56			; 00000038H
  003ac	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR State$[rsp]
  003b4	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  003b8	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  003bb	48 89 4c 24 78	 mov	 QWORD PTR tv275[rsp], rcx
  003c0	4c 8b c8	 mov	 r9, rax
  003c3	41 b8 01 00 00
	00		 mov	 r8d, 1
  003c9	33 d2		 xor	 edx, edx
  003cb	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR State$[rsp]
  003d3	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  003d7	48 8b 44 24 78	 mov	 rax, QWORD PTR tv275[rsp]
  003dc	ff 50 50	 call	 QWORD PTR [rax+80]

; 180  :         ID3D11DeviceContext_OMSetBlendState(State->Context, State->Blender, 0, ~0U);

  003df	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR State$[rsp]
  003e7	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  003eb	48 8b 00	 mov	 rax, QWORD PTR [rax]
  003ee	41 b9 ff ff ff
	ff		 mov	 r9d, -1			; ffffffffH
  003f4	45 33 c0	 xor	 r8d, r8d
  003f7	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR State$[rsp]
  003ff	48 8b 51 30	 mov	 rdx, QWORD PTR [rcx+48]
  00403	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR State$[rsp]
  0040b	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  0040f	ff 90 18 01 00
	00		 call	 QWORD PTR [rax+280]

; 181  :         ID3D11DeviceContext_OMSetRenderTargets(State->Context, 1, &State->RTView, State->DSView);

  00415	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR State$[rsp]
  0041d	48 83 c0 40	 add	 rax, 64			; 00000040H
  00421	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR State$[rsp]
  00429	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  0042d	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00430	48 89 8c 24 80
	00 00 00	 mov	 QWORD PTR tv271[rsp], rcx
  00438	48 8b 94 24 d0
	00 00 00	 mov	 rdx, QWORD PTR State$[rsp]
  00440	4c 8b 4a 48	 mov	 r9, QWORD PTR [rdx+72]
  00444	4c 8b c0	 mov	 r8, rax
  00447	ba 01 00 00 00	 mov	 edx, 1
  0044c	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR State$[rsp]
  00454	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  00458	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR tv271[rsp]
  00460	ff 90 08 01 00
	00		 call	 QWORD PTR [rax+264]
$LN7@Win32D3D11:

; 182  :     }
; 183  : }

  00466	48 81 c4 c8 00
	00 00		 add	 rsp, 200		; 000000c8H
  0046d	c3		 ret	 0
Win32D3D11BeginFrame ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File W:\new-horizons\code\win32_d3d11.c
_TEXT	SEGMENT
Flags$1 = 80
Info$2 = 88
Factory$3 = 96
FeatureLevels$ = 104
WindowDimension$ = 112
Desc$4 = 120
Desc$5 = 176
Desc$6 = 216
tv355 = 256
tv287 = 264
tv285 = 272
tv283 = 280
tv281 = 288
tv274 = 296
Desc$7 = 304
Desc$8 = 352
Desc$9 = 416
State$ = 704
Window$ = 712
Win32InitD3D11 PROC

; 9    : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 81 ec b0 02
	00 00		 sub	 rsp, 688		; 000002b0H

; 10   :     window_dimension WindowDimension = Win32GetWindowDimension(Window);

  00012	48 8b 8c 24 c8
	02 00 00	 mov	 rcx, QWORD PTR Window$[rsp]
  0001a	e8 00 00 00 00	 call	 Win32GetWindowDimension
  0001f	48 89 44 24 70	 mov	 QWORD PTR WindowDimension$[rsp], rax

; 11   :     
; 12   :     State->RTView = 0;

  00024	48 8b 84 24 c0
	02 00 00	 mov	 rax, QWORD PTR State$[rsp]
  0002c	48 c7 40 40 00
	00 00 00	 mov	 QWORD PTR [rax+64], 0

; 13   :     State->DSView = 0;

  00034	48 8b 84 24 c0
	02 00 00	 mov	 rax, QWORD PTR State$[rsp]
  0003c	48 c7 40 48 00
	00 00 00	 mov	 QWORD PTR [rax+72], 0

; 14   :     
; 15   :     D3D_FEATURE_LEVEL FeatureLevels[] = { D3D_FEATURE_LEVEL_11_0 };

  00044	c7 44 24 68 00
	b0 00 00	 mov	 DWORD PTR FeatureLevels$[rsp], 45056 ; 0000b000H

; 16   :     
; 17   :     {
; 18   :         UINT Flags = D3D11_CREATE_DEVICE_BGRA_SUPPORT;

  0004c	c7 44 24 50 20
	00 00 00	 mov	 DWORD PTR Flags$1[rsp], 32 ; 00000020H

; 19   : #if defined(HORIZONS_INTERNAL)
; 20   :         Flags |= D3D11_CREATE_DEVICE_DEBUG;

  00054	8b 44 24 50	 mov	 eax, DWORD PTR Flags$1[rsp]
  00058	83 c8 02	 or	 eax, 2
  0005b	89 44 24 50	 mov	 DWORD PTR Flags$1[rsp], eax

; 21   : #endif
; 22   :         
; 23   :         AssertHR(D3D11CreateDevice(0, D3D_DRIVER_TYPE_HARDWARE, 0, Flags,

  0005f	48 8b 84 24 c0
	02 00 00	 mov	 rax, QWORD PTR State$[rsp]
  00067	48 83 c0 08	 add	 rax, 8
  0006b	48 8b 8c 24 c0
	02 00 00	 mov	 rcx, QWORD PTR State$[rsp]
  00073	48 89 44 24 48	 mov	 QWORD PTR [rsp+72], rax
  00078	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR [rsp+64], 0
  00081	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00086	c7 44 24 30 07
	00 00 00	 mov	 DWORD PTR [rsp+48], 7
  0008e	c7 44 24 28 01
	00 00 00	 mov	 DWORD PTR [rsp+40], 1
  00096	48 8d 44 24 68	 lea	 rax, QWORD PTR FeatureLevels$[rsp]
  0009b	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000a0	44 8b 4c 24 50	 mov	 r9d, DWORD PTR Flags$1[rsp]
  000a5	45 33 c0	 xor	 r8d, r8d
  000a8	ba 01 00 00 00	 mov	 edx, 1
  000ad	33 c9		 xor	 ecx, ecx
  000af	e8 00 00 00 00	 call	 D3D11CreateDevice
  000b4	85 c0		 test	 eax, eax
  000b6	7d 0b		 jge	 SHORT $LN2@Win32InitD
  000b8	c7 04 25 00 00
	00 00 00 00 00
	00		 mov	 DWORD PTR ds:0, 0
$LN2@Win32InitD:

; 24   :                                    FeatureLevels, ArrayCount(FeatureLevels), D3D11_SDK_VERSION,
; 25   :                                    &State->Device, 0, &State->Context));
; 26   :     }
; 27   :     
; 28   : #if defined(HORIZONS_INTERNAL)
; 29   :     {
; 30   :         ID3D11InfoQueue *Info;
; 31   :         ID3D11Device_QueryInterface(State->Device, &IID_ID3D11InfoQueue, &Info);

  000c3	48 8b 84 24 c0
	02 00 00	 mov	 rax, QWORD PTR State$[rsp]
  000cb	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000ce	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000d1	4c 8d 44 24 58	 lea	 r8, QWORD PTR Info$2[rsp]
  000d6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:IID_ID3D11InfoQueue
  000dd	48 8b 8c 24 c0
	02 00 00	 mov	 rcx, QWORD PTR State$[rsp]
  000e5	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000e8	ff 10		 call	 QWORD PTR [rax]

; 32   :         ID3D11InfoQueue_SetBreakOnSeverity(Info, D3D11_MESSAGE_SEVERITY_CORRUPTION, true);

  000ea	48 8b 44 24 58	 mov	 rax, QWORD PTR Info$2[rsp]
  000ef	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000f2	41 b8 01 00 00
	00		 mov	 r8d, 1
  000f8	33 d2		 xor	 edx, edx
  000fa	48 8b 4c 24 58	 mov	 rcx, QWORD PTR Info$2[rsp]
  000ff	ff 90 f8 00 00
	00		 call	 QWORD PTR [rax+248]

; 33   :         ID3D11InfoQueue_SetBreakOnSeverity(Info, D3D11_MESSAGE_SEVERITY_ERROR, true);

  00105	48 8b 44 24 58	 mov	 rax, QWORD PTR Info$2[rsp]
  0010a	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0010d	41 b8 01 00 00
	00		 mov	 r8d, 1
  00113	ba 01 00 00 00	 mov	 edx, 1
  00118	48 8b 4c 24 58	 mov	 rcx, QWORD PTR Info$2[rsp]
  0011d	ff 90 f8 00 00
	00		 call	 QWORD PTR [rax+248]

; 34   :         ID3D11InfoQueue_Release(Info);

  00123	48 8b 44 24 58	 mov	 rax, QWORD PTR Info$2[rsp]
  00128	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0012b	48 8b 4c 24 58	 mov	 rcx, QWORD PTR Info$2[rsp]
  00130	ff 50 10	 call	 QWORD PTR [rax+16]

; 35   :     }
; 36   : #endif
; 37   :     
; 38   :     {
; 39   :         IDXGIFactory2 *Factory;
; 40   :         AssertHR(CreateDXGIFactory(&IID_IDXGIFactory2, &Factory));

  00133	48 8d 54 24 60	 lea	 rdx, QWORD PTR Factory$3[rsp]
  00138	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:IID_IDXGIFactory2
  0013f	e8 00 00 00 00	 call	 CreateDXGIFactory
  00144	85 c0		 test	 eax, eax
  00146	7d 0b		 jge	 SHORT $LN3@Win32InitD
  00148	c7 04 25 00 00
	00 00 00 00 00
	00		 mov	 DWORD PTR ds:0, 0
$LN3@Win32InitD:

; 41   :         
; 42   :         DXGI_SWAP_CHAIN_DESC1 Desc = {0};

  00153	48 8d 84 24 30
	01 00 00	 lea	 rax, QWORD PTR Desc$7[rsp]
  0015b	48 8b f8	 mov	 rdi, rax
  0015e	33 c0		 xor	 eax, eax
  00160	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00165	f3 aa		 rep stosb

; 43   :         Desc.Width = WindowDimension.Width;

  00167	8b 44 24 70	 mov	 eax, DWORD PTR WindowDimension$[rsp]
  0016b	89 84 24 30 01
	00 00		 mov	 DWORD PTR Desc$7[rsp], eax

; 44   :         Desc.Height = WindowDimension.Height;

  00172	8b 44 24 74	 mov	 eax, DWORD PTR WindowDimension$[rsp+4]
  00176	89 84 24 34 01
	00 00		 mov	 DWORD PTR Desc$7[rsp+4], eax

; 45   :         Desc.Format = DXGI_FORMAT_R8G8B8A8_UNORM;

  0017d	c7 84 24 38 01
	00 00 1c 00 00
	00		 mov	 DWORD PTR Desc$7[rsp+8], 28

; 46   :         Desc.SampleDesc.Count = 2;

  00188	c7 84 24 40 01
	00 00 02 00 00
	00		 mov	 DWORD PTR Desc$7[rsp+16], 2

; 47   :         Desc.SampleDesc.Quality = 0;

  00193	c7 84 24 44 01
	00 00 00 00 00
	00		 mov	 DWORD PTR Desc$7[rsp+20], 0

; 48   :         Desc.BufferUsage = DXGI_USAGE_RENDER_TARGET_OUTPUT;

  0019e	c7 84 24 48 01
	00 00 20 00 00
	00		 mov	 DWORD PTR Desc$7[rsp+24], 32 ; 00000020H

; 49   :         Desc.BufferCount = 2;

  001a9	c7 84 24 4c 01
	00 00 02 00 00
	00		 mov	 DWORD PTR Desc$7[rsp+28], 2

; 50   :         Desc.Scaling = DXGI_SCALING_STRETCH;

  001b4	c7 84 24 50 01
	00 00 00 00 00
	00		 mov	 DWORD PTR Desc$7[rsp+32], 0

; 51   :         Desc.SwapEffect = DXGI_SWAP_EFFECT_DISCARD;

  001bf	c7 84 24 54 01
	00 00 00 00 00
	00		 mov	 DWORD PTR Desc$7[rsp+36], 0

; 52   :         
; 53   :         AssertHR(IDXGIFactory2_CreateSwapChainForHwnd(Factory, (IUnknown *)State->Device, Window, &Desc, 0, 0, &State->SwapChain));

  001ca	48 8b 84 24 c0
	02 00 00	 mov	 rax, QWORD PTR State$[rsp]
  001d2	48 83 c0 10	 add	 rax, 16
  001d6	48 8b 4c 24 60	 mov	 rcx, QWORD PTR Factory$3[rsp]
  001db	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  001de	48 89 8c 24 00
	01 00 00	 mov	 QWORD PTR tv355[rsp], rcx
  001e6	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  001eb	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR [rsp+40], 0
  001f4	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  001fd	4c 8d 8c 24 30
	01 00 00	 lea	 r9, QWORD PTR Desc$7[rsp]
  00205	4c 8b 84 24 c8
	02 00 00	 mov	 r8, QWORD PTR Window$[rsp]
  0020d	48 8b 84 24 c0
	02 00 00	 mov	 rax, QWORD PTR State$[rsp]
  00215	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  00218	48 8b 4c 24 60	 mov	 rcx, QWORD PTR Factory$3[rsp]
  0021d	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR tv355[rsp]
  00225	ff 50 78	 call	 QWORD PTR [rax+120]
  00228	85 c0		 test	 eax, eax
  0022a	7d 0b		 jge	 SHORT $LN4@Win32InitD
  0022c	c7 04 25 00 00
	00 00 00 00 00
	00		 mov	 DWORD PTR ds:0, 0
$LN4@Win32InitD:

; 54   :         
; 55   :         IDXGIFactory_MakeWindowAssociation(Factory, Window, DXGI_MWA_NO_ALT_ENTER);

  00237	48 8b 44 24 60	 mov	 rax, QWORD PTR Factory$3[rsp]
  0023c	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0023f	41 b8 02 00 00
	00		 mov	 r8d, 2
  00245	48 8b 94 24 c8
	02 00 00	 mov	 rdx, QWORD PTR Window$[rsp]
  0024d	48 8b 4c 24 60	 mov	 rcx, QWORD PTR Factory$3[rsp]
  00252	ff 50 40	 call	 QWORD PTR [rax+64]

; 56   :         IDXGIFactory_Release(Factory);

  00255	48 8b 44 24 60	 mov	 rax, QWORD PTR Factory$3[rsp]
  0025a	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0025d	48 8b 4c 24 60	 mov	 rcx, QWORD PTR Factory$3[rsp]
  00262	ff 50 10	 call	 QWORD PTR [rax+16]

; 57   :     }
; 58   :     
; 59   :     {
; 60   :         D3D11_SAMPLER_DESC Desc =

  00265	c7 84 24 60 01
	00 00 00 00 00
	00		 mov	 DWORD PTR Desc$8[rsp], 0
  00270	c7 84 24 64 01
	00 00 01 00 00
	00		 mov	 DWORD PTR Desc$8[rsp+4], 1
  0027b	c7 84 24 68 01
	00 00 01 00 00
	00		 mov	 DWORD PTR Desc$8[rsp+8], 1
  00286	c7 84 24 6c 01
	00 00 01 00 00
	00		 mov	 DWORD PTR Desc$8[rsp+12], 1
  00291	0f 57 c0	 xorps	 xmm0, xmm0
  00294	f3 0f 11 84 24
	70 01 00 00	 movss	 DWORD PTR Desc$8[rsp+16], xmm0
  0029d	c7 84 24 74 01
	00 00 00 00 00
	00		 mov	 DWORD PTR Desc$8[rsp+20], 0
  002a8	c7 84 24 78 01
	00 00 01 00 00
	00		 mov	 DWORD PTR Desc$8[rsp+24], 1
  002b3	48 8d 84 24 7c
	01 00 00	 lea	 rax, QWORD PTR Desc$8[rsp+28]
  002bb	48 8b f8	 mov	 rdi, rax
  002be	33 c0		 xor	 eax, eax
  002c0	b9 10 00 00 00	 mov	 ecx, 16
  002c5	f3 aa		 rep stosb
  002c7	0f 57 c0	 xorps	 xmm0, xmm0
  002ca	f3 0f 11 84 24
	8c 01 00 00	 movss	 DWORD PTR Desc$8[rsp+44], xmm0
  002d3	0f 57 c0	 xorps	 xmm0, xmm0
  002d6	f3 0f 11 84 24
	90 01 00 00	 movss	 DWORD PTR Desc$8[rsp+48], xmm0

; 61   :         {
; 62   :             .Filter = D3D11_FILTER_MIN_MAG_MIP_POINT,
; 63   :             .AddressU = D3D11_TEXTURE_ADDRESS_WRAP,
; 64   :             .AddressV = D3D11_TEXTURE_ADDRESS_WRAP,
; 65   :             .AddressW = D3D11_TEXTURE_ADDRESS_WRAP,
; 66   :             .ComparisonFunc = D3D11_COMPARISON_NEVER
; 67   :         };
; 68   :         
; 69   :         ID3D11Device_CreateSamplerState(State->Device, &Desc, &State->Sampler);

  002df	48 8b 84 24 c0
	02 00 00	 mov	 rax, QWORD PTR State$[rsp]
  002e7	48 83 c0 38	 add	 rax, 56			; 00000038H
  002eb	48 8b 8c 24 c0
	02 00 00	 mov	 rcx, QWORD PTR State$[rsp]
  002f3	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  002f6	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  002f9	48 89 8c 24 08
	01 00 00	 mov	 QWORD PTR tv287[rsp], rcx
  00301	4c 8b c0	 mov	 r8, rax
  00304	48 8d 94 24 60
	01 00 00	 lea	 rdx, QWORD PTR Desc$8[rsp]
  0030c	48 8b 84 24 c0
	02 00 00	 mov	 rax, QWORD PTR State$[rsp]
  00314	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00317	48 8b 84 24 08
	01 00 00	 mov	 rax, QWORD PTR tv287[rsp]
  0031f	ff 90 b8 00 00
	00		 call	 QWORD PTR [rax+184]

; 70   :     }
; 71   :     
; 72   :     {
; 73   :         D3D11_BLEND_DESC Desc =

  00325	c7 84 24 a0 01
	00 00 00 00 00
	00		 mov	 DWORD PTR Desc$9[rsp], 0
  00330	c7 84 24 a4 01
	00 00 00 00 00
	00		 mov	 DWORD PTR Desc$9[rsp+4], 0
  0033b	c7 84 24 a8 01
	00 00 01 00 00
	00		 mov	 DWORD PTR Desc$9[rsp+8], 1
  00346	c7 84 24 ac 01
	00 00 05 00 00
	00		 mov	 DWORD PTR Desc$9[rsp+12], 5
  00351	c7 84 24 b0 01
	00 00 06 00 00
	00		 mov	 DWORD PTR Desc$9[rsp+16], 6
  0035c	c7 84 24 b4 01
	00 00 01 00 00
	00		 mov	 DWORD PTR Desc$9[rsp+20], 1
  00367	c7 84 24 b8 01
	00 00 05 00 00
	00		 mov	 DWORD PTR Desc$9[rsp+24], 5
  00372	c7 84 24 bc 01
	00 00 06 00 00
	00		 mov	 DWORD PTR Desc$9[rsp+28], 6
  0037d	c7 84 24 c0 01
	00 00 01 00 00
	00		 mov	 DWORD PTR Desc$9[rsp+32], 1
  00388	c6 84 24 c4 01
	00 00 0f	 mov	 BYTE PTR Desc$9[rsp+36], 15
  00390	48 8d 84 24 c8
	01 00 00	 lea	 rax, QWORD PTR Desc$9[rsp+40]
  00398	48 8b f8	 mov	 rdi, rax
  0039b	33 c0		 xor	 eax, eax
  0039d	b9 e0 00 00 00	 mov	 ecx, 224		; 000000e0H
  003a2	f3 aa		 rep stosb

; 74   :         {
; 75   :             .RenderTarget[0] =
; 76   :             {
; 77   :                 .BlendEnable = true,
; 78   :                 .SrcBlend = D3D11_BLEND_SRC_ALPHA,
; 79   :                 .DestBlend = D3D11_BLEND_INV_SRC_ALPHA,
; 80   :                 .BlendOp = D3D11_BLEND_OP_ADD,
; 81   :                 .SrcBlendAlpha = D3D11_BLEND_SRC_ALPHA,
; 82   :                 .DestBlendAlpha = D3D11_BLEND_INV_SRC_ALPHA,
; 83   :                 .BlendOpAlpha = D3D11_BLEND_OP_ADD,
; 84   :                 .RenderTargetWriteMask = D3D11_COLOR_WRITE_ENABLE_ALL
; 85   :             }
; 86   :         };
; 87   :         
; 88   :         ID3D11Device_CreateBlendState(State->Device, &Desc, &State->Blender);

  003a4	48 8b 84 24 c0
	02 00 00	 mov	 rax, QWORD PTR State$[rsp]
  003ac	48 83 c0 30	 add	 rax, 48			; 00000030H
  003b0	48 8b 8c 24 c0
	02 00 00	 mov	 rcx, QWORD PTR State$[rsp]
  003b8	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  003bb	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  003be	48 89 8c 24 10
	01 00 00	 mov	 QWORD PTR tv285[rsp], rcx
  003c6	4c 8b c0	 mov	 r8, rax
  003c9	48 8d 94 24 a0
	01 00 00	 lea	 rdx, QWORD PTR Desc$9[rsp]
  003d1	48 8b 84 24 c0
	02 00 00	 mov	 rax, QWORD PTR State$[rsp]
  003d9	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  003dc	48 8b 84 24 10
	01 00 00	 mov	 rax, QWORD PTR tv285[rsp]
  003e4	ff 90 a0 00 00
	00		 call	 QWORD PTR [rax+160]

; 89   :     }
; 90   :     
; 91   :     {
; 92   :         D3D11_RASTERIZER_DESC Desc =

  003ea	c7 84 24 b0 00
	00 00 03 00 00
	00		 mov	 DWORD PTR Desc$5[rsp], 3
  003f5	c7 84 24 b4 00
	00 00 03 00 00
	00		 mov	 DWORD PTR Desc$5[rsp+4], 3
  00400	c7 84 24 b8 00
	00 00 00 00 00
	00		 mov	 DWORD PTR Desc$5[rsp+8], 0
  0040b	c7 84 24 bc 00
	00 00 00 00 00
	00		 mov	 DWORD PTR Desc$5[rsp+12], 0
  00416	0f 57 c0	 xorps	 xmm0, xmm0
  00419	f3 0f 11 84 24
	c0 00 00 00	 movss	 DWORD PTR Desc$5[rsp+16], xmm0
  00422	0f 57 c0	 xorps	 xmm0, xmm0
  00425	f3 0f 11 84 24
	c4 00 00 00	 movss	 DWORD PTR Desc$5[rsp+20], xmm0
  0042e	c7 84 24 c8 00
	00 00 00 00 00
	00		 mov	 DWORD PTR Desc$5[rsp+24], 0
  00439	c7 84 24 cc 00
	00 00 00 00 00
	00		 mov	 DWORD PTR Desc$5[rsp+28], 0
  00444	c7 84 24 d0 00
	00 00 01 00 00
	00		 mov	 DWORD PTR Desc$5[rsp+32], 1
  0044f	c7 84 24 d4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR Desc$5[rsp+36], 0

; 93   :         {
; 94   :             .FillMode = D3D11_FILL_SOLID,
; 95   :             .CullMode = D3D11_CULL_BACK,
; 96   :             .MultisampleEnable = true
; 97   :         };
; 98   :         
; 99   :         ID3D11Device_CreateRasterizerState(State->Device, &Desc, &State->RasterizerState);

  0045a	48 8b 84 24 c0
	02 00 00	 mov	 rax, QWORD PTR State$[rsp]
  00462	48 83 c0 18	 add	 rax, 24
  00466	48 8b 8c 24 c0
	02 00 00	 mov	 rcx, QWORD PTR State$[rsp]
  0046e	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00471	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00474	48 89 8c 24 18
	01 00 00	 mov	 QWORD PTR tv283[rsp], rcx
  0047c	4c 8b c0	 mov	 r8, rax
  0047f	48 8d 94 24 b0
	00 00 00	 lea	 rdx, QWORD PTR Desc$5[rsp]
  00487	48 8b 84 24 c0
	02 00 00	 mov	 rax, QWORD PTR State$[rsp]
  0048f	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00492	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR tv283[rsp]
  0049a	ff 90 b0 00 00
	00		 call	 QWORD PTR [rax+176]

; 100  :     }
; 101  :     
; 102  :     {
; 103  :         D3D11_RASTERIZER_DESC Desc =

  004a0	c7 84 24 d8 00
	00 00 03 00 00
	00		 mov	 DWORD PTR Desc$6[rsp], 3
  004ab	c7 84 24 dc 00
	00 00 01 00 00
	00		 mov	 DWORD PTR Desc$6[rsp+4], 1
  004b6	c7 84 24 e0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR Desc$6[rsp+8], 0
  004c1	c7 84 24 e4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR Desc$6[rsp+12], 0
  004cc	0f 57 c0	 xorps	 xmm0, xmm0
  004cf	f3 0f 11 84 24
	e8 00 00 00	 movss	 DWORD PTR Desc$6[rsp+16], xmm0
  004d8	0f 57 c0	 xorps	 xmm0, xmm0
  004db	f3 0f 11 84 24
	ec 00 00 00	 movss	 DWORD PTR Desc$6[rsp+20], xmm0
  004e4	c7 84 24 f0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR Desc$6[rsp+24], 0
  004ef	c7 84 24 f4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR Desc$6[rsp+28], 0
  004fa	c7 84 24 f8 00
	00 00 00 00 00
	00		 mov	 DWORD PTR Desc$6[rsp+32], 0
  00505	c7 84 24 fc 00
	00 00 00 00 00
	00		 mov	 DWORD PTR Desc$6[rsp+36], 0

; 104  :         {
; 105  :             .FillMode = D3D11_FILL_SOLID,
; 106  :             .CullMode = D3D11_CULL_NONE
; 107  :         };
; 108  :         
; 109  :         ID3D11Device_CreateRasterizerState(State->Device, &Desc, &State->NoCullRasterizerState);

  00510	48 8b 84 24 c0
	02 00 00	 mov	 rax, QWORD PTR State$[rsp]
  00518	48 83 c0 20	 add	 rax, 32			; 00000020H
  0051c	48 8b 8c 24 c0
	02 00 00	 mov	 rcx, QWORD PTR State$[rsp]
  00524	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00527	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0052a	48 89 8c 24 20
	01 00 00	 mov	 QWORD PTR tv281[rsp], rcx
  00532	4c 8b c0	 mov	 r8, rax
  00535	48 8d 94 24 d8
	00 00 00	 lea	 rdx, QWORD PTR Desc$6[rsp]
  0053d	48 8b 84 24 c0
	02 00 00	 mov	 rax, QWORD PTR State$[rsp]
  00545	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00548	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR tv281[rsp]
  00550	ff 90 b0 00 00
	00		 call	 QWORD PTR [rax+176]

; 110  :     }
; 111  :     
; 112  :     {
; 113  :         D3D11_DEPTH_STENCIL_DESC Desc =

  00556	c7 44 24 78 01
	00 00 00	 mov	 DWORD PTR Desc$4[rsp], 1
  0055e	c7 44 24 7c 01
	00 00 00	 mov	 DWORD PTR Desc$4[rsp+4], 1
  00566	c7 84 24 80 00
	00 00 02 00 00
	00		 mov	 DWORD PTR Desc$4[rsp+8], 2
  00571	c7 84 24 84 00
	00 00 00 00 00
	00		 mov	 DWORD PTR Desc$4[rsp+12], 0
  0057c	c6 84 24 88 00
	00 00 00	 mov	 BYTE PTR Desc$4[rsp+16], 0
  00584	c6 84 24 89 00
	00 00 00	 mov	 BYTE PTR Desc$4[rsp+17], 0
  0058c	c7 84 24 8c 00
	00 00 00 00 00
	00		 mov	 DWORD PTR Desc$4[rsp+20], 0
  00597	c7 84 24 90 00
	00 00 00 00 00
	00		 mov	 DWORD PTR Desc$4[rsp+24], 0
  005a2	c7 84 24 94 00
	00 00 00 00 00
	00		 mov	 DWORD PTR Desc$4[rsp+28], 0
  005ad	c7 84 24 98 00
	00 00 00 00 00
	00		 mov	 DWORD PTR Desc$4[rsp+32], 0
  005b8	c7 84 24 9c 00
	00 00 00 00 00
	00		 mov	 DWORD PTR Desc$4[rsp+36], 0
  005c3	c7 84 24 a0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR Desc$4[rsp+40], 0
  005ce	c7 84 24 a4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR Desc$4[rsp+44], 0
  005d9	c7 84 24 a8 00
	00 00 00 00 00
	00		 mov	 DWORD PTR Desc$4[rsp+48], 0

; 114  :         {
; 115  :             .DepthEnable = true,
; 116  :             .DepthWriteMask = D3D11_DEPTH_WRITE_MASK_ALL,
; 117  :             .DepthFunc = D3D11_COMPARISON_LESS
; 118  :         };
; 119  :         
; 120  :         ID3D11Device_CreateDepthStencilState(State->Device, &Desc, &State->DepthState);

  005e4	48 8b 84 24 c0
	02 00 00	 mov	 rax, QWORD PTR State$[rsp]
  005ec	48 83 c0 28	 add	 rax, 40			; 00000028H
  005f0	48 8b 8c 24 c0
	02 00 00	 mov	 rcx, QWORD PTR State$[rsp]
  005f8	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  005fb	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  005fe	48 89 8c 24 28
	01 00 00	 mov	 QWORD PTR tv274[rsp], rcx
  00606	4c 8b c0	 mov	 r8, rax
  00609	48 8d 54 24 78	 lea	 rdx, QWORD PTR Desc$4[rsp]
  0060e	48 8b 84 24 c0
	02 00 00	 mov	 rax, QWORD PTR State$[rsp]
  00616	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00619	48 8b 84 24 28
	01 00 00	 mov	 rax, QWORD PTR tv274[rsp]
  00621	ff 90 a8 00 00
	00		 call	 QWORD PTR [rax+168]

; 121  :     }
; 122  : }

  00627	48 81 c4 b0 02
	00 00		 add	 rsp, 688		; 000002b0H
  0062e	5f		 pop	 rdi
  0062f	c3		 ret	 0
Win32InitD3D11 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File W:\new-horizons\code\win32_horizons.c
_TEXT	SEGMENT
Dimension$ = 32
ClientRect$ = 40
Window$ = 80
Win32GetWindowDimension PROC

; 22   : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 40	 sub	 rsp, 64			; 00000040H

; 23   :     window_dimension Dimension = {0};

  0000a	48 8d 44 24 20	 lea	 rax, QWORD PTR Dimension$[rsp]
  0000f	48 8b f8	 mov	 rdi, rax
  00012	33 c0		 xor	 eax, eax
  00014	b9 08 00 00 00	 mov	 ecx, 8
  00019	f3 aa		 rep stosb

; 24   :     
; 25   :     RECT ClientRect;
; 26   :     GetClientRect(Window, &ClientRect);

  0001b	48 8d 54 24 28	 lea	 rdx, QWORD PTR ClientRect$[rsp]
  00020	48 8b 4c 24 50	 mov	 rcx, QWORD PTR Window$[rsp]
  00025	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetClientRect

; 27   :     Dimension.Width = ClientRect.right - ClientRect.left;

  0002b	8b 44 24 28	 mov	 eax, DWORD PTR ClientRect$[rsp]
  0002f	8b 4c 24 30	 mov	 ecx, DWORD PTR ClientRect$[rsp+8]
  00033	2b c8		 sub	 ecx, eax
  00035	8b c1		 mov	 eax, ecx
  00037	89 44 24 20	 mov	 DWORD PTR Dimension$[rsp], eax

; 28   :     Dimension.Height = ClientRect.bottom - ClientRect.top;

  0003b	8b 44 24 2c	 mov	 eax, DWORD PTR ClientRect$[rsp+4]
  0003f	8b 4c 24 34	 mov	 ecx, DWORD PTR ClientRect$[rsp+12]
  00043	2b c8		 sub	 ecx, eax
  00045	8b c1		 mov	 eax, ecx
  00047	89 44 24 24	 mov	 DWORD PTR Dimension$[rsp+4], eax

; 29   :     return(Dimension);

  0004b	48 8b 44 24 20	 mov	 rax, QWORD PTR Dimension$[rsp]

; 30   : }

  00050	48 83 c4 40	 add	 rsp, 64			; 00000040H
  00054	5f		 pop	 rdi
  00055	c3		 ret	 0
Win32GetWindowDimension ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.19041.0\um\xaudio2.h
;	COMDAT XAudio2Create
_TEXT	SEGMENT
ppXAudio2$ = 48
Flags$ = 56
XAudio2Processor$ = 64
XAudio2Create PROC					; COMDAT

; 1280 : {

$LN8:
  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 1281 :     // When compiled for RS5 or later, try to invoke XAudio2CreateWithVersionInfo.
; 1282 :     // Need to use LoadLibrary in case the app is running on an older OS.
; 1283 :     typedef HRESULT(__stdcall *XAudio2CreateWithVersionInfoFunc)(_Outptr_ IXAudio2**, UINT32, XAUDIO2_PROCESSOR, DWORD);
; 1284 :     typedef HRESULT(__stdcall *XAudio2CreateInfoFunc)(_Outptr_ IXAudio2**, UINT32, XAUDIO2_PROCESSOR);
; 1285 : 
; 1286 :     static HMODULE s_dllInstance = NULL;
; 1287 :     static XAudio2CreateWithVersionInfoFunc s_pfnAudio2CreateWithVersion = NULL;
; 1288 :     static XAudio2CreateInfoFunc s_pfnAudio2Create = NULL;
; 1289 : 
; 1290 :     if (s_dllInstance == NULL)

  00012	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?s_dllInstance@?1??XAudio2Create@@9@9, 0 ; `XAudio2Create'::`2'::s_dllInstance
  0001a	0f 85 91 00 00
	00		 jne	 $LN2@XAudio2Cre

; 1291 :     {
; 1292 :         s_dllInstance = LoadLibraryEx(XAUDIO2_DLL, NULL, LOAD_LIBRARY_SEARCH_SYSTEM32);

  00020	41 b8 00 08 00
	00		 mov	 r8d, 2048		; 00000800H
  00026	33 d2		 xor	 edx, edx
  00028	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BM@IMMHPOFC@?$AAx?$AAa?$AAu?$AAd?$AAi?$AAo?$AA2?$AA_?$AA9?$AA?4?$AAd?$AAl?$AAl@
  0002f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_LoadLibraryExW
  00035	48 89 05 00 00
	00 00		 mov	 QWORD PTR ?s_dllInstance@?1??XAudio2Create@@9@9, rax ; `XAudio2Create'::`2'::s_dllInstance

; 1293 :         if (s_dllInstance == NULL)

  0003c	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?s_dllInstance@?1??XAudio2Create@@9@9, 0 ; `XAudio2Create'::`2'::s_dllInstance
  00044	75 12		 jne	 SHORT $LN3@XAudio2Cre

; 1294 :         {
; 1295 :             return HRESULT_FROM_WIN32(GetLastError());

  00046	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetLastError
  0004c	8b c8		 mov	 ecx, eax
  0004e	e8 00 00 00 00	 call	 HRESULT_FROM_WIN32
  00053	e9 93 00 00 00	 jmp	 $LN1@XAudio2Cre
$LN3@XAudio2Cre:

; 1296 :         }
; 1297 : 
; 1298 :         s_pfnAudio2CreateWithVersion = (XAudio2CreateWithVersionInfoFunc)(void*)GetProcAddress(s_dllInstance, "XAudio2CreateWithVersionInfo");

  00058	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BN@LCGMINPD@XAudio2CreateWithVersionInfo@
  0005f	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?s_dllInstance@?1??XAudio2Create@@9@9 ; `XAudio2Create'::`2'::s_dllInstance
  00066	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetProcAddress
  0006c	48 89 05 00 00
	00 00		 mov	 QWORD PTR ?s_pfnAudio2CreateWithVersion@?1??XAudio2Create@@9@9, rax ; `XAudio2Create'::`2'::s_pfnAudio2CreateWithVersion

; 1299 :         if (s_pfnAudio2CreateWithVersion == NULL)

  00073	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?s_pfnAudio2CreateWithVersion@?1??XAudio2Create@@9@9, 0 ; `XAudio2Create'::`2'::s_pfnAudio2CreateWithVersion
  0007b	75 34		 jne	 SHORT $LN4@XAudio2Cre

; 1300 :         {
; 1301 :             s_pfnAudio2Create = (XAudio2CreateInfoFunc)(void*)GetProcAddress(s_dllInstance, "XAudio2Create");

  0007d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0O@MFBKMJDH@XAudio2Create@
  00084	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?s_dllInstance@?1??XAudio2Create@@9@9 ; `XAudio2Create'::`2'::s_dllInstance
  0008b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetProcAddress
  00091	48 89 05 00 00
	00 00		 mov	 QWORD PTR ?s_pfnAudio2Create@?1??XAudio2Create@@9@9, rax ; `XAudio2Create'::`2'::s_pfnAudio2Create

; 1302 :             if (s_pfnAudio2Create == NULL)

  00098	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?s_pfnAudio2Create@?1??XAudio2Create@@9@9, 0 ; `XAudio2Create'::`2'::s_pfnAudio2Create
  000a0	75 0f		 jne	 SHORT $LN5@XAudio2Cre

; 1303 :             {
; 1304 :                 return HRESULT_FROM_WIN32(GetLastError());

  000a2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetLastError
  000a8	8b c8		 mov	 ecx, eax
  000aa	e8 00 00 00 00	 call	 HRESULT_FROM_WIN32
  000af	eb 3a		 jmp	 SHORT $LN1@XAudio2Cre
$LN5@XAudio2Cre:
$LN4@XAudio2Cre:
$LN2@XAudio2Cre:

; 1305 :             }
; 1306 :         }
; 1307 :     }
; 1308 : 
; 1309 :     if (s_pfnAudio2CreateWithVersion != NULL)

  000b1	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?s_pfnAudio2CreateWithVersion@?1??XAudio2Create@@9@9, 0 ; `XAudio2Create'::`2'::s_pfnAudio2CreateWithVersion
  000b9	74 1c		 je	 SHORT $LN6@XAudio2Cre

; 1310 :     {
; 1311 :         return (*s_pfnAudio2CreateWithVersion)(ppXAudio2, Flags, XAudio2Processor, NTDDI_VERSION);

  000bb	41 b9 08 00 00
	0a		 mov	 r9d, 167772168		; 0a000008H
  000c1	44 8b 44 24 40	 mov	 r8d, DWORD PTR XAudio2Processor$[rsp]
  000c6	8b 54 24 38	 mov	 edx, DWORD PTR Flags$[rsp]
  000ca	48 8b 4c 24 30	 mov	 rcx, QWORD PTR ppXAudio2$[rsp]
  000cf	ff 15 00 00 00
	00		 call	 QWORD PTR ?s_pfnAudio2CreateWithVersion@?1??XAudio2Create@@9@9 ; `XAudio2Create'::`2'::s_pfnAudio2CreateWithVersion
  000d5	eb 14		 jmp	 SHORT $LN1@XAudio2Cre
$LN6@XAudio2Cre:

; 1312 :     }
; 1313 :     return (*s_pfnAudio2Create)(ppXAudio2, Flags, XAudio2Processor);

  000d7	44 8b 44 24 40	 mov	 r8d, DWORD PTR XAudio2Processor$[rsp]
  000dc	8b 54 24 38	 mov	 edx, DWORD PTR Flags$[rsp]
  000e0	48 8b 4c 24 30	 mov	 rcx, QWORD PTR ppXAudio2$[rsp]
  000e5	ff 15 00 00 00
	00		 call	 QWORD PTR ?s_pfnAudio2Create@?1??XAudio2Create@@9@9 ; `XAudio2Create'::`2'::s_pfnAudio2Create
$LN1@XAudio2Cre:

; 1314 : }

  000eb	48 83 c4 28	 add	 rsp, 40			; 00000028H
  000ef	c3		 ret	 0
XAudio2Create ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.19041.0\shared\winerror.h
;	COMDAT HRESULT_FROM_WIN32
_TEXT	SEGMENT
tv68 = 0
x$ = 32
HRESULT_FROM_WIN32 PROC					; COMDAT

; 29097: FORCEINLINE _Translates_Win32_to_HRESULT_(x) HRESULT HRESULT_FROM_WIN32(unsigned long x) { return (HRESULT)(x) <= 0 ? (HRESULT)(x) : (HRESULT) (((x) & 0x0000FFFF) | (FACILITY_WIN32 << 16) | 0x80000000);}

$LN5:
  00000	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00004	48 83 ec 18	 sub	 rsp, 24
  00008	83 7c 24 20 00	 cmp	 DWORD PTR x$[rsp], 0
  0000d	7f 09		 jg	 SHORT $LN3@HRESULT_FR
  0000f	8b 44 24 20	 mov	 eax, DWORD PTR x$[rsp]
  00013	89 04 24	 mov	 DWORD PTR tv68[rsp], eax
  00016	eb 15		 jmp	 SHORT $LN4@HRESULT_FR
$LN3@HRESULT_FR:
  00018	8b 44 24 20	 mov	 eax, DWORD PTR x$[rsp]
  0001c	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  00021	0d 00 00 07 00	 or	 eax, 458752		; 00070000H
  00026	0f ba e8 1f	 bts	 eax, 31
  0002a	89 04 24	 mov	 DWORD PTR tv68[rsp], eax
$LN4@HRESULT_FR:
  0002d	8b 04 24	 mov	 eax, DWORD PTR tv68[rsp]
  00030	48 83 c4 18	 add	 rsp, 24
  00034	c3		 ret	 0
HRESULT_FROM_WIN32 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File W:\new-horizons\code\win32_horizons.c
_TEXT	SEGMENT
Input$1 = 96
Pad$2 = 104
tv89 = 112
Win32RefreshRate$3 = 116
MonitorRefreshHz$4 = 120
tv335 = 124
tv343 = 128
Vibration$5 = 132
WindowResized$6 = 136
ShouldClose$7 = 140
DesiredSchedularMS$ = 144
GameUpdateHz$8 = 148
DeltaTime$9 = 152
GameCodeDllName$ = 160
NewWindowDimension$10 = 168
PlatformMemorySize$11 = 176
GameCodeTempDllName$ = 184
Center$12 = 192
EndCounter$13 = 200
LastCounter$14 = 208
GameCodeLockName$ = 216
SleepIsGranular$ = 224
TargetSecondsPerFrame$15 = 228
TotalGameMemorySize$16 = 232
BaseAddress$17 = 240
PerfCountFrequencyResult$ = 248
DeviceContext$18 = 256
NewDllWriteTime$19 = 264
ControllerState$20 = 272
WindowRect$21 = 288
Game$22 = 304
Platform$23 = 336
WindowClass$ = 496
Message$24 = 576
GameMemory$ = 624
$T25 = 816
$T26 = 848
Instance$ = 912
PrevInstance$ = 920
CmdLine$ = 928
CmdShow$ = 936
WinMain	PROC

; 597  : {

$LN25:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	56		 push	 rsi
  00015	57		 push	 rdi
  00016	48 81 ec 78 03
	00 00		 sub	 rsp, 888		; 00000378H

; 598  :     // Assert((uint64)(*((int64*)__readgsqword(0x60) + 0x23)) >= 10);
; 599  :     
; 600  :     game_memory GameMemory = {0};

  0001d	48 8d 84 24 70
	02 00 00	 lea	 rax, QWORD PTR GameMemory$[rsp]
  00025	48 8b f8	 mov	 rdi, rax
  00028	33 c0		 xor	 eax, eax
  0002a	b9 c0 00 00 00	 mov	 ecx, 192		; 000000c0H
  0002f	f3 aa		 rep stosb

; 601  :     {
; 602  : #if HORIZONS_INTERNAL
; 603  :         LPVOID BaseAddress = (LPVOID)Tebibytes(2);

  00031	48 b8 00 00 00
	00 00 02 00 00	 mov	 rax, 2199023255552	; 0000020000000000H
  0003b	48 89 84 24 f0
	00 00 00	 mov	 QWORD PTR BaseAddress$17[rsp], rax

; 604  : #else
; 605  :         LPVOID BaseAddress = 0;
; 606  : #endif
; 607  :         
; 608  :         platform_api Platform;
; 609  :         Platform.OpenFile = Win32OpenFile;

  00043	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:Win32OpenFile
  0004a	48 89 84 24 50
	01 00 00	 mov	 QWORD PTR Platform$23[rsp], rax

; 610  :         Platform.OpenFile8 = Win32OpenFile8;

  00052	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:Win32OpenFile8
  00059	48 89 84 24 58
	01 00 00	 mov	 QWORD PTR Platform$23[rsp+8], rax

; 611  :         Platform.GetFileSize = Win32GetFileSize;

  00061	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:Win32GetFileSize
  00068	48 89 84 24 60
	01 00 00	 mov	 QWORD PTR Platform$23[rsp+16], rax

; 612  :         Platform.ReadEntireFile = Win32ReadEntireFile;

  00070	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:Win32ReadEntireFile
  00077	48 89 84 24 68
	01 00 00	 mov	 QWORD PTR Platform$23[rsp+24], rax

; 613  :         Platform.WriteEntireFile = Win32WriteEntireFile;

  0007f	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:Win32WriteEntireFile
  00086	48 89 84 24 70
	01 00 00	 mov	 QWORD PTR Platform$23[rsp+32], rax

; 614  :         Platform.CloseFile = Win32CloseFile;

  0008e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:Win32CloseFile
  00095	48 89 84 24 78
	01 00 00	 mov	 QWORD PTR Platform$23[rsp+40], rax

; 615  :         Platform.CreateMesh = Win32CreateMesh;

  0009d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:Win32CreateMesh
  000a4	48 89 84 24 80
	01 00 00	 mov	 QWORD PTR Platform$23[rsp+48], rax

; 616  :         Platform.PopMesh = Win32PopMesh;

  000ac	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:Win32PopMesh
  000b3	48 89 84 24 88
	01 00 00	 mov	 QWORD PTR Platform$23[rsp+56], rax

; 617  :         Platform.CreateTexture = Win32CreateTexture;

  000bb	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:Win32CreateTexture
  000c2	48 89 84 24 90
	01 00 00	 mov	 QWORD PTR Platform$23[rsp+64], rax

; 618  :         Platform.CreateShader = Win32CreateShader;

  000ca	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:Win32CreateShader
  000d1	48 89 84 24 98
	01 00 00	 mov	 QWORD PTR Platform$23[rsp+72], rax

; 619  :         Platform.RenderMesh = Win32RenderMesh;

  000d9	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:Win32RenderMesh
  000e0	48 89 84 24 a0
	01 00 00	 mov	 QWORD PTR Platform$23[rsp+80], rax

; 620  :         Platform.CreateSound = Win32CreateSound;

  000e8	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:Win32CreateSound
  000ef	48 89 84 24 a8
	01 00 00	 mov	 QWORD PTR Platform$23[rsp+88], rax

; 621  :         Platform.PlaySound = Win32PlaySound;

  000f7	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:Win32PlaySound
  000fe	48 89 84 24 b0
	01 00 00	 mov	 QWORD PTR Platform$23[rsp+96], rax

; 622  :         Platform.SetSoundVolume = Win32SetSoundVolume;

  00106	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:Win32SetSoundVolume
  0010d	48 89 84 24 b8
	01 00 00	 mov	 QWORD PTR Platform$23[rsp+104], rax

; 623  :         Platform.StopSound = Win32StopSound;

  00115	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:Win32StopSound
  0011c	48 89 84 24 c0
	01 00 00	 mov	 QWORD PTR Platform$23[rsp+112], rax

; 624  :         Platform.SoundIsPlaying = Win32SoundIsPlaying;

  00124	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:Win32SoundIsPlaying
  0012b	48 89 84 24 d0
	01 00 00	 mov	 QWORD PTR Platform$23[rsp+128], rax

; 625  :         Platform.DeleteSound = Win32DeleteSound;

  00133	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:Win32DeleteSound
  0013a	48 89 84 24 c8
	01 00 00	 mov	 QWORD PTR Platform$23[rsp+120], rax

; 626  :         Platform.CopyMemory = Win32CopyMemory;

  00142	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:Win32CopyMemory
  00149	48 89 84 24 d8
	01 00 00	 mov	 QWORD PTR Platform$23[rsp+136], rax

; 627  :         Platform.ZeroMemory = Win32ZeroMemory;

  00151	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:Win32ZeroMemory
  00158	48 89 84 24 e0
	01 00 00	 mov	 QWORD PTR Platform$23[rsp+144], rax

; 628  :         Platform.OutputString = Win32OutputString;

  00160	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:Win32OutputString
  00167	48 89 84 24 e8
	01 00 00	 mov	 QWORD PTR Platform$23[rsp+152], rax

; 629  :         
; 630  :         GameMemory.PermanentStorageSize = Mebibytes(64);

  0016f	48 c7 84 24 70
	02 00 00 00 00
	00 04		 mov	 QWORD PTR GameMemory$[rsp], 67108864 ; 04000000H

; 631  :         GameMemory.TransientStorageSize = Gibibytes(1);

  0017b	48 c7 84 24 80
	02 00 00 00 00
	00 40		 mov	 QWORD PTR GameMemory$[rsp+16], 1073741824 ; 40000000H

; 632  :         GameMemory.Platform = Platform;

  00187	48 8d 84 24 90
	02 00 00	 lea	 rax, QWORD PTR GameMemory$[rsp+32]
  0018f	48 8d 8c 24 50
	01 00 00	 lea	 rcx, QWORD PTR Platform$23[rsp]
  00197	48 8b f8	 mov	 rdi, rax
  0019a	48 8b f1	 mov	 rsi, rcx
  0019d	b9 a0 00 00 00	 mov	 ecx, 160		; 000000a0H
  001a2	f3 a4		 rep movsb

; 633  :         
; 634  :         memory_index PlatformMemorySize = Mebibytes(64);

  001a4	48 c7 84 24 b0
	00 00 00 00 00
	00 04		 mov	 QWORD PTR PlatformMemorySize$11[rsp], 67108864 ; 04000000H

; 635  :         
; 636  :         memory_index TotalGameMemorySize = GameMemory.PermanentStorageSize + GameMemory.TransientStorageSize + PlatformMemorySize;

  001b0	48 8b 84 24 80
	02 00 00	 mov	 rax, QWORD PTR GameMemory$[rsp+16]
  001b8	48 8b 8c 24 70
	02 00 00	 mov	 rcx, QWORD PTR GameMemory$[rsp]
  001c0	48 03 c8	 add	 rcx, rax
  001c3	48 8b c1	 mov	 rax, rcx
  001c6	48 03 84 24 b0
	00 00 00	 add	 rax, QWORD PTR PlatformMemorySize$11[rsp]
  001ce	48 89 84 24 e8
	00 00 00	 mov	 QWORD PTR TotalGameMemorySize$16[rsp], rax

; 637  :         GlobalState = VirtualAlloc(BaseAddress, sizeof(win32_state) + TotalGameMemorySize,

  001d6	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR TotalGameMemorySize$16[rsp]
  001de	48 05 c8 01 00
	00		 add	 rax, 456		; 000001c8H
  001e4	41 b9 04 00 00
	00		 mov	 r9d, 4
  001ea	41 b8 00 30 00
	00		 mov	 r8d, 12288		; 00003000H
  001f0	48 8b d0	 mov	 rdx, rax
  001f3	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR BaseAddress$17[rsp]
  001fb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_VirtualAlloc
  00201	48 89 05 00 00
	00 00		 mov	 QWORD PTR GlobalState, rax

; 638  :                                    MEM_RESERVE|MEM_COMMIT, PAGE_READWRITE);
; 639  :         
; 640  :         InitializeArena(&GlobalState->Arena, (u8 *)GlobalState + sizeof(win32_state), PlatformMemorySize);

  00208	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR GlobalState
  0020f	48 05 c8 01 00
	00		 add	 rax, 456		; 000001c8H
  00215	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR GlobalState
  0021c	48 81 c1 b0 01
	00 00		 add	 rcx, 432		; 000001b0H
  00223	4c 8b 84 24 b0
	00 00 00	 mov	 r8, QWORD PTR PlatformMemorySize$11[rsp]
  0022b	48 8b d0	 mov	 rdx, rax
  0022e	e8 00 00 00 00	 call	 InitializeArena

; 641  :         GameMemory.PermanentStorage = GlobalState->Arena.Memory + PlatformMemorySize;

  00233	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR GlobalState
  0023a	48 8b 80 b0 01
	00 00		 mov	 rax, QWORD PTR [rax+432]
  00241	48 03 84 24 b0
	00 00 00	 add	 rax, QWORD PTR PlatformMemorySize$11[rsp]
  00249	48 89 84 24 78
	02 00 00	 mov	 QWORD PTR GameMemory$[rsp+8], rax

; 642  :         GameMemory.TransientStorage = (u8 *)GameMemory.PermanentStorage + GameMemory.PermanentStorageSize;

  00251	48 8b 84 24 70
	02 00 00	 mov	 rax, QWORD PTR GameMemory$[rsp]
  00259	48 8b 8c 24 78
	02 00 00	 mov	 rcx, QWORD PTR GameMemory$[rsp+8]
  00261	48 03 c8	 add	 rcx, rax
  00264	48 8b c1	 mov	 rax, rcx
  00267	48 89 84 24 88
	02 00 00	 mov	 QWORD PTR GameMemory$[rsp+24], rax

; 643  :     }
; 644  :     
; 645  :     LARGE_INTEGER PerfCountFrequencyResult;
; 646  :     QueryPerformanceFrequency(&PerfCountFrequencyResult);

  0026f	48 8d 8c 24 f8
	00 00 00	 lea	 rcx, QWORD PTR PerfCountFrequencyResult$[rsp]
  00277	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_QueryPerformanceFrequency

; 647  :     GlobalState->PerfCountFrequency = PerfCountFrequencyResult.QuadPart;

  0027d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR GlobalState
  00284	48 8b 8c 24 f8
	00 00 00	 mov	 rcx, QWORD PTR PerfCountFrequencyResult$[rsp]
  0028c	48 89 88 b0 00
	00 00		 mov	 QWORD PTR [rax+176], rcx

; 648  :     
; 649  :     // NOTE(evan): Set the Windows schedular granularity to 1ms
; 650  :     // so that Sleep() can be more granular
; 651  :     UINT DesiredSchedularMS = 1;

  00293	c7 84 24 90 00
	00 00 01 00 00
	00		 mov	 DWORD PTR DesiredSchedularMS$[rsp], 1

; 652  :     b32 SleepIsGranular = (timeBeginPeriod(DesiredSchedularMS) == TIMERR_NOERROR);

  0029e	8b 8c 24 90 00
	00 00		 mov	 ecx, DWORD PTR DesiredSchedularMS$[rsp]
  002a5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_timeBeginPeriod
  002ab	85 c0		 test	 eax, eax
  002ad	75 0a		 jne	 SHORT $LN19@WinMain
  002af	c7 44 24 70 01
	00 00 00	 mov	 DWORD PTR tv89[rsp], 1
  002b7	eb 08		 jmp	 SHORT $LN20@WinMain
$LN19@WinMain:
  002b9	c7 44 24 70 00
	00 00 00	 mov	 DWORD PTR tv89[rsp], 0
$LN20@WinMain:
  002c1	8b 44 24 70	 mov	 eax, DWORD PTR tv89[rsp]
  002c5	89 84 24 e0 00
	00 00		 mov	 DWORD PTR SleepIsGranular$[rsp], eax

; 653  :     
; 654  :     Win32InitCOM();

  002cc	e8 00 00 00 00	 call	 Win32InitCOM

; 655  :     Win32LoadXInput();

  002d1	e8 00 00 00 00	 call	 Win32LoadXInput

; 656  :     Win32InitXAudio2();

  002d6	e8 00 00 00 00	 call	 Win32InitXAudio2

; 657  :     
; 658  :     WNDCLASSW WindowClass = {0};

  002db	48 8d 84 24 f0
	01 00 00	 lea	 rax, QWORD PTR WindowClass$[rsp]
  002e3	48 8b f8	 mov	 rdi, rax
  002e6	33 c0		 xor	 eax, eax
  002e8	b9 48 00 00 00	 mov	 ecx, 72			; 00000048H
  002ed	f3 aa		 rep stosb

; 659  :     WindowClass.style = CS_HREDRAW|CS_VREDRAW|CS_OWNDC;

  002ef	c7 84 24 f0 01
	00 00 23 00 00
	00		 mov	 DWORD PTR WindowClass$[rsp], 35 ; 00000023H

; 660  :     WindowClass.lpfnWndProc = Win32WindowProc;

  002fa	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:Win32WindowProc
  00301	48 89 84 24 f8
	01 00 00	 mov	 QWORD PTR WindowClass$[rsp+8], rax

; 661  :     WindowClass.hInstance = Instance;

  00309	48 8b 84 24 90
	03 00 00	 mov	 rax, QWORD PTR Instance$[rsp]
  00311	48 89 84 24 08
	02 00 00	 mov	 QWORD PTR WindowClass$[rsp+24], rax

; 662  :     WindowClass.hCursor = LoadCursorW(0, IDC_ARROW);

  00319	ba 00 7f 00 00	 mov	 edx, 32512		; 00007f00H
  0031e	33 c9		 xor	 ecx, ecx
  00320	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_LoadCursorW
  00326	48 89 84 24 18
	02 00 00	 mov	 QWORD PTR WindowClass$[rsp+40], rax

; 663  :     WindowClass.lpszClassName = L"ChariotWindowClass";

  0032e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG140552
  00335	48 89 84 24 30
	02 00 00	 mov	 QWORD PTR WindowClass$[rsp+64], rax

; 664  :     
; 665  :     string16 *GameCodeDllName = L"horizons.dll";

  0033d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG140553
  00344	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR GameCodeDllName$[rsp], rax

; 666  :     string16 *GameCodeTempDllName = L"horizons_temp.dll";

  0034c	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG140554
  00353	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR GameCodeTempDllName$[rsp], rax

; 667  :     string16 *GameCodeLockName = L"lock.tmp";

  0035b	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG140555
  00362	48 89 84 24 d8
	00 00 00	 mov	 QWORD PTR GameCodeLockName$[rsp], rax

; 668  :     
; 669  :     if(RegisterClassW(&WindowClass))

  0036a	48 8d 8c 24 f0
	01 00 00	 lea	 rcx, QWORD PTR WindowClass$[rsp]
  00372	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_RegisterClassW
  00378	0f b7 c0	 movzx	 eax, ax
  0037b	85 c0		 test	 eax, eax
  0037d	0f 84 61 06 00
	00		 je	 $LN6@WinMain

; 670  :     {
; 671  :         GlobalState->Window = CreateWindowW(WindowClass.lpszClassName, L"New Horizons",

  00383	48 c7 44 24 58
	00 00 00 00	 mov	 QWORD PTR [rsp+88], 0
  0038c	48 8b 84 24 90
	03 00 00	 mov	 rax, QWORD PTR Instance$[rsp]
  00394	48 89 44 24 50	 mov	 QWORD PTR [rsp+80], rax
  00399	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR [rsp+72], 0
  003a2	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR [rsp+64], 0
  003ab	c7 44 24 38 bc
	02 00 00	 mov	 DWORD PTR [rsp+56], 700	; 000002bcH
  003b3	c7 44 24 30 78
	05 00 00	 mov	 DWORD PTR [rsp+48], 1400 ; 00000578H
  003bb	c7 44 24 28 00
	00 00 80	 mov	 DWORD PTR [rsp+40], -2147483648 ; ffffffff80000000H
  003c3	c7 44 24 20 00
	00 00 80	 mov	 DWORD PTR [rsp+32], -2147483648 ; ffffffff80000000H
  003cb	41 b9 00 00 cf
	10		 mov	 r9d, 282001408		; 10cf0000H
  003d1	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG140558
  003d8	48 8b 94 24 30
	02 00 00	 mov	 rdx, QWORD PTR WindowClass$[rsp+64]
  003e0	33 c9		 xor	 ecx, ecx
  003e2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_CreateWindowExW
  003e8	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR GlobalState
  003ef	48 89 81 90 01
	00 00		 mov	 QWORD PTR [rcx+400], rax

; 672  :                                             WS_OVERLAPPEDWINDOW|WS_VISIBLE,
; 673  :                                             CW_USEDEFAULT, CW_USEDEFAULT, 1400, 700,
; 674  :                                             0, 0, Instance, 0);
; 675  :         
; 676  :         GlobalState->ShowCursor = true;

  003f6	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR GlobalState
  003fd	c7 80 b8 00 00
	00 01 00 00 00	 mov	 DWORD PTR [rax+184], 1

; 677  :         
; 678  :         if(GlobalState->Window)

  00407	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR GlobalState
  0040e	48 83 b8 90 01
	00 00 00	 cmp	 QWORD PTR [rax+400], 0
  00416	0f 84 bf 05 00
	00		 je	 $LN8@WinMain

; 679  :         {
; 680  :             HDC DeviceContext = GetDC(GlobalState->Window);

  0041c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR GlobalState
  00423	48 8b 88 90 01
	00 00		 mov	 rcx, QWORD PTR [rax+400]
  0042a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetDC
  00430	48 89 84 24 00
	01 00 00	 mov	 QWORD PTR DeviceContext$18[rsp], rax

; 681  :             
; 682  :             s32 MonitorRefreshHz = 60;

  00438	c7 44 24 78 3c
	00 00 00	 mov	 DWORD PTR MonitorRefreshHz$4[rsp], 60 ; 0000003cH

; 683  :             s32 Win32RefreshRate = GetDeviceCaps(DeviceContext, VREFRESH);

  00440	ba 74 00 00 00	 mov	 edx, 116		; 00000074H
  00445	48 8b 8c 24 00
	01 00 00	 mov	 rcx, QWORD PTR DeviceContext$18[rsp]
  0044d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetDeviceCaps
  00453	89 44 24 74	 mov	 DWORD PTR Win32RefreshRate$3[rsp], eax

; 684  :             if(Win32RefreshRate > 1)

  00457	83 7c 24 74 01	 cmp	 DWORD PTR Win32RefreshRate$3[rsp], 1
  0045c	7e 08		 jle	 SHORT $LN10@WinMain

; 685  :             {
; 686  :                 MonitorRefreshHz = Win32RefreshRate;

  0045e	8b 44 24 74	 mov	 eax, DWORD PTR Win32RefreshRate$3[rsp]
  00462	89 44 24 78	 mov	 DWORD PTR MonitorRefreshHz$4[rsp], eax
$LN10@WinMain:

; 687  :             }
; 688  :             f32 GameUpdateHz = ((f32)MonitorRefreshHz);

  00466	f3 0f 2a 44 24
	78		 cvtsi2ss xmm0, DWORD PTR MonitorRefreshHz$4[rsp]
  0046c	f3 0f 11 84 24
	94 00 00 00	 movss	 DWORD PTR GameUpdateHz$8[rsp], xmm0

; 689  :             f32 TargetSecondsPerFrame = 1.0f / (f32)GameUpdateHz;

  00475	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0047d	f3 0f 5e 84 24
	94 00 00 00	 divss	 xmm0, DWORD PTR GameUpdateHz$8[rsp]
  00486	f3 0f 11 84 24
	e4 00 00 00	 movss	 DWORD PTR TargetSecondsPerFrame$15[rsp], xmm0

; 690  :             
; 691  :             win32_game_code Game = Win32LoadGameCode(GameCodeDllName, GameCodeTempDllName, GameCodeLockName);

  0048f	4c 8b 8c 24 d8
	00 00 00	 mov	 r9, QWORD PTR GameCodeLockName$[rsp]
  00497	4c 8b 84 24 b8
	00 00 00	 mov	 r8, QWORD PTR GameCodeTempDllName$[rsp]
  0049f	48 8b 94 24 a0
	00 00 00	 mov	 rdx, QWORD PTR GameCodeDllName$[rsp]
  004a7	48 8d 8c 24 30
	03 00 00	 lea	 rcx, QWORD PTR $T25[rsp]
  004af	e8 00 00 00 00	 call	 Win32LoadGameCode
  004b4	48 8d 8c 24 30
	01 00 00	 lea	 rcx, QWORD PTR Game$22[rsp]
  004bc	48 8b f9	 mov	 rdi, rcx
  004bf	48 8b f0	 mov	 rsi, rax
  004c2	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  004c7	f3 a4		 rep movsb

; 692  :             
; 693  :             if(GameMemory.PermanentStorage)

  004c9	48 83 bc 24 78
	02 00 00 00	 cmp	 QWORD PTR GameMemory$[rsp+8], 0
  004d2	0f 84 01 05 00
	00		 je	 $LN11@WinMain

; 694  :             {
; 695  :                 GlobalState->WindowDimension = Win32GetWindowDimension(GlobalState->Window);

  004d8	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR GlobalState
  004df	48 8b 88 90 01
	00 00		 mov	 rcx, QWORD PTR [rax+400]
  004e6	e8 00 00 00 00	 call	 Win32GetWindowDimension
  004eb	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR GlobalState
  004f2	48 89 81 9c 01
	00 00		 mov	 QWORD PTR [rcx+412], rax

; 696  :                 Win32InitD3D11(&GlobalState->D3D11State, GlobalState->Window);

  004f9	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR GlobalState
  00500	48 05 c0 00 00
	00		 add	 rax, 192		; 000000c0H
  00506	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR GlobalState
  0050d	48 8b 91 90 01
	00 00		 mov	 rdx, QWORD PTR [rcx+400]
  00514	48 8b c8	 mov	 rcx, rax
  00517	e8 00 00 00 00	 call	 Win32InitD3D11

; 697  :                 
; 698  :                 LARGE_INTEGER LastCounter = Win32GetWallClock();

  0051c	e8 00 00 00 00	 call	 Win32GetWallClock
  00521	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR LastCounter$14[rsp], rax

; 699  :                 b32 ShouldClose = false;

  00529	c7 84 24 8c 00
	00 00 00 00 00
	00		 mov	 DWORD PTR ShouldClose$7[rsp], 0
$LN2@WinMain:

; 700  :                 while(!ShouldClose)

  00534	83 bc 24 8c 00
	00 00 00	 cmp	 DWORD PTR ShouldClose$7[rsp], 0
  0053c	0f 85 97 04 00
	00		 jne	 $LN3@WinMain

; 701  :                 {
; 702  :                     f32 DeltaTime;
; 703  :                     {
; 704  :                         LARGE_INTEGER EndCounter = Win32GetWallClock();

  00542	e8 00 00 00 00	 call	 Win32GetWallClock
  00547	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR EndCounter$13[rsp], rax

; 705  :                         DeltaTime = Win32GetSecondsElapsed(LastCounter, EndCounter);

  0054f	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR EndCounter$13[rsp]
  00557	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR LastCounter$14[rsp]
  0055f	e8 00 00 00 00	 call	 Win32GetSecondsElapsed
  00564	f3 0f 11 84 24
	98 00 00 00	 movss	 DWORD PTR DeltaTime$9[rsp], xmm0

; 706  :                         LastCounter = EndCounter;

  0056d	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR EndCounter$13[rsp]
  00575	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR LastCounter$14[rsp], rax

; 707  :                     }
; 708  :                     
; 709  :                     {
; 710  :                         FILETIME NewDllWriteTime = Win32GetLastWriteTime(GameCodeDllName);

  0057d	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR GameCodeDllName$[rsp]
  00585	e8 00 00 00 00	 call	 Win32GetLastWriteTime
  0058a	48 89 84 24 08
	01 00 00	 mov	 QWORD PTR NewDllWriteTime$19[rsp], rax

; 711  :                         if(CompareFileTime(&Game.LastWriteTime, &NewDllWriteTime))

  00592	48 8d 94 24 08
	01 00 00	 lea	 rdx, QWORD PTR NewDllWriteTime$19[rsp]
  0059a	48 8d 8c 24 40
	01 00 00	 lea	 rcx, QWORD PTR Game$22[rsp+16]
  005a2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_CompareFileTime
  005a8	85 c0		 test	 eax, eax
  005aa	74 47		 je	 SHORT $LN12@WinMain

; 712  :                         {
; 713  :                             Win32UnloadGameCode(&Game);

  005ac	48 8d 8c 24 30
	01 00 00	 lea	 rcx, QWORD PTR Game$22[rsp]
  005b4	e8 00 00 00 00	 call	 Win32UnloadGameCode

; 714  :                             Game = Win32LoadGameCode(GameCodeDllName, GameCodeTempDllName, GameCodeLockName);

  005b9	4c 8b 8c 24 d8
	00 00 00	 mov	 r9, QWORD PTR GameCodeLockName$[rsp]
  005c1	4c 8b 84 24 b8
	00 00 00	 mov	 r8, QWORD PTR GameCodeTempDllName$[rsp]
  005c9	48 8b 94 24 a0
	00 00 00	 mov	 rdx, QWORD PTR GameCodeDllName$[rsp]
  005d1	48 8d 8c 24 50
	03 00 00	 lea	 rcx, QWORD PTR $T26[rsp]
  005d9	e8 00 00 00 00	 call	 Win32LoadGameCode
  005de	48 8d 8c 24 30
	01 00 00	 lea	 rcx, QWORD PTR Game$22[rsp]
  005e6	48 8b f9	 mov	 rdi, rcx
  005e9	48 8b f0	 mov	 rsi, rax
  005ec	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  005f1	f3 a4		 rep movsb
$LN12@WinMain:

; 715  :                         }
; 716  :                     }
; 717  :                     
; 718  :                     GlobalState->GameInput.Keyboard.Backspace = false;

  005f3	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR GlobalState
  005fa	c7 40 34 00 00
	00 00		 mov	 DWORD PTR [rax+52], 0

; 719  :                     GlobalState->GameInput.Keyboard.HasChar = false;

  00601	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR GlobalState
  00608	c7 00 00 00 00
	00		 mov	 DWORD PTR [rax], 0
$LN4@WinMain:

; 720  :                     {
; 721  :                         MSG Message;
; 722  :                         while(PeekMessageA(&Message, 0, 0, 0, PM_REMOVE))

  0060e	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR [rsp+32], 1
  00616	45 33 c9	 xor	 r9d, r9d
  00619	45 33 c0	 xor	 r8d, r8d
  0061c	33 d2		 xor	 edx, edx
  0061e	48 8d 8c 24 40
	02 00 00	 lea	 rcx, QWORD PTR Message$24[rsp]
  00626	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_PeekMessageA
  0062c	85 c0		 test	 eax, eax
  0062e	74 1e		 je	 SHORT $LN5@WinMain

; 723  :                         {
; 724  :                             TranslateMessage(&Message);

  00630	48 8d 8c 24 40
	02 00 00	 lea	 rcx, QWORD PTR Message$24[rsp]
  00638	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_TranslateMessage

; 725  :                             DispatchMessageA(&Message);

  0063e	48 8d 8c 24 40
	02 00 00	 lea	 rcx, QWORD PTR Message$24[rsp]
  00646	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_DispatchMessageA

; 726  :                         }

  0064c	eb c0		 jmp	 SHORT $LN4@WinMain
$LN5@WinMain:

; 727  :                     }
; 728  :                     
; 729  :                     {
; 730  :                         game_controller_input *Input = &GlobalState->GameInput.Controller;

  0064e	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR GlobalState
  00655	48 83 c0 70	 add	 rax, 112		; 00000070H
  00659	48 89 44 24 60	 mov	 QWORD PTR Input$1[rsp], rax

; 731  :                         
; 732  :                         XINPUT_STATE ControllerState = {0};

  0065e	48 8d 84 24 10
	01 00 00	 lea	 rax, QWORD PTR ControllerState$20[rsp]
  00666	48 8b f8	 mov	 rdi, rax
  00669	33 c0		 xor	 eax, eax
  0066b	b9 10 00 00 00	 mov	 ecx, 16
  00670	f3 aa		 rep stosb

; 733  :                         XINPUT_GAMEPAD *Pad = &ControllerState.Gamepad;

  00672	48 8d 84 24 14
	01 00 00	 lea	 rax, QWORD PTR ControllerState$20[rsp+4]
  0067a	48 89 44 24 68	 mov	 QWORD PTR Pad$2[rsp], rax

; 734  :                         if(XInputGetState(0, &ControllerState) == ERROR_SUCCESS)

  0067f	48 8d 94 24 10
	01 00 00	 lea	 rdx, QWORD PTR ControllerState$20[rsp]
  00687	33 c9		 xor	 ecx, ecx
  00689	ff 15 00 00 00
	00		 call	 QWORD PTR XInputGetState_
  0068f	85 c0		 test	 eax, eax
  00691	0f 85 b3 01 00
	00		 jne	 $LN13@WinMain

; 735  :                         {
; 736  :                             Input->Connected = true;

  00697	48 8b 44 24 60	 mov	 rax, QWORD PTR Input$1[rsp]
  0069c	c7 00 01 00 00
	00		 mov	 DWORD PTR [rax], 1

; 737  :                             
; 738  :                             Input->Up = Pad->wButtons & XINPUT_GAMEPAD_DPAD_UP;

  006a2	48 8b 44 24 68	 mov	 rax, QWORD PTR Pad$2[rsp]
  006a7	0f b7 00	 movzx	 eax, WORD PTR [rax]
  006aa	83 e0 01	 and	 eax, 1
  006ad	48 8b 4c 24 60	 mov	 rcx, QWORD PTR Input$1[rsp]
  006b2	89 41 04	 mov	 DWORD PTR [rcx+4], eax

; 739  :                             Input->Down = Pad->wButtons & XINPUT_GAMEPAD_DPAD_DOWN;

  006b5	48 8b 44 24 68	 mov	 rax, QWORD PTR Pad$2[rsp]
  006ba	0f b7 00	 movzx	 eax, WORD PTR [rax]
  006bd	83 e0 02	 and	 eax, 2
  006c0	48 8b 4c 24 60	 mov	 rcx, QWORD PTR Input$1[rsp]
  006c5	89 41 0c	 mov	 DWORD PTR [rcx+12], eax

; 740  :                             Input->Left= Pad->wButtons & XINPUT_GAMEPAD_DPAD_LEFT;

  006c8	48 8b 44 24 68	 mov	 rax, QWORD PTR Pad$2[rsp]
  006cd	0f b7 00	 movzx	 eax, WORD PTR [rax]
  006d0	83 e0 04	 and	 eax, 4
  006d3	48 8b 4c 24 60	 mov	 rcx, QWORD PTR Input$1[rsp]
  006d8	89 41 08	 mov	 DWORD PTR [rcx+8], eax

; 741  :                             Input->Right= Pad->wButtons & XINPUT_GAMEPAD_DPAD_RIGHT;

  006db	48 8b 44 24 68	 mov	 rax, QWORD PTR Pad$2[rsp]
  006e0	0f b7 00	 movzx	 eax, WORD PTR [rax]
  006e3	83 e0 08	 and	 eax, 8
  006e6	48 8b 4c 24 60	 mov	 rcx, QWORD PTR Input$1[rsp]
  006eb	89 41 10	 mov	 DWORD PTR [rcx+16], eax

; 742  :                             
; 743  :                             Input->Start = Pad->wButtons & XINPUT_GAMEPAD_START;

  006ee	48 8b 44 24 68	 mov	 rax, QWORD PTR Pad$2[rsp]
  006f3	0f b7 00	 movzx	 eax, WORD PTR [rax]
  006f6	83 e0 10	 and	 eax, 16
  006f9	48 8b 4c 24 60	 mov	 rcx, QWORD PTR Input$1[rsp]
  006fe	89 41 14	 mov	 DWORD PTR [rcx+20], eax

; 744  :                             
; 745  :                             Input->LeftShoulder= Pad->wButtons & XINPUT_GAMEPAD_LEFT_SHOULDER;

  00701	48 8b 44 24 68	 mov	 rax, QWORD PTR Pad$2[rsp]
  00706	0f b7 00	 movzx	 eax, WORD PTR [rax]
  00709	25 00 01 00 00	 and	 eax, 256		; 00000100H
  0070e	48 8b 4c 24 60	 mov	 rcx, QWORD PTR Input$1[rsp]
  00713	89 41 18	 mov	 DWORD PTR [rcx+24], eax

; 746  :                             Input->RightShoulder = Pad->wButtons & XINPUT_GAMEPAD_RIGHT_SHOULDER;

  00716	48 8b 44 24 68	 mov	 rax, QWORD PTR Pad$2[rsp]
  0071b	0f b7 00	 movzx	 eax, WORD PTR [rax]
  0071e	25 00 02 00 00	 and	 eax, 512		; 00000200H
  00723	48 8b 4c 24 60	 mov	 rcx, QWORD PTR Input$1[rsp]
  00728	89 41 1c	 mov	 DWORD PTR [rcx+28], eax

; 747  :                             
; 748  :                             Input->A = Pad->wButtons & XINPUT_GAMEPAD_A;

  0072b	48 8b 44 24 68	 mov	 rax, QWORD PTR Pad$2[rsp]
  00730	0f b7 00	 movzx	 eax, WORD PTR [rax]
  00733	25 00 10 00 00	 and	 eax, 4096		; 00001000H
  00738	48 8b 4c 24 60	 mov	 rcx, QWORD PTR Input$1[rsp]
  0073d	89 41 20	 mov	 DWORD PTR [rcx+32], eax

; 749  :                             Input->B = Pad->wButtons & XINPUT_GAMEPAD_B;

  00740	48 8b 44 24 68	 mov	 rax, QWORD PTR Pad$2[rsp]
  00745	0f b7 00	 movzx	 eax, WORD PTR [rax]
  00748	25 00 20 00 00	 and	 eax, 8192		; 00002000H
  0074d	48 8b 4c 24 60	 mov	 rcx, QWORD PTR Input$1[rsp]
  00752	89 41 24	 mov	 DWORD PTR [rcx+36], eax

; 750  :                             Input->X = Pad->wButtons & XINPUT_GAMEPAD_X;

  00755	48 8b 44 24 68	 mov	 rax, QWORD PTR Pad$2[rsp]
  0075a	0f b7 00	 movzx	 eax, WORD PTR [rax]
  0075d	25 00 40 00 00	 and	 eax, 16384		; 00004000H
  00762	48 8b 4c 24 60	 mov	 rcx, QWORD PTR Input$1[rsp]
  00767	89 41 28	 mov	 DWORD PTR [rcx+40], eax

; 751  :                             Input->Y = Pad->wButtons & XINPUT_GAMEPAD_Y;

  0076a	48 8b 44 24 68	 mov	 rax, QWORD PTR Pad$2[rsp]
  0076f	0f b7 00	 movzx	 eax, WORD PTR [rax]
  00772	25 00 80 00 00	 and	 eax, 32768		; 00008000H
  00777	48 8b 4c 24 60	 mov	 rcx, QWORD PTR Input$1[rsp]
  0077c	89 41 2c	 mov	 DWORD PTR [rcx+44], eax

; 752  :                             
; 753  :                             Input->LeftTrigger = Pad->bLeftTrigger;

  0077f	48 8b 44 24 68	 mov	 rax, QWORD PTR Pad$2[rsp]
  00784	0f b6 40 02	 movzx	 eax, BYTE PTR [rax+2]
  00788	48 8b 4c 24 60	 mov	 rcx, QWORD PTR Input$1[rsp]
  0078d	66 89 41 30	 mov	 WORD PTR [rcx+48], ax

; 754  :                             Input->RightTrigger = Pad->bLeftTrigger;

  00791	48 8b 44 24 68	 mov	 rax, QWORD PTR Pad$2[rsp]
  00796	0f b6 40 02	 movzx	 eax, BYTE PTR [rax+2]
  0079a	48 8b 4c 24 60	 mov	 rcx, QWORD PTR Input$1[rsp]
  0079f	66 89 41 32	 mov	 WORD PTR [rcx+50], ax

; 755  :                             
; 756  :                             Input->LeftThumbY = (Pad->sThumbLX > XINPUT_GAMEPAD_LEFT_THUMB_DEADZONE) ? Pad->sThumbLX : 0;

  007a3	48 8b 44 24 68	 mov	 rax, QWORD PTR Pad$2[rsp]
  007a8	0f bf 40 04	 movsx	 eax, WORD PTR [rax+4]
  007ac	3d a9 1e 00 00	 cmp	 eax, 7849		; 00001ea9H
  007b1	7e 0f		 jle	 SHORT $LN21@WinMain
  007b3	48 8b 44 24 68	 mov	 rax, QWORD PTR Pad$2[rsp]
  007b8	0f bf 40 04	 movsx	 eax, WORD PTR [rax+4]
  007bc	89 44 24 7c	 mov	 DWORD PTR tv335[rsp], eax
  007c0	eb 08		 jmp	 SHORT $LN22@WinMain
$LN21@WinMain:
  007c2	c7 44 24 7c 00
	00 00 00	 mov	 DWORD PTR tv335[rsp], 0
$LN22@WinMain:
  007ca	48 8b 44 24 60	 mov	 rax, QWORD PTR Input$1[rsp]
  007cf	0f b7 4c 24 7c	 movzx	 ecx, WORD PTR tv335[rsp]
  007d4	66 89 48 36	 mov	 WORD PTR [rax+54], cx

; 757  :                             Input->LeftThumbX = (Pad->sThumbLY > XINPUT_GAMEPAD_RIGHT_THUMB_DEADZONE) ? Pad->sThumbLY : 0;

  007d8	48 8b 44 24 68	 mov	 rax, QWORD PTR Pad$2[rsp]
  007dd	0f bf 40 06	 movsx	 eax, WORD PTR [rax+6]
  007e1	3d f1 21 00 00	 cmp	 eax, 8689		; 000021f1H
  007e6	7e 12		 jle	 SHORT $LN23@WinMain
  007e8	48 8b 44 24 68	 mov	 rax, QWORD PTR Pad$2[rsp]
  007ed	0f bf 40 06	 movsx	 eax, WORD PTR [rax+6]
  007f1	89 84 24 80 00
	00 00		 mov	 DWORD PTR tv343[rsp], eax
  007f8	eb 0b		 jmp	 SHORT $LN24@WinMain
$LN23@WinMain:
  007fa	c7 84 24 80 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv343[rsp], 0
$LN24@WinMain:
  00805	48 8b 44 24 60	 mov	 rax, QWORD PTR Input$1[rsp]
  0080a	0f b7 8c 24 80
	00 00 00	 movzx	 ecx, WORD PTR tv343[rsp]
  00812	66 89 48 34	 mov	 WORD PTR [rax+52], cx

; 758  :                             
; 759  :                             XINPUT_VIBRATION Vibration;
; 760  :                             Vibration.wLeftMotorSpeed = Input->LeftVibration;

  00816	48 8b 44 24 60	 mov	 rax, QWORD PTR Input$1[rsp]
  0081b	0f b7 40 38	 movzx	 eax, WORD PTR [rax+56]
  0081f	66 89 84 24 84
	00 00 00	 mov	 WORD PTR Vibration$5[rsp], ax

; 761  :                             Vibration.wRightMotorSpeed = Input->RightVibration;

  00827	48 8b 44 24 60	 mov	 rax, QWORD PTR Input$1[rsp]
  0082c	0f b7 40 3a	 movzx	 eax, WORD PTR [rax+58]
  00830	66 89 84 24 86
	00 00 00	 mov	 WORD PTR Vibration$5[rsp+2], ax

; 762  :                             XInputSetState(0, &Vibration);

  00838	48 8d 94 24 84
	00 00 00	 lea	 rdx, QWORD PTR Vibration$5[rsp]
  00840	33 c9		 xor	 ecx, ecx
  00842	ff 15 00 00 00
	00		 call	 QWORD PTR XInputSetState_

; 763  :                         }

  00848	eb 0b		 jmp	 SHORT $LN14@WinMain
$LN13@WinMain:

; 764  :                         else
; 765  :                         {
; 766  :                             Input->Connected = false;

  0084a	48 8b 44 24 60	 mov	 rax, QWORD PTR Input$1[rsp]
  0084f	c7 00 00 00 00
	00		 mov	 DWORD PTR [rax], 0
$LN14@WinMain:

; 767  :                             // NOTE(evan): Controller not connected, this is NOT an error
; 768  :                         }
; 769  :                     }
; 770  :                     
; 771  :                     {
; 772  :                         window_dimension NewWindowDimension = Win32GetWindowDimension(GlobalState->Window);

  00855	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR GlobalState
  0085c	48 8b 88 90 01
	00 00		 mov	 rcx, QWORD PTR [rax+400]
  00863	e8 00 00 00 00	 call	 Win32GetWindowDimension
  00868	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR NewWindowDimension$10[rsp], rax

; 773  :                         b32 WindowResized = false;

  00870	c7 84 24 88 00
	00 00 00 00 00
	00		 mov	 DWORD PTR WindowResized$6[rsp], 0

; 774  :                         if(NewWindowDimension.Width != GlobalState->WindowDimension.Width ||

  0087b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR GlobalState
  00882	8b 80 9c 01 00
	00		 mov	 eax, DWORD PTR [rax+412]
  00888	39 84 24 a8 00
	00 00		 cmp	 DWORD PTR NewWindowDimension$10[rsp], eax
  0088f	75 16		 jne	 SHORT $LN16@WinMain
  00891	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR GlobalState
  00898	8b 80 a0 01 00
	00		 mov	 eax, DWORD PTR [rax+416]
  0089e	39 84 24 ac 00
	00 00		 cmp	 DWORD PTR NewWindowDimension$10[rsp+4], eax
  008a5	74 21		 je	 SHORT $LN15@WinMain
$LN16@WinMain:

; 775  :                            NewWindowDimension.Height != GlobalState->WindowDimension.Height)
; 776  :                         {
; 777  :                             WindowResized = true;

  008a7	c7 84 24 88 00
	00 00 01 00 00
	00		 mov	 DWORD PTR WindowResized$6[rsp], 1

; 778  :                             GlobalState->WindowDimension = NewWindowDimension;

  008b2	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR GlobalState
  008b9	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR NewWindowDimension$10[rsp]
  008c1	48 89 88 9c 01
	00 00		 mov	 QWORD PTR [rax+412], rcx
$LN15@WinMain:

; 779  :                         }
; 780  :                         Win32D3D11BeginFrame(&GlobalState->D3D11State, GlobalState->WindowDimension, WindowResized);

  008c8	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR GlobalState
  008cf	48 05 c0 00 00
	00		 add	 rax, 192		; 000000c0H
  008d5	44 8b 84 24 88
	00 00 00	 mov	 r8d, DWORD PTR WindowResized$6[rsp]
  008dd	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR GlobalState
  008e4	48 8b 91 9c 01
	00 00		 mov	 rdx, QWORD PTR [rcx+412]
  008eb	48 8b c8	 mov	 rcx, rax
  008ee	e8 00 00 00 00	 call	 Win32D3D11BeginFrame

; 781  :                     }
; 782  :                     
; 783  :                     if(GlobalState->ShowCursor)

  008f3	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR GlobalState
  008fa	83 b8 b8 00 00
	00 00		 cmp	 DWORD PTR [rax+184], 0
  00901	74 5e		 je	 SHORT $LN17@WinMain

; 784  :                     {
; 785  :                         RECT WindowRect;
; 786  :                         GetClientRect(GlobalState->Window, &WindowRect);

  00903	48 8d 94 24 20
	01 00 00	 lea	 rdx, QWORD PTR WindowRect$21[rsp]
  0090b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR GlobalState
  00912	48 8b 88 90 01
	00 00		 mov	 rcx, QWORD PTR [rax+400]
  00919	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetClientRect

; 787  :                         
; 788  :                         POINT Center = { WindowRect.right/2, WindowRect.bottom/2 };

  0091f	8b 84 24 28 01
	00 00		 mov	 eax, DWORD PTR WindowRect$21[rsp+8]
  00926	99		 cdq
  00927	2b c2		 sub	 eax, edx
  00929	d1 f8		 sar	 eax, 1
  0092b	89 84 24 c0 00
	00 00		 mov	 DWORD PTR Center$12[rsp], eax
  00932	8b 84 24 2c 01
	00 00		 mov	 eax, DWORD PTR WindowRect$21[rsp+12]
  00939	99		 cdq
  0093a	2b c2		 sub	 eax, edx
  0093c	d1 f8		 sar	 eax, 1
  0093e	89 84 24 c4 00
	00 00		 mov	 DWORD PTR Center$12[rsp+4], eax

; 789  :                         ClientToScreen(GlobalState->Window, &Center);

  00945	48 8d 94 24 c0
	00 00 00	 lea	 rdx, QWORD PTR Center$12[rsp]
  0094d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR GlobalState
  00954	48 8b 88 90 01
	00 00		 mov	 rcx, QWORD PTR [rax+400]
  0095b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_ClientToScreen
$LN17@WinMain:

; 790  :                         // SetCursorPos(Center.x, Center.y);
; 791  :                     }
; 792  :                     
; 793  :                     ShouldClose = Game.GameUpdateAndRender(GlobalState->WindowFlags,

  00961	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR GlobalState
  00968	f3 0f 10 84 24
	98 00 00 00	 movss	 xmm0, DWORD PTR DeltaTime$9[rsp]
  00971	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  00977	4c 8b c8	 mov	 r9, rax
  0097a	4c 8d 84 24 70
	02 00 00	 lea	 r8, QWORD PTR GameMemory$[rsp]
  00982	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR GlobalState
  00989	48 8b 90 9c 01
	00 00		 mov	 rdx, QWORD PTR [rax+412]
  00990	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR GlobalState
  00997	8b 88 98 01 00
	00		 mov	 ecx, DWORD PTR [rax+408]
  0099d	ff 94 24 48 01
	00 00		 call	 QWORD PTR Game$22[rsp+24]
  009a4	89 84 24 8c 00
	00 00		 mov	 DWORD PTR ShouldClose$7[rsp], eax

; 794  :                                                            GlobalState->WindowDimension,
; 795  :                                                            &GameMemory, &GlobalState->GameInput, DeltaTime);
; 796  :                     
; 797  :                     Win32D3D11EndFrame(GlobalState->D3D11State.SwapChain, true);

  009ab	ba 01 00 00 00	 mov	 edx, 1
  009b0	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR GlobalState
  009b7	48 8b 88 d0 00
	00 00		 mov	 rcx, QWORD PTR [rax+208]
  009be	e8 00 00 00 00	 call	 Win32D3D11EndFrame

; 798  :                     
; 799  :                     GlobalState->WindowFlags = WINDOW_FLAGS_NONE;

  009c3	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR GlobalState
  009ca	c7 80 98 01 00
	00 00 00 00 00	 mov	 DWORD PTR [rax+408], 0

; 800  :                 }

  009d4	e9 5b fb ff ff	 jmp	 $LN2@WinMain
$LN3@WinMain:
$LN11@WinMain:

; 801  :             }
; 802  :         }

  009d9	eb 07		 jmp	 SHORT $LN9@WinMain
$LN8@WinMain:

; 803  :         else
; 804  :         {
; 805  :             // TODO(evan): Logging
; 806  :             return(1);

  009db	b8 01 00 00 00	 mov	 eax, 1
  009e0	eb 0b		 jmp	 SHORT $LN1@WinMain
$LN9@WinMain:

; 807  :         }
; 808  :     }

  009e2	eb 07		 jmp	 SHORT $LN7@WinMain
$LN6@WinMain:

; 809  :     else
; 810  :     {
; 811  :         // TODO(evan): Logging
; 812  :         return(1);

  009e4	b8 01 00 00 00	 mov	 eax, 1
  009e9	eb 02		 jmp	 SHORT $LN1@WinMain
$LN7@WinMain:

; 813  :     }
; 814  :     
; 815  :     return(0);

  009eb	33 c0		 xor	 eax, eax
$LN1@WinMain:

; 816  : }

  009ed	48 81 c4 78 03
	00 00		 add	 rsp, 888		; 00000378H
  009f4	5f		 pop	 rdi
  009f5	5e		 pop	 rsi
  009f6	c3		 ret	 0
WinMain	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File W:\new-horizons\code\horizons_platform.h
_TEXT	SEGMENT
WindowFlags$ = 8
WindowDimension$ = 16
Memory$ = 24
GameInput$ = 32
DeltaTime$ = 40
GameUpdateAndRenderStub PROC

; 343  :     {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx

; 344  :         return(false);

  00013	33 c0		 xor	 eax, eax

; 345  :     }

  00015	c3		 ret	 0
GameUpdateAndRenderStub ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File W:\new-horizons\code\horizons_platform.h
_TEXT	SEGMENT
R$ = 0
tv68 = 8
Result$ = 16
Value$ = 48
Alignment$ = 56
AlignTo	PROC

; 333  :     {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 334  :         memory_index R = Value % Alignment;

  0000e	33 d2		 xor	 edx, edx
  00010	48 8b 44 24 30	 mov	 rax, QWORD PTR Value$[rsp]
  00015	48 f7 74 24 38	 div	 QWORD PTR Alignment$[rsp]
  0001a	48 8b c2	 mov	 rax, rdx
  0001d	48 89 04 24	 mov	 QWORD PTR R$[rsp], rax

; 335  :         memory_index Result = R ? (Value + (Alignment - R)) : Value;

  00021	48 83 3c 24 00	 cmp	 QWORD PTR R$[rsp], 0
  00026	74 21		 je	 SHORT $LN3@AlignTo
  00028	48 8b 04 24	 mov	 rax, QWORD PTR R$[rsp]
  0002c	48 8b 4c 24 38	 mov	 rcx, QWORD PTR Alignment$[rsp]
  00031	48 2b c8	 sub	 rcx, rax
  00034	48 8b c1	 mov	 rax, rcx
  00037	48 8b 4c 24 30	 mov	 rcx, QWORD PTR Value$[rsp]
  0003c	48 03 c8	 add	 rcx, rax
  0003f	48 8b c1	 mov	 rax, rcx
  00042	48 89 44 24 08	 mov	 QWORD PTR tv68[rsp], rax
  00047	eb 0a		 jmp	 SHORT $LN4@AlignTo
$LN3@AlignTo:
  00049	48 8b 44 24 30	 mov	 rax, QWORD PTR Value$[rsp]
  0004e	48 89 44 24 08	 mov	 QWORD PTR tv68[rsp], rax
$LN4@AlignTo:
  00053	48 8b 44 24 08	 mov	 rax, QWORD PTR tv68[rsp]
  00058	48 89 44 24 10	 mov	 QWORD PTR Result$[rsp], rax

; 336  :         
; 337  :         return(Result);

  0005d	48 8b 44 24 10	 mov	 rax, QWORD PTR Result$[rsp]

; 338  :     }

  00062	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00066	c3		 ret	 0
AlignTo	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File W:\new-horizons\code\horizons_platform.h
_TEXT	SEGMENT
Result$ = 0
Arena$ = 32
Size$ = 40
PopSize	PROC

; 221  :     {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 18	 sub	 rsp, 24

; 222  :         if(Arena->Used - Size >= 0)

  0000e	48 8b 44 24 20	 mov	 rax, QWORD PTR Arena$[rsp]
  00013	48 8b 4c 24 28	 mov	 rcx, QWORD PTR Size$[rsp]
  00018	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  0001c	48 2b c1	 sub	 rax, rcx
  0001f	48 85 c0	 test	 rax, rax
  00022	72 1a		 jb	 SHORT $LN2@PopSize

; 223  :         {
; 224  :             Arena->Used -= Size;

  00024	48 8b 44 24 20	 mov	 rax, QWORD PTR Arena$[rsp]
  00029	48 8b 4c 24 28	 mov	 rcx, QWORD PTR Size$[rsp]
  0002e	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  00032	48 2b c1	 sub	 rax, rcx
  00035	48 8b 4c 24 20	 mov	 rcx, QWORD PTR Arena$[rsp]
  0003a	48 89 41 10	 mov	 QWORD PTR [rcx+16], rax
$LN2@PopSize:

; 225  :         }
; 226  :         
; 227  :         void *Result = Arena->Memory + Arena->Used;

  0003e	48 8b 44 24 20	 mov	 rax, QWORD PTR Arena$[rsp]
  00043	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00046	48 8b 4c 24 20	 mov	 rcx, QWORD PTR Arena$[rsp]
  0004b	48 03 41 10	 add	 rax, QWORD PTR [rcx+16]
  0004f	48 89 04 24	 mov	 QWORD PTR Result$[rsp], rax

; 228  :         return(Result);

  00053	48 8b 04 24	 mov	 rax, QWORD PTR Result$[rsp]

; 229  :     }

  00057	48 83 c4 18	 add	 rsp, 24
  0005b	c3		 ret	 0
PopSize	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File W:\new-horizons\code\horizons_platform.h
_TEXT	SEGMENT
Result$ = 0
Arena$ = 32
Size$ = 40
PushSize PROC

; 207  :     {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 18	 sub	 rsp, 24

; 208  :         void *Result = 0;

  0000e	48 c7 04 24 00
	00 00 00	 mov	 QWORD PTR Result$[rsp], 0

; 209  :         if(Arena->Size >= Arena->Used + Size)

  00016	48 8b 44 24 20	 mov	 rax, QWORD PTR Arena$[rsp]
  0001b	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  0001f	48 03 44 24 28	 add	 rax, QWORD PTR Size$[rsp]
  00024	48 8b 4c 24 20	 mov	 rcx, QWORD PTR Arena$[rsp]
  00029	48 39 41 08	 cmp	 QWORD PTR [rcx+8], rax
  0002d	72 2c		 jb	 SHORT $LN2@PushSize

; 210  :         {
; 211  :             Result = Arena->Memory + Arena->Used;

  0002f	48 8b 44 24 20	 mov	 rax, QWORD PTR Arena$[rsp]
  00034	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00037	48 8b 4c 24 20	 mov	 rcx, QWORD PTR Arena$[rsp]
  0003c	48 03 41 10	 add	 rax, QWORD PTR [rcx+16]
  00040	48 89 04 24	 mov	 QWORD PTR Result$[rsp], rax

; 212  :             Arena->Used += Size;

  00044	48 8b 44 24 20	 mov	 rax, QWORD PTR Arena$[rsp]
  00049	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  0004d	48 03 44 24 28	 add	 rax, QWORD PTR Size$[rsp]
  00052	48 8b 4c 24 20	 mov	 rcx, QWORD PTR Arena$[rsp]
  00057	48 89 41 10	 mov	 QWORD PTR [rcx+16], rax
$LN2@PushSize:

; 213  :         }
; 214  :         
; 215  :         return(Result);

  0005b	48 8b 04 24	 mov	 rax, QWORD PTR Result$[rsp]

; 216  :     }

  0005f	48 83 c4 18	 add	 rsp, 24
  00063	c3		 ret	 0
PushSize ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File W:\new-horizons\code\horizons_platform.h
_TEXT	SEGMENT
Arena$ = 8
BackingBuffer$ = 16
Size$ = 24
InitializeArena PROC

; 197  :     {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 198  :         Arena->Memory = BackingBuffer;

  0000f	48 8b 44 24 08	 mov	 rax, QWORD PTR Arena$[rsp]
  00014	48 8b 4c 24 10	 mov	 rcx, QWORD PTR BackingBuffer$[rsp]
  00019	48 89 08	 mov	 QWORD PTR [rax], rcx

; 199  :         Arena->Size = Size;

  0001c	48 8b 44 24 08	 mov	 rax, QWORD PTR Arena$[rsp]
  00021	48 8b 4c 24 18	 mov	 rcx, QWORD PTR Size$[rsp]
  00026	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx

; 200  :         Arena->Used = 0;

  0002a	48 8b 44 24 08	 mov	 rax, QWORD PTR Arena$[rsp]
  0002f	48 c7 40 10 00
	00 00 00	 mov	 QWORD PTR [rax+16], 0

; 201  :     }

  00037	c3		 ret	 0
InitializeArena ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File W:\new-horizons\code\horizons_types.h
_TEXT	SEGMENT
Result$ = 0
Value$ = 32
SafeTruncateUInt64 PROC

; 165  :     {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 18	 sub	 rsp, 24

; 166  :         Assert(Value <= 0xFFFFFFFF);

  00009	b8 ff ff ff ff	 mov	 eax, -1			; ffffffffH
  0000e	48 39 44 24 20	 cmp	 QWORD PTR Value$[rsp], rax
  00013	76 0b		 jbe	 SHORT $LN2@SafeTrunca
  00015	c7 04 25 00 00
	00 00 00 00 00
	00		 mov	 DWORD PTR ds:0, 0
$LN2@SafeTrunca:

; 167  :         u32 Result = (u32)Value;

  00020	8b 44 24 20	 mov	 eax, DWORD PTR Value$[rsp]
  00024	89 04 24	 mov	 DWORD PTR Result$[rsp], eax

; 168  :         return(Result);

  00027	8b 04 24	 mov	 eax, DWORD PTR Result$[rsp]

; 169  :     }

  0002a	48 83 c4 18	 add	 rsp, 24
  0002e	c3		 ret	 0
SafeTruncateUInt64 ENDP
_TEXT	ENDS
END
